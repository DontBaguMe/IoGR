arch 65816
hirom
bank noassume


function BankOf(label) = label>>16

macro MTryGiveItemAndFlag(Item16,Flag)
  lda.w #<Item16>
  jsl LR_GiveAnyItemA16OrSec
  bcs $03
    cop #$CC
    db <Flag>
endmacro

incsrc "iogr_exit_ledger.asr"
incsrc "iogr_asset_ledger.asr"
incsrc "iogr_monster_defaults.asr"


; Important routine labels.
{
LR_SetFlag20A = $80b481
LR_SecOnFlag20A = $80B489
LR_ParseDialogueScriptAtY = $82f048
SR_RemoveHeldItem = $839FB2
LR_ClearMonsterKilledFlags = $80b4cc
LR_PlaceSelfBetween04And06 = $8aa41c
LR_OrbitAtY = $80F3C9
LR_Orbit = $80f3d3
TIndexedPaletteBundle = $80B522
EChaser = $80E683
}

; Various defines for Apocalypse Gaia, which don't
; really have to be at the top of the file.
{
; Set up sprite substitution lists.
; Defaults are in the comments.
{
!DG_Spr_Comet_Chatter_1 = $0D
!DG_Spr_Comet_Open = $0E
!DG_Spr_Comet_Chatter_2 = $0F
!DG_Spr_Rain = $16
!DG_Spr_Core_Flame = $00
!DG_Spr_Core_Flicker = $01
!DG_Spr_Core_Vanish = $02
!DG_Spr_Core_Bubbles = $0C
!DG_Spr_Head_Bottom = $03
!DG_Spr_Head_MouthClosed = $04
!DG_Spr_Head_OpeningX = $17 ; first frame is only bottom of head...
!DG_Spr_Head_MouthOpen = $05
!DG_Spr_Head_WhileBeam = $06
!DG_Spr_Head_TopEnergyBeam = $1A
!DG_Spr_Head_Melting_1 = $19
!DG_Spr_Head_Melting_Static = $07
!DG_Spr_Head_Melted = $1E
!DG_Spr_Head_Flickering = $18
!DG_Spr_MouthLaserHitbox = $1F
!DG_Spr_DeathLightning_1 = $08
!DG_Spr_DeathLightning_2 = $09
!DG_Spr_Energy_Small = $0A
!DG_Spr_Energy_Medium = $0B
!DG_Spr_Energy_Large_Anim = $14
!DG_Spr_Energy_Large = $15
!DG_Spr_Lightning_More = $10
!DG_Spr_Bubble_SmallWave = $11
!DG_Spr_Bubble_LargeWave = $12
!DG_Spr_Bubble = $13
!DG_Spr_Rocks_1 = $1B
!DG_Spr_Rocks_2 = $1C
!DG_Spr_Rocks_3 = $1D

!AG_Spr_Core_P1_Idle = $00   ; $00
!AG_Spr_Core_P2_Atk1 = !DG_Spr_Head_WhileBeam   ; $01
!AG_Spr_Core_P2_Atk2 = !DG_Spr_Head_TopEnergyBeam   ; $02
!AG_Spr_Core_P2_Dmg = !DG_Spr_Energy_Large_Anim ; $03
!AG_Spr_Core_P2_Death = $19 ; $04
!AG_Spr_Bit_P1_Idle = $04 ; $05
!AG_Spr_Bit_P1_Atk1 = !DG_Spr_Head_WhileBeam ; $06
!AG_Spr_Bit_P1_Atk2 = $05 ; $07
!AG_Spr_Launcher_Idle = !DG_Spr_MouthLaserHitbox ; $08
!AG_Spr_Launcher_Atk1 = $09 ; $09
!AG_Spr_Launcher_Atk2 = $10 ; $0A
!AG_Spr_Bit_P2_Idle = !DG_Spr_Core_Bubbles ; $0B
!AG_Spr_Fire_Start = $0A ; $0C
!AG_Spr_Fire_Wait = $01 ; $0D
!AG_Spr_Fire_Rise = $14 ; $0E
!AG_Spr_Fire_Rain = $16 ; $0F
; !AG_Spr_Unused = $10 ; (unused)
!AG_Spr_Bit_P1_Bullet = $0A ; $11
!AG_Spr_Nuke_Fall = !DG_Spr_Rocks_3 ; $12
!AG_Spr_Nuke_Piece = !DG_Spr_Energy_Small ; $13
!AG_Spr_Bubble_Spawn = $09   ; $14
!AG_Spr_FloorBeam = $14 ; $15
!AG_Spr_Bit_P1_Atk3 = $1A ; $16
!AG_Spr_Bubble_Hold = $13 ; $17
!AG_Spr_Bubble_Atk = $13 ; $18
!AG_Spr_Core_P2_Atk3 = !DG_Spr_Head_WhileBeam   ; $19
!AG_Spr_Launcher_Atk3 = $09 ; $1A
!AG_Spr_Bit_P1_Atk5 = $04 ; $1B
!AG_Spr_Bit_P2_DoFire = $14 ; $1C
; !AG_Spr_Unused = $1D ; (unused)
!AG_Spr_FCore_Move = !DG_Spr_Head_Melting_Static ; $1E
!AG_Spr_FCore_Dmg2 = !DG_Spr_Energy_Large_Anim ; $1F
!AG_Spr_FCore_Dmg3 = !DG_Spr_Head_Melting_1 ; $20
!AG_Spr_FCore_Dmg4 = !DG_Spr_Energy_Large_Anim ; $21
!AG_Spr_Mini_Fall = !DG_Spr_Energy_Large_Anim ; $22
!AG_Spr_Mini_Idle = $19 ; $23
!AG_Spr_Mini_Fly = $19 ; $24
!AG_Spr_Mini_Dmg = $1E ; $25
!AG_Spr_Mini_Death1 = !DG_Spr_Energy_Large_Anim ; $26
!AG_Spr_Mini_Death2 = !DG_Spr_DeathLightning_1 ; $27
!AG_Spr_FCore_Joint = $1C ; $28
!AG_Spr_Cannon_Dir_4 = $0A   ; $29
!AG_Spr_Cannon_Dir_0 = !AG_Spr_Cannon_Dir_4   ; $2A
!AG_Spr_Cannon_Dir_6 = !AG_Spr_Cannon_Dir_4   ; $2B
!AG_Spr_Cannon_Dir_2 = !AG_Spr_Cannon_Dir_4   ; $2C
!AG_Spr_Cannon_Dir_5 = !AG_Spr_Cannon_Dir_4   ; $2D
!AG_Spr_Cannon_Dir_7 = !AG_Spr_Cannon_Dir_4   ; $2E
!AG_Spr_Cannon_Dir_1 = !AG_Spr_Cannon_Dir_4   ; $2F
!AG_Spr_Cannon_Dir_3 = !AG_Spr_Cannon_Dir_4   ; $30
; !AG_Spr_Unused = $31 ; (unused)
!AG_Spr_FCBullet_Dir4_1 = $0A ; $32
!AG_Spr_FCBullet_Dir0_1 = !AG_Spr_FCBullet_Dir4_1 ; $33
!AG_Spr_FCBullet_Dir6_1 = !AG_Spr_FCBullet_Dir4_1 ; $34
!AG_Spr_FCBullet_Dir2_1 = !AG_Spr_FCBullet_Dir4_1 ; $35
!AG_Spr_FCBullet_Dir5_1 = !AG_Spr_FCBullet_Dir4_1 ; $36
!AG_Spr_FCBullet_Dir7_1 = !AG_Spr_FCBullet_Dir4_1 ; $37
!AG_Spr_FCBullet_Dir1_1 = !AG_Spr_FCBullet_Dir4_1 ; $38
!AG_Spr_FCBullet_Dir3_1 = !AG_Spr_FCBullet_Dir4_1 ; $39
!AG_Spr_FCBullet_Dir4_2 = !AG_Spr_FCBullet_Dir4_1 ; $3A
!AG_Spr_FCBullet_Dir0_2 = !AG_Spr_FCBullet_Dir4_1 ; $3B
!AG_Spr_FCBullet_Dir6_2 = !AG_Spr_FCBullet_Dir4_1 ; $3C
!AG_Spr_FCBullet_Dir2_2 = !AG_Spr_FCBullet_Dir4_1 ; $3D
!AG_Spr_FCBullet_Dir5_2 = !AG_Spr_FCBullet_Dir4_1 ; $3E
!AG_Spr_FCBullet_Dir7_2 = !AG_Spr_FCBullet_Dir4_1 ; $3F
!AG_Spr_FCBullet_Dir1_2 = !AG_Spr_FCBullet_Dir4_1 ; $40
!AG_Spr_FCBullet_Dir3_2 = !AG_Spr_FCBullet_Dir4_1 ; $41
!AG_Spr_FCore_Dmg1 = !DG_Spr_Energy_Large_Anim ; $42
}
}



; Bank $80
{

; BRK/COP handler optimization
org $80800f
VectorBrk:
jml BrkHandler


org $808067
if !SettingRedJewelMadness == 1
lda #$0028
elseif !SettingOHKO == 1
lda #$0001
elseif !SettingZ3 == 1
lda #$0006    ; Start with 6 HP instead of 8
else
lda #$0008    ; Default, vanilla
endif


; Optimized COP+BRK vector.
; I developed this to reduce lag during the Apocalypse Gaia fight,
; and it's harmless to include as part of the normal rando code.
org $80846d
CopHandler:
rep #$20
txy
lda $04,s : sta $0c
lda $02,s : tax : dec : sta $0a
lda [$0a] : and #$00ff
stx $0a
asl
#BrkHandler:
tax
jmp.w (.Pointers,x)
.Pointers:
{
dw $864e    ; COP #$00
dw $8689    ; COP #$01
dw $86a0    ; COP #$02
dw $86b7    ; COP #$03
dw $8714    ; COP #$04
dw $8749    ; COP #$05
dw $877e    ; COP #$06
dw $8792    ; COP #$07
dw $87a6    ; COP #$08
dw $87b5    ; COP #$09
dw $87c9    ; COP #$0A
dw $8876    ; COP #$0B
dw $888c    ; COP #$0C
dw $88a2    ; COP #$0D
dw $88c8    ; COP #$0E
dw $88ee    ; COP #$0F
dw $8925    ; COP #$10
dw $895c    ; COP #$11
dw $8975    ; COP #$12
dw $89ac    ; COP #$13
dw $89d3    ; COP #$14
dw $8a22    ; COP #$15
dw $8a4d    ; COP #$16
dw $8a78    ; COP #$17
dw $8aa3    ; COP #$18
dw $87dd    ; COP #$19
dw $8ace    ; COP #$1A
dw $8b01    ; COP #$1B
dw $8b38    ; COP #$1C
dw $8b6f    ; COP #$1D
dw $8ba6    ; COP #$1E
dw $8bdd    ; COP #$1F
dw $8c19    ; COP #$20
dw $8c26    ; COP #$21
dw $8c6f    ; COP #$22
dw Cop_23    ; COP #$23
dw $902b    ; COP #$24
dw $904e    ; COP #$25
dw $9072    ; COP #$26
dw $90ce    ; COP #$27
dw $90f4    ; COP #$28
dw $90fa    ; COP #$29
dw $9135    ; COP #$2A
dw $915f    ; COP #$2B
dw $9189    ; COP #$2C
dw $91b8    ; COP #$2D
dw $9236    ; COP #$2E
dw $926a    ; COP #$2F
dw $9299    ; COP #$30
dw $92e8    ; COP #$31
dw $9317    ; COP #$32
dw $9328    ; COP #$33
dw $9352    ; COP #$34
dw $91cc    ; COP #$35
dw $9361    ; COP #$36
dw $9364    ; COP #$37
dw $9381    ; COP #$38
dw $93aa    ; COP #$39
dw $93ce    ; COP #$3A
dw $9400    ; COP #$3B
dw $943c    ; COP #$3C
dw $9443    ; COP #$3D
dw $9485    ; COP #$3E
dw $94ad    ; COP #$3F
dw $94d5    ; COP #$40
dw $9501    ; COP #$41
dw $952f    ; COP #$42
dw $8de6    ; COP #$43
dw $956b    ; COP #$44
dw $95ea    ; COP #$45
dw $9647    ; COP #$46
dw $964c    ; COP #$47
dw $965e    ; COP #$48
dw $9668    ; COP #$49
dw $8e19    ; COP #$4A
dw $9685    ; COP #$4B
dw $96ca    ; COP #$4C
dw $9703    ; COP #$4D
dw $9774    ; COP #$4E
dw $98b8    ; COP #$4F
dw $9930    ; COP #$50
dw $997b    ; COP #$51
dw $8e36    ; COP #$52
dw $8f0d    ; COP #$53
dw $99bf    ; COP #$54
dw $99da    ; COP #$55
dw $99f5    ; COP #$56
dw $9a67    ; COP #$57
dw $9a82    ; COP #$58
dw $9a92    ; COP #$59
dw $9aa2    ; COP #$5A
dw $9ac2    ; COP #$5B
dw $9ad6    ; COP #$5C
dw $9aea    ; COP #$5D
dw $9ab2    ; COP #$5E
dw $9b89    ; COP #$5F
dw $9c3a    ; COP #$60
dw $9c91    ; COP #$61
dw $9b41    ; COP #$62
dw $9cb4    ; COP #$63
dw $9cfa    ; COP #$64
dw $9d52    ; COP #$65
dw $9d81    ; COP #$66
dw $9da3    ; COP #$67
dw $9dbd    ; COP #$68
dw $9dea    ; COP #$69
dw $9e06    ; COP #$6A
dw $a958    ; COP #$6B
dw $a992    ; COP #$6C
dw $a9ae    ; COP #$6D
dw $c200    ; COP #$6E
dw $a720    ; COP #$6F
dw $e62a    ; COP #$70
dw $292a    ; COP #$71
dw $0000    ; COP #$72
dw Cop_73    ; COP #$73
dw $7f00    ; COP #$74
dw $06bd    ; COP #$75
dw $0900    ; COP #$76
dw $0400    ; COP #$77
dw $069d    ; COP #$78
dw $fa00    ; COP #$79
dw $2aa5    ; COP #$7A
dw $0283    ; COP #$7B
dw $bb40    ; COP #$7C
dw $2aa7    ; COP #$7D
dw $2ae6    ; COP #$7E
dw $ff29    ; COP #$7F
dw $9e23    ; COP #$80
dw $9e35    ; COP #$81
dw $9e57    ; COP #$82
dw $9e79    ; COP #$83
dw $9eab    ; COP #$84
dw $9ec8    ; COP #$85
dw $9ef5    ; COP #$86
dw $9f22    ; COP #$87
dw $9f8f    ; COP #$88
dw $9faa    ; COP #$89
dw $9fc0    ; COP #$8A
dw $9fde    ; COP #$8B
dw $9ff1    ; COP #$8C
dw $a01e    ; COP #$8D
dw $a036    ; COP #$8E
dw $a06b    ; COP #$8F
dw $a081    ; COP #$90
dw $a0a7    ; COP #$91
dw $a0cd    ; COP #$92
dw $a103    ; COP #$93
dw $a119    ; COP #$94
dw $a159    ; COP #$95
dw $a16e    ; COP #$96
dw $a1b5    ; COP #$97
dw $a200    ; COP #$98
dw $a24b    ; COP #$99
dw $a267    ; COP #$9A
dw $a28c    ; COP #$9B
dw $a2a8    ; COP #$9C
dw $a2cd    ; COP #$9D
dw $a303    ; COP #$9E
dw $a342    ; COP #$9F
dw $a370    ; COP #$A0
dw $a3a7    ; COP #$A1
dw $a3d4    ; COP #$A2
dw $a401    ; COP #$A3
dw $a440    ; COP #$A4
dw $a499    ; COP #$A5
dw $a533    ; COP #$A6
dw $a5de    ; COP #$A7
dw $a6a1    ; COP #$A8
dw $a6b1    ; COP #$A9
dw $a6c1    ; COP #$AA
dw $a6d7    ; COP #$AB
dw $a6ed    ; COP #$AC
dw $a713    ; COP #$AD
dw $a731    ; COP #$AE
dw $a74f    ; COP #$AF
dw $a76d    ; COP #$B0
dw $a799    ; COP #$B1
dw $a7b3    ; COP #$B2
dw $a7be    ; COP #$B3
dw $a7c9    ; COP #$B4
dw $a7d4    ; COP #$B5
dw $a7df    ; COP #$B6
dw $a7f4    ; COP #$B7
dw $a809    ; COP #$B8
dw $a816    ; COP #$B9
dw $a823    ; COP #$BA
dw $a82e    ; COP #$BB
dw $a839    ; COP #$BC
dw $a867    ; COP #$BD
dw $a894    ; COP #$BE
dw $a8fb    ; COP #$BF
dw $a9eb    ; COP #$C0
dw $a9fb    ; COP #$C1
dw $aa07    ; COP #$C2
dw $aa13    ; COP #$C3
dw $aa30    ; COP #$C4
dw $aa60    ; COP #$C5
dw $aa8b    ; COP #$C6
dw $aa9b    ; COP #$C7
dw $aab6    ; COP #$C8
dw $aac6    ; COP #$C9
dw $aad8    ; COP #$CA
dw $ab0e    ; COP #$CB
dw $ab41    ; COP #$CC
dw $ab51    ; COP #$CD
dw $ab60    ; COP #$CE
dw $ab70    ; COP #$CF
dw $ab7f    ; COP #$D0
dw $ab8e    ; COP #$D1
dw $abc2    ; COP #$D2
dw $abd7    ; COP #$D3
dw $ac05    ; COP #$D4
dw $ac27    ; COP #$D5
dw $ac38    ; COP #$D6
dw $ac5a    ; COP #$D7
dw $ac82    ; COP #$D8
dw $ac94    ; COP #$D9
dw $acc1    ; COP #$DA
dw $acd6    ; COP #$DB
dw $acdf    ; COP #$DC
dw $ad17    ; COP #$DD
dw $ad57    ; COP #$DE
dw $ad8f    ; COP #$DF
dw $a5f7    ; COP #$E0
dw $aa74    ; COP #$E1
dw $aa47    ; COP #$E2
dw $80ea    ; COP #$E3
}



; Reduce cost of RNG (cop #$23) calls
org $808ffc
Cop_23:
{
;lda $0a : sta $02,s
phy
.FromManaged:
phd
lda #$0400 : tcd
lda #$0000 ; efficiently zero high byte for output
sep #$30
ldx #$0F
clc
-:
  lda $10,x : adc $0f,x : sta $0f,x
  dex : bne -
inc $1f   ; Required to match vanilla RNG outputs
stz $00E6
lda $10
rep #$30
pld
plx
rti
}
warnpc $80902b



; Experimental fix to a vanilla bug wherein cop #$0B masks the
; wrong tiles if called by a monster of size at least 2x2
; on the rightmost tile of a screen.
org $80b2ed
bcs B_80B325

org $80b2f6
J_80B2F6:

org $80b316
rep #$20
dec $1E : beq B_80B325
lda $1A : sta $18
jsr S_80B32B
lda $1C
bra J_80B2F6
B_80B325:
plx
pld
plb
rts
S_80B32B:
php
lda $1C
sep #$20
  clc : adc #$10 : bcs B_80B339
sta $1C
plp
rts
B_80B339:
xba : clc : adc $0693 : xba
rep #$20
sta $1C
plp
rts
warnpc $80b345


org $80b7cc
db $00, $08
TFade012NormalToWhite:
cop #$37 : db $18
cop #$39
cop #$3D
rtl

;org $80b7d6
db $00, $08
TFade012WhiteToNormal:
cop #$37 : db $19
cop #$39
cop #$3D
rtl


org $80bcdf
if !ApocalypseGaia == 1
db $04,$08
ECometBG2ShimmerEndpoint:
bit $0A1E : bpl +
jsr ECometBG2ShimmerEndpointSetup
+:
cop #$02 : dl CometHDMAResetTable : db $10
rtl
;CometHDMAResetTable:
;db $70,$00,$00,\
;   $10,$00,$00,\
;   $01,$00,$00,\
;   $01,$00,$00,$00

; This writes a sine function with an amplitude of 1 to $2110, "BG2 vertical scroll",
;  the effect of which is to cause the starry background to look a little less boring.
; But we don't want the effect to cause the Comet's surface to scroll,
;  so we write #$0000 to $7E8C30/8E30, which ends the HDMA table after about 128 scanlines. 
; Then our friend $80bcdf writes #$0000 to $2110 so that register is zeroed by the time the CRT reaches the Comet.
; We can accomplish the same effect much more cheaply
;  (and also save ourselves a thinker slot) by manually adding some lines to this thinker's HDMA table to have it do its own zeroing.
db $04,$08
ECometBG2ShimmerA:
lda #$0001                   ;<--Branch
sta $7F0008,x
cop #$5F : db $00,$88,$08
lda #$0000
sta $7E8C30
sta $7E8E30
cop #$C2
;cop #$D0                     ;[$80BCF7] ; Refresh table if leaving inv.
;  db $FF,$00 : dw ECometBG2ShimmerA
bit $0A1E : bpl ECometBG2ShimmerA ; equivalent to the cop #$D0 above
cop #$60 : db $05,$02
cop #$61 : db $00,$8C,$7E,$10
rtl

; This causes the horizontally shaking BG2 in both phases.
; V$80BD21
tsb $08                      ;<--In vanilla, branch goes to here
ECometBG2ShimmerB:
lda #$0008
sta $7F0008,x
cop #$5F : db $00,$84,$08
cop #$C2
;cop #$D0                     ;[$80BD21] ; Refresh table if leaving inv.
;  db $FF,$00 : dw ECometBG2ShimmerB
bit $0A1E : bpl ECometBG2ShimmerB ; equivalent to the cop #$D0 above
cop #$60 : db $05,$02
cop #$61 : db $00,$84,$7E,$0F
rtl

; Thinker at $80bd42.
; Removing this causes the BGs to shake from the start instead of just in P2, and also prevents Dark Gaia's BG "materialization" effect from happening.
tsb $08                      ;<--In vanilla, branch goes to here
ECometBG2ShimmerC:
lda #$0002 : sta $7F0008,x
cop #$5F : db $00,$80,$08
cop #$C2
;cop #$D0                     ;[$80BD42] ; Refresh table if leaving inv.
;  db $FF,$00 : dw ECometBG2ShimmerC
bit $0A1E : bpl ECometBG2ShimmerC ; equivalent to the cop #$D0 above
;cop #$D0                     ;[$80BD69]
;  db $01,$01 : dw .CometDead
lda $0A00 : bit #$0002 : bne .CometDead ; eq. to cop #$D0
 cop #$60 : db $05,$00;$02
 cop #$61 : db $00,$84,$7E,$0D
rtl
.CometDead:
lda #$0070 : sta $7F0008,x    ; Materialization magic.
cop #$5F : db $00,$80,$04
cop #$C2
;cop #$D0                     ;[$80BD69] ; Refresh table if leaving inv.
;  db $FF,$00 : dw .CometDead
bit $0A1E : bpl .CometDead ; equivalent to the cop #$D0 above
lda $7F0008,x
dec a
sta $7F0008,x
beq .TSleep                ;[$80BD93]
cop #$60 : db $05,$00;$02
cop #$61 : db $00,$84,$7E,$0D
rtl
.TSleep:
cop #$C1                     ;<--Branch
rtl
endif
warnpc $80BD96



org $80c312
Lut_BossClearRoomSets:
{
db $29,$0c,$29,$00
db $55,$3d,$55,$00
db $67,$5a,$74,$00
db $8a,$82,$a9,$00
db $dd,$cc,$dd,$00
db $f6,$b0,$bf,$00 ; BabelMummyQueen gives rewards.
db $29,$00,$00,$00
db $29,$00,$00,$00
db $29,$00,$00,$00
db $29,$00,$00,$00
db $29,$00,$00,$00
}


org $80c381
if !SettingZ3 == 0
jsr SR_IncreaseHpByThree   ; replaces inc $0aca in boss reward code
endif


org $80c66f
db $00 : dw $3000
;ERedJewelPickup:    ; Not enough space here for IOGR implementation,
rtl                  ; so this is nulled out and the new code is elsewhere.



org $80CA42
db $00,$00,$30
EWorldMapTransitionListener:
{
lda $0644
cmp #$0001 : bne +$03 : jmp .HandleMap01
cmp #$000a : bne +$03 : jmp .HandleMap0A
cmp #$0015 : bne +$03 : jmp .HandleMap15
cmp #$001a : bne +$03 : jmp .HandleMap1A
cmp #$001c : bne +$03 : jmp .HandleMap1C
cmp #$0030 : bne +$03 : jmp .HandleMap30
cmp #$0032 : bne +$03 : jmp .HandleMap32
cmp #$003e : bne +$03 : jmp .HandleMap3E
cmp #$0049 : bne +$03 : jmp .HandleMap49
cmp #$0069 : bne +$03 : jmp .HandleMap69
cmp #$0078 : bne +$03 : jmp .HandleMap78
cmp #$0082 : bne +$03 : jmp .HandleMap82
cmp #$0091 : bne +$03 : jmp .HandleMap91
cmp #$00a0 : bne +$03 : jmp .HandleMapA0
cmp #$00ac : bne +$03 : jmp .HandleMapAC
cmp #$00b0 : bne +$03 : jmp .HandleMapB0
cmp #$00c3 : bne +$03 : jmp .HandleMapC3
cmp #$00cc : bne +$03 : jmp .HandleMapCC
rtl
.Done:
lda #$0400 : sta $064A
cop #$C1
rtl
.HandleMap01:
cop #$C1
lda $09A4 : cmp #$0010 : bcc +
  rtl
+:
lda #$0000 : sta $0d60
cop #$66 : dw $00d4,$03a4 : db !OverworldShuffleCapeMenuId
jmp .Done
.HandleMap0A:
lda $09A4 : cmp #$02D0 : beq +
  rtl
+:
lda #$0000 : sta $0D60
cop #$66 : dw $0104,$0334 : db !OverworldShuffleEdMenuId
jmp .Done
.HandleMap15:
cop #$D0 : db $01,$01 : dw ..Flag01Set
cop #$45 : db $2D,$2E,$2F,$30 : dw ..InArea
..Flag01Set:
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $00C4,$02B4 : db !OverworldShuffleItryMenuId
jmp .Done
.HandleMap1A:
cop #$45 : db $14,$1c,$17,$1d : dw ..InArea
rtl
..InArea:
cop #$66 : dw $0090,$0260 : db !OverworldShuffleMoonMenuId
cop #$C1
rtl
.HandleMap1C:
cop #$45 : db $06,$1C,$08,$1E : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0134,$0284 : db !OverworldShuffleIncaMenuId
jmp .Done
.HandleMap30:
cop #$45 : db $03,$00,$06,$01 : dw ..InArea
rtl
..InArea:
cop #$66 : dw $0250,$0350 : db !OverworldShuffleDCstMenuId
cop #$C1
rtl
.HandleMap32:
cop #$45 : db $12,$3C,$16,$3E : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0254,$02D4 : db !OverworldShuffleFrejMenuId
jmp .Done
.HandleMap3E:
cop #$45 : db $0A,$3F,$0C,$40 : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0334,$0334 : db !OverworldShuffleMineMenuId
jmp .Done
.HandleMap49:
cop #$45 : db $07,$0d,$0a,$0e : dw ..InArea
rtl
..InArea:
cop #$66 : dw $0270,$0270 : db !OverworldShuffleNeilMenuId
cop #$C1
rtl
.HandleMap69:
cop #$45 : db $29,$0D,$2C,$0F : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0384,$0164 : db !OverworldShuffleAnglMenuId
jmp .Done
.HandleMap78:
cop #$45 : db $27,$3D,$29,$40 : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $02D4,$01A4 : db !OverworldShuffleWtmaMenuId
jmp .Done
.HandleMap82:
cop #$45 : db $00,$08,$01,$0B : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $02A4,$0124 : db !OverworldShuffleGtWlMenuId
jmp .Done
.HandleMap91:
cop #$45 : db $3F,$42,$40,$48 : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $01D4,$0134 : db !OverworldShuffleEuroMenuId
jmp .Done
.HandleMapA0:
cop #$45 : db $2F,$1B,$30,$1C : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0214,$00B4 : db !OverworldShuffleKresMenuId
jmp .Done
.HandleMapAC:
cop #$45 : db $1F,$1B,$20,$20 : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0124,$01A4 : db !OverworldShuffleNtVlMenuId
jmp .Done
.HandleMapB0:
cop #$45 : db $1D,$4F,$24,$50 : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0134,$0154 : db !OverworldShuffleAnkrMenuId
jmp .Done
.HandleMapC3:
cop #$45 : db $00,$0D,$01,$11 : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0094,$0114 : db !OverworldShuffleDaoMenuId
jmp .Done
.HandleMapCC:
cop #$45 : db $00,$0D,$01,$0F : dw ..InArea
cop #$45 : db $3F,$0D,$40,$0F : dw ..InArea
rtl
..InArea:
lda #$0000 : sta $0D60
cop #$66 : dw $0074,$00B4 : db !OverworldShufflePymdMenuId
jmp .Done
}
warnpc $80cd59


org $80cd12
db $80,$04    ; "Force single overworld map exit" (in Dao)


org $80d69d
nop    ; There's no reason respawning with >100 DP should halve your health...

org $80d796
ERespawnMessage:
lda #$CFF0 : tsb $065A
stz $0AF8
cop #$DA : db $02
lda $0aca : beq .InfiniteDeathLoop    ; i.e. player has reduced max HP to 0 in RJM
.NormalDeath:
cop #$BF : dw ..Text
-:
lda #$CFF0 : trb $065A
cop #$E0
..Text:
db $d3,!PlayerDeathText
.InfiniteDeathLoop:
cop #$BF : dw ..Text
bra -
..Text:
db $cd : dl TextInfiniteDeathLoop
db $ca
warnpc $80d877


; Make monster death look up the correct GEM tables.
org $80dadd
jsl $83fea1
org $80dc07
jsl $83fea1


org $80dbf2
if !SettingOrbRando > 0
nop : nop    ; Don't flag self killed yet, in case player's inventory is full.
endif


org $80DC23 
; To support orb rando, dead monster checks whether its item has been given,
; but doesn't set the item-given flag; EMonsterDeathDoorOrItem does that,
; since it can more easily verify inventory free space.
lda $7F0024,x : beq ++
jsl LR_SecOnMonsterItemFlagA : bcs ++
  cop #$A5 : dl EMonsterDeathDoorOrItem : db $00,$00 : dw $0342
  jsl LR_PrepareMonsterDeathDoorOrb
  bra +++
++:
cop #$D8
+++:
jmp $dc54


org $80ddf2
EMonsterDeathDoorOpener:


org $80e03c
if !SettingZ3 == 0
inc $0aca : inc $0aca : inc $0aca   ; HP jewel gives 3 HP now.
nop : nop : nop   ; Replaces (unused) lda #$0255
lda $0aca
endif


; For Early Firebird, we spawn the Firebird palette manager via the camera actor.
org $80eaed
db $00 : dw $2c00
ECameraEtc:
if !SettingEarlyFirebird == 1
jsl LR_SpawnFirebirdPaletteManager
nop
endif


org $80f49a
; roominit.bin, difficulty-specific room initialization
{
lda $0b24 : beq +++
  dec : beq ++
  dec : beq +
cop #$CD : dw !RemovedRoomRewardExpertFlag1
cop #$CD : dw !RemovedRoomRewardExpertFlag2
cop #$CD : dw !RemovedRoomRewardExpertFlag3
cop #$CD : dw !RemovedRoomRewardExpertFlag4
cop #$CD : dw !RemovedRoomRewardExpertFlag5
cop #$CD : dw !RemovedRoomRewardExpertFlag6
+:
cop #$CD : dw !RemovedRoomRewardAdvancedFlag1
cop #$CD : dw !RemovedRoomRewardAdvancedFlag2
cop #$CD : dw !RemovedRoomRewardAdvancedFlag3
cop #$CD : dw !RemovedRoomRewardAdvancedFlag4
cop #$CD : dw !RemovedRoomRewardAdvancedFlag5
cop #$CD : dw !RemovedRoomRewardAdvancedFlag6
++:
cop #$CD : dw !RemovedRoomRewardIntermediateFlag1
cop #$CD : dw !RemovedRoomRewardIntermediateFlag2
cop #$CD : dw !RemovedRoomRewardIntermediateFlag3
cop #$CD : dw !RemovedRoomRewardIntermediateFlag4
cop #$CD : dw !RemovedRoomRewardIntermediateFlag5
cop #$CD : dw !RemovedRoomRewardIntermediateFlag6
+++:
rtl
}


org $80f500
; custom actor for RJ pickup spots
db $00 : dw $3000
ERedJewelSpot:
{
cop #$C0 : dw .OnInteract
cop #$88 : dl $8ee000
cop #$8D : db $00
cop #$C1
rtl
.OnInteract:
lda $0e : clc : adc #$0080 : jsl LR_SecOnFlag20A : bcc .TryGiveItem
  rtl
.TryGiveItem:
pea.w .GaveItemSuccess-1
lda $0e : sta $0000
cop #$D9 : dw $0000, ..Choices
..Choices:
  dw .Spot00,.Spot01,.Spot02,.Spot03,.Spot04,.Spot05,.Spot06,.Spot07
  dw .Spot08,.Spot09,.Spot0A,.Spot0B,.Spot0C,.Spot0D,.Spot0E,.Spot0F
.Spot00:
lda.w #!CapeLancesHouseItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
.Spot01:
lda.w #!CapeTowerItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
.Spot02:
lda.w #!EDEndBarrelsItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
.Spot03:
lda.w #!ItoryLogsItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
.Spot04:
lda.w #!DiamondCoastJarItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
.Spot05:
lda.w #!FrejHotelItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
.Spot06:
lda.w #!AnglDanceHallItem : jsl LR_GiveAnyItemA16OrSec
bcs +
rts
+:
bra .InvFull
.Spot07:
lda.w #!AnglIshtarSidePotItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot08:
lda.w #!WtrmWestJarItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot09:
lda.w #!WtrmDesertJarItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot0A:
lda.w #!EuroAlleyItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot0B:
lda.w #!EuroSlaveRoomBarrelItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot0C:
lda.w #!NativesPotItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot0D:
lda.w #!DaoGrassItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot0E:
lda.w #!PyramidFoyerItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.Spot0F:
lda.w #!BabelPillowItem : jsl LR_GiveAnyItemA16OrSec
bcs .InvFull
rts
.GaveItemSuccess:
lda $0e : clc : adc #$0080 : jsl LR_SetFlag20A
rtl
.InvFull:
pla   ; reverse earlier pea
rtl
}


SR_IncreaseHpByThree:   ; For boss room reward code.
inc $0aca
inc $0aca
inc $0aca
rts


LR_PrepareMonsterDeathDoorOrb:
lda $0012,y : ora #$1000 : sta $0012,y
phx
  lda $7F0024,x
  tyx
  sta $7F0024,x
plx
phx
  lda $7f0022,x
  tyx
  sta $7f0022,x
plx
rtl


; Custom COP #$73 --> "Managed RNG"
Cop_73:
Brk_73:
{
phy
lda #$0000 ; efficiently zero high byte for output
sep #$20
lda $00E6 : inc a
cmp #$10 : bcc +
 rep #$20 : jmp Cop_23_FromManaged
+:
sta $00E6
tay
lda $0410,y
plx
rti
}


ECometBG2ShimmerEndpointSetup:
lda #$7010
 sta.l CometHDMAResetTable-$01
 sta.l CometHDMAResetTable+$03
lda #$0100
 sta.l CometHDMAResetTable+$05
 sta.l CometHDMAResetTable+$08
 sta.l CometHDMAResetTable+$0C
lda $06C4
 sta.l CometHDMAResetTable+$01
 sta.l CometHDMAResetTable+$04
 sta.l CometHDMAResetTable+$07
 sta.l CometHDMAResetTable+$0A
rts
CometHDMAResetTable = $7E8C80


warnpc $80FFB0
org $80ffd1
db $52,$41,$4E,$44,$4F    ; Append "Rando" to ROM title

; COP/BRK handler optimization
org $80ffe4
skip 2 ;dw VectorCop
dw VectorBrk


} ; end bank $80



; Bank $81
{

org $818234
incsrc "iogr_81_exit_table.asr"
warnpc $81aade
org $81aade
Lut_RoomClearRewards:
{
db !RoomClearReward00,!RoomClearReward01,!RoomClearReward02,!RoomClearReward03,!RoomClearReward04,!RoomClearReward05,!RoomClearReward06,!RoomClearReward07,!RoomClearReward08,!RoomClearReward09,!RoomClearReward0A,!RoomClearReward0B,!RoomClearReward0C,!RoomClearReward0D,!RoomClearReward0E,!RoomClearReward0F
db !RoomClearReward10,!RoomClearReward11,!RoomClearReward12,!RoomClearReward13,!RoomClearReward14,!RoomClearReward15,!RoomClearReward16,!RoomClearReward17,!RoomClearReward18,!RoomClearReward19,!RoomClearReward1A,!RoomClearReward1B,!RoomClearReward1C,!RoomClearReward1D,!RoomClearReward1E,!RoomClearReward1F
db !RoomClearReward20,!RoomClearReward21,!RoomClearReward22,!RoomClearReward23,!RoomClearReward24,!RoomClearReward25,!RoomClearReward26,!RoomClearReward27,!RoomClearReward28,!RoomClearReward29,!RoomClearReward2A,!RoomClearReward2B,!RoomClearReward2C,!RoomClearReward2D,!RoomClearReward2E,!RoomClearReward2F
db !RoomClearReward30,!RoomClearReward31,!RoomClearReward32,!RoomClearReward33,!RoomClearReward34,!RoomClearReward35,!RoomClearReward36,!RoomClearReward37,!RoomClearReward38,!RoomClearReward39,!RoomClearReward3A,!RoomClearReward3B,!RoomClearReward3C,!RoomClearReward3D,!RoomClearReward3E,!RoomClearReward3F
db !RoomClearReward40,!RoomClearReward41,!RoomClearReward42,!RoomClearReward43,!RoomClearReward44,!RoomClearReward45,!RoomClearReward46,!RoomClearReward47,!RoomClearReward48,!RoomClearReward49,!RoomClearReward4A,!RoomClearReward4B,!RoomClearReward4C,!RoomClearReward4D,!RoomClearReward4E,!RoomClearReward4F
db !RoomClearReward50,!RoomClearReward51,!RoomClearReward52,!RoomClearReward53,!RoomClearReward54,!RoomClearReward55,!RoomClearReward56,!RoomClearReward57,!RoomClearReward58,!RoomClearReward59,!RoomClearReward5A,!RoomClearReward5B,!RoomClearReward5C,!RoomClearReward5D,!RoomClearReward5E,!RoomClearReward5F
db !RoomClearReward60,!RoomClearReward61,!RoomClearReward62,!RoomClearReward63,!RoomClearReward64,!RoomClearReward65,!RoomClearReward66,!RoomClearReward67,!RoomClearReward68,!RoomClearReward69,!RoomClearReward6A,!RoomClearReward6B,!RoomClearReward6C,!RoomClearReward6D,!RoomClearReward6E,!RoomClearReward6F
db !RoomClearReward70,!RoomClearReward71,!RoomClearReward72,!RoomClearReward73,!RoomClearReward74,!RoomClearReward75,!RoomClearReward76,!RoomClearReward77,!RoomClearReward78,!RoomClearReward79,!RoomClearReward7A,!RoomClearReward7B,!RoomClearReward7C,!RoomClearReward7D,!RoomClearReward7E,!RoomClearReward7F
db !RoomClearReward80,!RoomClearReward81,!RoomClearReward82,!RoomClearReward83,!RoomClearReward84,!RoomClearReward85,!RoomClearReward86,!RoomClearReward87,!RoomClearReward88,!RoomClearReward89,!RoomClearReward8A,!RoomClearReward8B,!RoomClearReward8C,!RoomClearReward8D,!RoomClearReward8E,!RoomClearReward8F
db !RoomClearReward90,!RoomClearReward91,!RoomClearReward92,!RoomClearReward93,!RoomClearReward94,!RoomClearReward95,!RoomClearReward96,!RoomClearReward97,!RoomClearReward98,!RoomClearReward99,!RoomClearReward9A,!RoomClearReward9B,!RoomClearReward9C,!RoomClearReward9D,!RoomClearReward9E,!RoomClearReward9F
db !RoomClearRewardA0,!RoomClearRewardA1,!RoomClearRewardA2,!RoomClearRewardA3,!RoomClearRewardA4,!RoomClearRewardA5,!RoomClearRewardA6,!RoomClearRewardA7,!RoomClearRewardA8,!RoomClearRewardA9,!RoomClearRewardAA,!RoomClearRewardAB,!RoomClearRewardAC,!RoomClearRewardAD,!RoomClearRewardAE,!RoomClearRewardAF
db !RoomClearRewardB0,!RoomClearRewardB1,!RoomClearRewardB2,!RoomClearRewardB3,!RoomClearRewardB4,!RoomClearRewardB5,!RoomClearRewardB6,!RoomClearRewardB7,!RoomClearRewardB8,!RoomClearRewardB9,!RoomClearRewardBA,!RoomClearRewardBB,!RoomClearRewardBC,!RoomClearRewardBD,!RoomClearRewardBE,!RoomClearRewardBF
db !RoomClearRewardC0,!RoomClearRewardC1,!RoomClearRewardC2,!RoomClearRewardC3,!RoomClearRewardC4,!RoomClearRewardC5,!RoomClearRewardC6,!RoomClearRewardC7,!RoomClearRewardC8,!RoomClearRewardC9,!RoomClearRewardCA,!RoomClearRewardCB,!RoomClearRewardCC,!RoomClearRewardCD,!RoomClearRewardCE,!RoomClearRewardCF
db !RoomClearRewardD0,!RoomClearRewardD1,!RoomClearRewardD2,!RoomClearRewardD3,!RoomClearRewardD4,!RoomClearRewardD5,!RoomClearRewardD6,!RoomClearRewardD7,!RoomClearRewardD8,!RoomClearRewardD9,!RoomClearRewardDA,!RoomClearRewardDB,!RoomClearRewardDC,!RoomClearRewardDD,!RoomClearRewardDE,!RoomClearRewardDF
db !RoomClearRewardE0,!RoomClearRewardE1,!RoomClearRewardE2,!RoomClearRewardE3,!RoomClearRewardE4,!RoomClearRewardE5,!RoomClearRewardE6,!RoomClearRewardE7,!RoomClearRewardE8,!RoomClearRewardE9,!RoomClearRewardEA,!RoomClearRewardEB,!RoomClearRewardEC,!RoomClearRewardED,!RoomClearRewardEE,!RoomClearRewardEF
db !RoomClearRewardF0,!RoomClearRewardF1,!RoomClearRewardF2,!RoomClearRewardF3,!RoomClearRewardF4,!RoomClearRewardF5,!RoomClearRewardF6,!RoomClearRewardF7,!RoomClearRewardF8,!RoomClearRewardF9,!RoomClearRewardFA,!RoomClearRewardFB,!RoomClearRewardFC,!RoomClearRewardFD,!RoomClearRewardFE,!RoomClearRewardFF
}
warnpc $81abde

; Intermediate difficulty stat table lives here.
org $81abf0
{
if !SettingZ3 == 0
db $00,$00,$00,$00
db $02,$01,$00,$02
db $02,$01,$00,$01
db $04,$02,$00,$03
db $02,$01,$00,$01
db $02,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$46,$00
db $03,$01,$33,$00
db $06,$01,$30,$00
db $03,$01,$00,$02
db $02,$02,$00,$01
db $03,$01,$00,$01
db $04,$02,$00,$02
db $03,$02,$00,$03
db $02,$02,$00,$01
db $06,$02,$00,$00
db $04,$03,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $04,$04,$00,$02
db $02,$04,$00,$01
db $02,$04,$00,$03
db $04,$04,$00,$01
db $04,$05,$00,$02
db $06,$04,$00,$01
db $08,$05,$00,$03
db $02,$01,$00,$00
db $02,$01,$00,$00
db $FF,$04,$00,$00
db $FF,$05,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$07,$7F,$00
db $10,$06,$00,$02
db $0C,$06,$00,$03
db $04,$06,$00,$01
db $03,$06,$00,$01
db $08,$08,$00,$02
db $02,$07,$00,$01
db $04,$08,$00,$03
db $28,$06,$7F,$00
db $28,$07,$7F,$00
db $32,$0A,$7F,$00
db $06,$07,$00,$01
db $10,$08,$00,$02
db $0C,$09,$00,$03
db $0C,$07,$00,$02
db $28,$09,$7F,$00
db $03,$08,$7F,$00
db $08,$04,$00,$03
db $08,$04,$00,$00
db $08,$04,$00,$01
db $06,$06,$00,$00
db $06,$08,$00,$02
db $08,$09,$00,$01
db $08,$08,$00,$01
db $06,$09,$00,$03
db $04,$04,$00,$02
db $02,$04,$00,$01
db $10,$0A,$00,$02
db $08,$0B,$00,$01
db $18,$0A,$00,$03
db $14,$0B,$00,$02
db $08,$0A,$FF,$00
db $08,$0A,$00,$03
db $04,$0A,$00,$00
db $06,$0A,$00,$02
db $03,$0A,$00,$01
db $02,$04,$00,$01
db $08,$0A,$00,$02
db $14,$0B,$00,$00
db $18,$0B,$00,$03
db $0A,$0A,$00,$02
db $28,$0F,$7F,$00
db $10,$09,$00,$02
db $03,$04,$00,$00
db $02,$04,$00,$01
if !ApocalypseGaia == 1
db $14,$08,$7F,$00
db $28,$08,$7F,$00
db $0A,$09,$7F,$00
db $01,$08,$7F,$00
db $14,$0A,$7F,$00
else
db $14,$10,$7F,$00
db $28,$0F,$7F,$00
db $0A,$10,$7F,$00
db $01,$0F,$7F,$00
db $14,$12,$7F,$00
endif
db $06,$06,$00,$02
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $10,$10,$00,$02
db $0A,$10,$00,$02
db $18,$10,$00,$02
db $04,$04,$00,$00
if !ApocalypseGaia == 1
db $01,$07,$7F,$00
db $0A,$09,$7F,$00
db $14,$08,$7F,$00
db $28,$07,$7F,$00
else
db $01,$0D,$7F,$00
db $0A,$10,$7F,$00
db $14,$0F,$7F,$00
db $28,$0D,$7F,$00
endif
db $28,$11,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
else
db $00,$00,$00,$00
db $06,$01,$00,$02
db $05,$01,$00,$01
db $0A,$01,$00,$03
db $03,$01,$00,$01
db $03,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$00,$00
db $03,$01,$00,$00
db $06,$01,$00,$00
db $08,$01,$00,$02
db $06,$01,$00,$01
db $09,$01,$00,$01
db $0B,$01,$00,$02
db $08,$01,$00,$03
db $06,$01,$00,$01
db $0E,$01,$00,$00
db $0A,$01,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$02,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $0A,$02,$00,$02
db $05,$02,$00,$01
db $05,$02,$00,$03
db $0C,$02,$00,$01
db $0C,$02,$00,$02
db $10,$02,$00,$01
db $14,$02,$00,$03
db $05,$01,$00,$00
db $05,$01,$00,$00
db $FF,$02,$00,$00
db $FF,$02,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $1A,$03,$00,$02
db $16,$03,$00,$03
db $0C,$03,$00,$01
db $08,$03,$00,$01
db $14,$04,$00,$02
db $05,$04,$00,$01
db $0A,$04,$00,$03
db $28,$03,$7F,$00
db $28,$04,$7F,$00
db $32,$05,$7F,$00
db $0F,$04,$00,$01
db $19,$04,$00,$02
db $16,$04,$00,$03
db $16,$04,$00,$02
db $28,$05,$7F,$00
db $03,$04,$7F,$00
db $14,$02,$00,$03
db $14,$02,$00,$00
db $14,$02,$00,$01
db $10,$03,$00,$00
db $10,$04,$00,$02
db $12,$04,$00,$01
db $12,$04,$00,$01
db $0F,$05,$00,$03
db $0C,$02,$00,$02
db $06,$02,$00,$01
db $19,$05,$00,$02
db $14,$06,$00,$01
db $1E,$05,$00,$03
db $1C,$06,$00,$02
db $14,$05,$FF,$00
db $14,$05,$00,$03
db $0A,$05,$00,$00
db $0F,$05,$00,$02
db $08,$05,$00,$01
db $06,$02,$00,$01
db $0C,$05,$00,$02
db $1C,$06,$00,$00
db $1E,$06,$00,$03
db $14,$05,$00,$02
db $28,$08,$7F,$00
db $19,$05,$00,$02
db $08,$02,$00,$00
db $05,$02,$00,$01
db $14,$08,$7F,$00
db $28,$08,$7F,$00
db $0A,$09,$7F,$00
db $01,$08,$7F,$00
db $14,$0A,$7F,$00
db $10,$03,$00,$02
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $14,$08,$00,$02
db $10,$08,$00,$02
db $1E,$08,$00,$02
db $0A,$02,$00,$00
db $01,$07,$7F,$00
db $0A,$09,$7F,$00
db $14,$08,$7F,$00
db $28,$07,$7F,$00
db $28,$09,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
endif
}

org $81ADA8
Lut_Chests:
.Pointers:
{
dw .Nothing    ; Map $00
dw .Nothing    ; Map $01
dw .Nothing    ; Map $02
dw .Nothing    ; Map $03
dw .Nothing    ; Map $04
dw .Nothing    ; Map $05
dw .Nothing    ; Map $06
dw .Nothing    ; Map $07
dw .Nothing    ; Map $08
dw .Nothing    ; Map $09
dw .Nothing    ; Map $0A
dw .Nothing    ; Map $0B
dw .Nothing    ; Map $0C
dw .Nothing    ; Map $0D
dw .Map0E      ; Map $0E
dw .Nothing    ; Map $0F
dw .Map10      ; Map $10
dw .Nothing    ; Map $11
dw .Map12      ; Map $12
dw .Nothing    ; Map $13
dw .Nothing    ; Map $14
dw .Nothing    ; Map $15
dw .Nothing    ; Map $16
dw .Nothing    ; Map $17
dw .Nothing    ; Map $18
dw .Nothing    ; Map $19
dw .Nothing    ; Map $1A
dw .Nothing    ; Map $1B
dw .Nothing    ; Map $1C
dw .Map1D      ; Map $1D
dw .Nothing    ; Map $1E
dw .Nothing    ; Map $1F
dw .Nothing    ; Map $20
dw .Map21      ; Map $21
dw .Nothing    ; Map $22
dw .Nothing    ; Map $23
dw .Nothing    ; Map $24
dw .Nothing    ; Map $25
dw .Map26      ; Map $26
dw .Nothing    ; Map $27
dw .Nothing    ; Map $28
dw .Nothing    ; Map $29
dw .Nothing    ; Map $2A
dw .Nothing    ; Map $2B
dw .Nothing    ; Map $2C
dw .Nothing    ; Map $2D
dw .Map2E      ; Map $2E
dw .Nothing    ; Map $2F
dw .Nothing    ; Map $30
dw .Nothing    ; Map $31
dw .Nothing    ; Map $32
dw .Nothing    ; Map $33
dw .Nothing    ; Map $34
dw .Nothing    ; Map $35
dw .Nothing    ; Map $36
dw .Nothing    ; Map $37
dw .Nothing    ; Map $38
dw .Nothing    ; Map $39
dw .Nothing    ; Map $3A
dw .Nothing    ; Map $3B
dw .Nothing    ; Map $3C
dw .Nothing    ; Map $3D
dw .Nothing    ; Map $3E
dw .Map3F      ; Map $3F
dw .Nothing    ; Map $40
dw .Nothing    ; Map $41
dw .Nothing    ; Map $42
dw .Nothing    ; Map $43
dw .Nothing    ; Map $44
dw .Nothing    ; Map $45
dw .Nothing    ; Map $46
dw .Nothing    ; Map $47
dw .Nothing    ; Map $48
dw .Nothing    ; Map $49
dw .Nothing    ; Map $4A
dw .Nothing    ; Map $4B
dw .Nothing    ; Map $4C
dw .Map4D      ; Map $4D
dw .Nothing    ; Map $4E
dw .Nothing    ; Map $4F
dw .Map50      ; Map $50
dw .Map51      ; Map $51
dw .Map52      ; Map $52
dw .Map53      ; Map $53
dw .Nothing    ; Map $54
dw .Nothing    ; Map $55
dw .Nothing    ; Map $56
dw .Nothing    ; Map $57
dw .Nothing    ; Map $58
dw .Nothing    ; Map $59
dw .Map5A      ; Map $5A
dw .Map5B      ; Map $5B
dw .Map5C      ; Map $5C
dw .Nothing    ; Map $5D
dw .Nothing    ; Map $5E
dw .Map5F      ; Map $5F
dw .Map60      ; Map $60
dw .Map61      ; Map $61
dw .Nothing    ; Map $62
dw .Nothing    ; Map $63
dw .Nothing    ; Map $64
dw .Nothing    ; Map $65
dw .Nothing    ; Map $66
dw .Nothing    ; Map $67
dw .Nothing    ; Map $68
dw .Nothing    ; Map $69
dw .Nothing    ; Map $6A
dw .Nothing    ; Map $6B
dw .Nothing    ; Map $6C
dw .Nothing    ; Map $6D
dw .Nothing    ; Map $6E
dw .Nothing    ; Map $6F
dw .Map70      ; Map $70
dw .Nothing    ; Map $71
dw .Nothing    ; Map $72
dw .Nothing    ; Map $73
dw .Map74      ; Map $74
dw .Map75      ; Map $75
dw .Nothing    ; Map $76
dw .Nothing    ; Map $77
dw .Nothing    ; Map $78
dw .Nothing    ; Map $79
dw .Nothing    ; Map $7A
dw .Nothing    ; Map $7B
dw .Nothing    ; Map $7C
dw .Nothing    ; Map $7D
dw .Nothing    ; Map $7E
dw .Nothing    ; Map $7F
dw .Nothing    ; Map $80
dw .Nothing    ; Map $81
dw .Nothing    ; Map $82
dw .Map83      ; Map $83
dw .Nothing    ; Map $84
dw .Map85      ; Map $85
dw .Nothing    ; Map $86
dw .Nothing    ; Map $87
dw .Nothing    ; Map $88
dw .Nothing    ; Map $89
dw .Nothing    ; Map $8A
dw .Nothing    ; Map $8B
dw .Nothing    ; Map $8C
dw .Nothing    ; Map $8D
dw .Nothing    ; Map $8E
dw .Nothing    ; Map $8F
dw .Nothing    ; Map $90
dw .Nothing    ; Map $91
dw .Nothing    ; Map $92
dw .Nothing    ; Map $93
dw .Nothing    ; Map $94
dw .Nothing    ; Map $95
dw .Nothing    ; Map $96
dw .Nothing    ; Map $97
dw .Nothing    ; Map $98
dw .Nothing    ; Map $99
dw .Nothing    ; Map $9A
dw .Nothing    ; Map $9B
dw .Nothing    ; Map $9C
dw .Nothing    ; Map $9D
dw .Nothing    ; Map $9E
dw .Nothing    ; Map $9F
dw .Nothing    ; Map $A0
dw .Nothing    ; Map $A1
dw .MapA2      ; Map $A2
dw .Nothing    ; Map $A3
dw .MapA4      ; Map $A4
dw .Nothing    ; Map $A5
dw .MapA6      ; Map $A6
dw .MapA7      ; Map $A7
dw .Nothing    ; Map $A8
dw .MapA9      ; Map $A9
dw .Nothing    ; Map $AA
dw .Nothing    ; Map $AB
dw .Nothing    ; Map $AC
dw .Nothing    ; Map $AD
dw .Nothing    ; Map $AE
dw .Nothing    ; Map $AF
dw .Nothing    ; Map $B0
dw .MapB1      ; Map $B1
dw .Nothing    ; Map $B2
dw .Nothing    ; Map $B3
dw .Nothing    ; Map $B4
dw .MapB5      ; Map $B5
dw .Nothing    ; Map $B6
dw .Nothing    ; Map $B7
dw .Nothing    ; Map $B8
dw .MapB9      ; Map $B9
dw .Nothing    ; Map $BA
dw .MapBB      ; Map $BB
dw .Nothing    ; Map $BC
dw .Nothing    ; Map $BD
dw .MapBE      ; Map $BE
dw .Nothing    ; Map $BF
dw .Nothing    ; Map $C0
dw .Nothing    ; Map $C1
dw .Nothing    ; Map $C2
dw .Nothing    ; Map $C3
dw .Nothing    ; Map $C4
dw .Nothing    ; Map $C5
dw .Nothing    ; Map $C6
dw .Nothing    ; Map $C7
dw .Nothing    ; Map $C8
dw .Nothing    ; Map $C9
dw .Nothing    ; Map $CA
dw .Nothing    ; Map $CB
dw .Nothing    ; Map $CC
dw .Nothing    ; Map $CD
dw .Nothing    ; Map $CE
dw .Nothing    ; Map $CF
dw .Nothing    ; Map $D0
dw .MapD1      ; Map $D1
dw .Nothing    ; Map $D2
dw .Nothing    ; Map $D3
dw .MapD4      ; Map $D4
dw .Nothing    ; Map $D5
dw .MapD6      ; Map $D6
dw .Nothing    ; Map $D7
dw .Nothing    ; Map $D8
dw .MapD9      ; Map $D9
dw .Nothing    ; Map $DA
dw .Nothing    ; Map $DB
dw .Nothing    ; Map $DC
dw .Nothing    ; Map $DD
dw .Nothing    ; Map $DE
dw .Nothing    ; Map $DF
dw .Nothing    ; Map $E0
dw .Nothing    ; Map $E1
dw .Nothing    ; Map $E2
dw .Nothing    ; Map $E3
dw .Nothing    ; Map $E4
dw .Nothing    ; Map $E5
dw .Nothing    ; Map $E6
dw .Nothing    ; Map $E7
dw .Nothing    ; Map $E8
dw .MapE9      ; Map $E9
dw .Nothing    ; Map $EA
dw .Nothing    ; Map $EB
dw .Nothing    ; Map $EC
dw .Nothing    ; Map $ED
dw .Nothing    ; Map $EE
dw .Nothing    ; Map $EF
dw .Nothing    ; Map $F0
dw .Nothing    ; Map $F1
dw .Nothing    ; Map $F2
dw .Nothing    ; Map $F3
dw .Nothing    ; Map $F4
dw .Nothing    ; Map $F5
dw .Nothing    ; Map $F6
dw .Nothing    ; Map $F7
dw .Nothing    ; Map $F8
dw .Nothing    ; Map $F9
dw .Nothing    ; Map $FA
dw .Nothing    ; Map $FB
dw .Nothing    ; Map $FC
dw .Nothing    ; Map $FD
dw .Nothing    ; Map $FE
; No map $FF pointer.
}
;org $81AFA6
{
.Nothing:
db $ff
.Map0E:
db $04,$1A : dw !EDSpikeChestItem : db $01 : db $ff
.Map10:
db $07,$08 : dw !EDSmallRoomChestItem : db $02 : db $ff
.Map12:
db $11,$1E : dw !EDEndChestItem : db $03 : db $ff
.Map1D:
db $06,$06 : dw !IncaDiamondBlockChestItem : db $04 : db $ff
.Map21:
db $02,$17 : dw !IncaStatueChestItem : db $05 : db $ff
.Map26:
db $10,$1B : dw !IncaMazeChestItem : db $06
db $08,$1F : dw !IncaWormChestItem : db $07
db $ff
.Map2E:
db $25,$19 : dw $0038 : db $08 : db $ff
.Map3F:
db $38,$27 : dw !MineChestItem : db $09 : db $ff
.Map4D:
db $39,$31 : dw !SGNEStatueChestItem : db $0A
db $09,$33 : dw !SGNEWestChestItem : db $0B
db $34,$05 : dw !SGNENorthChestItem : db $0C
db $ff
.Map50:
db $37,$06 : dw !SGSEChestItem : db $0D : db $ff
.Map51:
db $03,$2F : dw !SGSWTopChestItem : db $0E : db $ff
.Map52:
db $07,$08 : dw !SGSWBotChestItem : db $0F : db $ff
.Map53:
db $35,$32 : dw !SGNWTopChestItem : db $10
db $31,$36 : dw !SGNWBotChestItem : db $11
db $ff
.Map5A:
db $37,$1A : dw !SeaPalSideChestItem : db $12 : db $ff
.Map5B:
db $07,$07 : dw !SeaPalTopChestItem : db $13 : db $ff
.Map5C:
db $09,$17 : dw !SeaPalBotChestItem : db $14 : db $ff
.Map5F:
db $20,$19 : dw !MuRamaChestNItem : db $15
db $2F,$27 : dw !MuHopeRoomChestItem : db $16
db $ff
.Map60:
db $1E,$18 : dw !MuEmptyChest1Item : db $2E
db $2D,$1C : dw !MuRamaChestEItem : db $17
db $ff
.Map61:
db $0A,$33 : dw !MuEmptyChest2Item : db $18 : db $ff
.Map70:
db $07,$28 : dw !AnglSliderChestItem : db $19 : db $ff
.Map74:
db $27,$08 : dw !AnglIshtarWinChestItem : db $1A : db $ff
.Map75:
db $47,$08 : dw !AnglPuzzleChest1Item : db $1B
db $57,$08 : dw !AnglPuzzleChest2Item : db $1C
db $ff
}
warnpc $81B086

org $81c3c4    ; Due to new 2-byte chest IDs, some chests are moved to this freespace block.
{
Lut_Chests_Map83:
db $1A,$59 : dw !GtWlChest1Item : db $1D : db $ff
Lut_Chests_Map85:
db $05,$1A : dw !GtWlChest2Item : db $1E : db $ff
Lut_Chests_MapA2:
db $18,$36 : dw !KressChest1Item : db $1F : db $ff
Lut_Chests_MapA4:
db $12,$0B : dw !KressChest2Item : db $20 : db $ff
Lut_Chests_MapA6:
db $05,$08 : dw !KressChest3Item : db $21 : db $ff
Lut_Chests_MapA7:
db $22,$10 : dw !KressChest4Item : db $22 : db $ff
Lut_Chests_MapA9:
db $0E,$05 : dw !KressChest5Item : db $23 : db $ff
Lut_Chests_MapB1:
db $67,$05 : dw !WatChest1Item : db $24 : db $ff
Lut_Chests_MapB5:
db $07,$4E : dw !WatChest2Item : db $25 : db $ff
Lut_Chests_MapB9:
db $07,$06 : dw !WatChest3Item : db $26 : db $ff
Lut_Chests_MapBB:
db $11,$20 : dw !WatChest4Item : db $27 : db $ff
Lut_Chests_MapBE:
db $05,$16 : dw !WatChest5Item : db $28 : db $ff
Lut_Chests_MapD1:
db $37,$59 : dw !PyramidRoom2ChestItem : db $29 : db $ff
Lut_Chests_MapD4:
db $46,$49 : dw !PyramidRoom5ChestItem : db $2A : db $ff
Lut_Chests_MapD6:
db $47,$09 : dw !PyramidRoom3ChestItem : db $2B : db $ff
Lut_Chests_MapD9:
db $75,$29 : dw !PyramidRoom4ChestItem : db $2C : db $ff
Lut_Chests_MapE9:
db $37,$16 : dw !MansionChestItem : db $2D : db $ff
}
warnpc $81c455


org $81CBA6
if !OptionMuteMusic == 1
Table_MusicAddresses:   ; Some callers (e.g. COP) use 1-indexed, some use 0.
{
dl $DF2A1D    ; City
dl $DF2A1D    ; City (dupe)
dl $DF2A1D    ; Village
dl $DF2A1D    ; "Ominous Whispers"
dl $DF2A1D    ; Castle
dl $DF2A1D    ; Dungeon
dl $DF2A1D    ; Inca
dl $DF2A1D    ; Sky Garden
dl $DF2A1D    ; Mu
dl $DF2A1D    ; Great Wall
dl $DF2A1D    ; Angkor Wat
dl $DF2A1D    ; Pyramid
dl $DF2A1D    ; City (dupe)
dl $DF2A1D    ; Space flight chorus
dl $DF2A1D    ; Boss music
dl $DF2A1D    ; Comet
dl $DF2A1D    ; Dream / Angkor Wat spirit cutscene
dl $DF2A1D    ; World map / Main menu
dl $DF2A1D    ; Credits, end ("Rebirth")
dl $DF2A1D    ; Credits, title theme remix
dl $DF2A1D    ; Raft / Lance+Lily cutscene
dl $DF2A1D    ; Dark Space
dl $DF2A1D    ; City (dupe)
dl $DD57FC    ; Item fanfare
dl $DE6C12    ; Lola's Melody
dl $DE6B33    ; Inca Melody
dl $DF2A1D    ; Silence
dl $DF2A1D    ; South Cape (i.e. City with pelicans)
dl $DF2BCB    ; Ishtar's waterfall
dl $DE2A6E    ; Memory Melody
}
endif
warnpc $81cc00


org $81da4c
table "table_invtext.txt",rtl
db "RANDO CODE: ","!RandoTitleScreenHashString"
table "table_dialogue.txt",rtl


org $81dabf
table "table_invtext.txt",rtl
Text_ItemNamesCond:
.Pointers:
{
dw .Null             ; $DB3F
dw .RedJewel         ; $DB40
dw .PrisonKey        ; $DB4B
dw .IncaStatueA      ; $DB51
dw .IncaStatueB      ; $DB5C
dw .IncaMelody       ; $DB68
dw .Herb             ; $DB78
dw .DiamondBlock     ; $DB81
dw .WindMelody       ; $DB8C
dw .LolasMelody      ; $DB9B
dw .Meat             ; $DBAC
dw .MineKeyA         ; $DBB2
dw .MineKeyB         ; $DBBD
dw .MemoryMelody     ; $DBC8
dw .CrystalBall      ; $DBD8
dw .MineElevatorKey  ; $DBE7
dw .MuPalaceKey      ; $DBF8 = Item $10
dw .PurifyStone      ; $DC05
dw .HopeStatue       ; $DC14
dw .RamaStatue       ; $DC20
dw .MagicPowder      ; $DC2E
dw .BlueJournal      ; $DC3B
dw .LancesLetter     ; $DC4A
dw .Necklace         ; $DC5C
dw .RussianGlassWill ; $DC6E
dw .Teapot           ; $DC73
dw .MushroomDrops    ; $DC7C
dw .BagOfGold        ; $DC8C
dw .BlackGlasses     ; $DC9A
dw .GorgonFlower     ; $DCAC
dw .Hieroglyph1E     ; $DCBD
dw .Hieroglyph1F     ; $DCC8
dw .Hieroglyph20     ; $DCD3 = Item $20
dw .Hieroglyph21     ; $DCDE
dw .Hieroglyph22     ; $DCE9
dw .Hieroglyph23     ; $DCF4
dw .Aura             ; $DCFF
dw .LolasLetter      ; $DD06
dw .FathersJournal   ; $DD17
dw .CrystalRing      ; $DD2B
dw .Apple            ; $DD3A
dw .HpItem           ; $DD47
dw .DefItem          ; $DD53
dw .StrItem          ; $DD60
dw .LightJewel       ; $DD6D
dw .DarkJewel        ; $DD7C
dw .TwoRedJewels     ; $DD8A
dw .ThreeRedJewels   ; $DD9A
dw .Blank1           ; $DDAC = Item $30
dw .Blank1           ; $DDAC
dw .Blank1           ; $DDAC
dw .Blank1           ; $DDAC
dw .Blank2           ; $DDAA
dw .Blank3           ; $DDB3
dw .Blank4           ; $DDBC
dw .Blank5           ; $DDC5
dw .MysticStatue1    ; $DDCE
dw .MysticStatue2    ; $DDD8
dw .MysticStatue3    ; $DDE2
dw .MysticStatue4    ; $DDEC
dw .MysticStatue5    ; $DDF6
dw .MysticStatue6    ; $DE00
dw .MysticStatue7    ; $DE0A
dw .MysticStatue8    ; $DE14 = Item $3f
}
{
.Null:
db $00
.RedJewel:
db $52,$65,$64,$40,$4A,$65,$77,$65,$6C,$40,$00
.PrisonKey:
db $10,$06,$4B,$65,$79,$00
.IncaStatueA:
db $49,$6E,$63,$61,$6E,$11,$40,$10,$0C,$41,$00
.IncaStatueB:
db $49,$6E,$63,$61,$6E,$11,$40,$10,$0C,$42,$40,$00
.IncaMelody:
db $49,$6E,$63,$61,$6E,$40,$11,$40,$4D,$65,$6C,$6F,$64,$79,$40,$00
.Herb:
db $48,$65,$72,$62,$40,$40,$40,$40,$00
.DiamondBlock:
db $42,$6C,$75,$65,$40,$42,$6C,$6F,$63,$6B,$00
.WindMelody:
db $57,$69,$6E,$64,$40,$11,$40,$4D,$65,$6C,$6F,$64,$79,$40,$00
.LolasMelody:
db $4C,$6F,$6C,$61,$5C,$73,$40,$11,$40,$4D,$65,$6C,$6F,$64,$79,$40,$00
.Meat:
db $4D,$65,$61,$74,$40,$00
.MineKeyA:
db $4D,$69,$6E,$65,$40,$4B,$65,$79,$40,$41,$00
.MineKeyB:
db $4D,$69,$6E,$65,$40,$4B,$65,$79,$40,$42,$00
.MemoryMelody:
db $4D,$65,$6D,$6F,$72,$79,$40,$11,$40,$4D,$65,$6C,$6F,$64,$79,$00
.CrystalBall:
db $43,$72,$79,$73,$74,$61,$6C,$40,$11,$40,$42,$61,$6C,$6C,$00
.MineElevatorKey:
db $45,$6C,$65,$76,$61,$74,$6F,$72,$40,$11,$40,$4B,$65,$79,$40,$40,$00
.MuPalaceKey:
db $50,$61,$6C,$61,$63,$65,$40,$11,$40,$4B,$65,$79,$00
.PurifyStone:
db $50,$75,$72,$69,$66,$79,$40,$11,$40,$53,$74,$6F,$6E,$65,$00
.HopeStatue:
db $10,$0C,$6F,$66,$11,$40,$48,$6F,$70,$65,$40,$00
.RamaStatue:
db $52,$61,$6D,$61,$40,$11,$40,$53,$74,$61,$74,$75,$65,$00
.MagicPowder:
db $4D,$61,$67,$69,$63,$40,$11,$40,$44,$75,$73,$74,$00
.BlueJournal:
db $42,$6C,$75,$65,$40,$11,$40,$4A,$6F,$75,$72,$6E,$61,$6C,$00
.LancesLetter:
db $4C,$61,$6E,$63,$65,$5C,$73,$40,$11,$40,$40,$4C,$65,$74,$74,$65,$72,$00
.Necklace:
db $4E,$65,$63,$6B,$6C,$61,$63,$65,$40,$11,$40,$53,$74,$6F,$6E,$65,$73,$00
.RussianGlassWill:
db $57,$69,$6C,$6C,$00
.Teapot:
db $54,$65,$61,$70,$6F,$74,$40,$40,$00
.MushroomDrops:
db $4D,$75,$73,$68,$72,$6F,$6F,$6D,$40,$11,$40,$44,$72,$6F,$70,$00
.BagOfGold:
db $42,$61,$67,$40,$6F,$66,$40,$11,$40,$47,$6F,$6C,$64,$00
.BlackGlasses:
db $42,$6C,$61,$63,$6B,$40,$11,$40,$47,$6C,$61,$73,$73,$65,$73,$40,$40,$00
.GorgonFlower:
db $47,$6F,$72,$67,$6F,$6E,$40,$11,$40,$46,$6C,$6F,$77,$65,$72,$40,$00
.Hieroglyph1E:
db $48,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$00
.Hieroglyph1F:
db $48,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$00
.Hieroglyph20:
db $48,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$00
.Hieroglyph21:
db $48,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$00
.Hieroglyph22:
db $48,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$00
.Hieroglyph23:
db $48,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$00
.Aura:
db $41,$75,$72,$61,$40,$40,$00
.LolasLetter:
db $4C,$6F,$6C,$61,$5C,$73,$40,$11,$40,$4C,$65,$74,$74,$65,$72,$40,$00
.FathersJournal:
db $46,$61,$74,$68,$65,$72,$5C,$73,$40,$11,$40,$4A,$6F,$75,$72,$6E,$61,$6C,$40,$00
.CrystalRing:
db $43,$72,$79,$73,$74,$61,$6C,$40,$11,$40,$52,$69,$6E,$67,$00
.Apple:
db $52,$65,$64,$40,$11,$40,$41,$70,$70,$6C,$65,$40,$00
.HpItem:
db $48,$50,$40,$11,$40,$4A,$65,$77,$65,$6C,$40,$00
.DefItem:
db $44,$45,$46,$40,$11,$40,$4A,$65,$77,$65,$6C,$40,$00
.StrItem:
db $53,$54,$52,$40,$11,$40,$4A,$65,$77,$65,$6C,$40,$00
.LightJewel:
db $4C,$69,$67,$68,$74,$40,$11,$40,$4A,$65,$77,$65,$6C,$40,$00
.DarkJewel:
db $44,$61,$72,$6B,$40,$11,$40,$4A,$65,$77,$65,$6C,$40,$00
.TwoRedJewels:
db $32,$40,$52,$65,$64,$40,$11,$40,$4A,$65,$77,$65,$6C,$73,$40,$00
.ThreeRedJewels:
db $33,$40,$52,$65,$64,$40,$11,$40,$4A,$65,$77,$65,$6C,$73,$40,$00
.Blank1:
db $73,$40,$00
.Blank2:
db $40,$40,$40,$40,$40,$00
.Blank3:
db $40,$40,$40,$40,$40,$40,$40,$40,$00
.Blank4:
db $40,$40,$40,$40,$40,$40,$40,$40,$00
.Blank5:
db $40,$40,$40,$40,$40,$40,$40,$40,$00
.MysticStatue1:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue2:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue3:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue4:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue5:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue6:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue7:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
.MysticStatue8:
db $4D,$79,$73,$74,$69,$63,$40,$10,$0C,$00
}
warnpc $81de1e


org $81de1e
table "table_invtext.txt",rtl
Text_ItemNamesInv:
.Pointers:
{
dw .Null            
dw .RedJewel        
dw .PrisonKey       
dw .IncaStatueA     
dw .IncaStatueB     
dw .IncaMelody      
dw .Herb            
dw .DiamondBlock    
dw .WindMelody      
dw .LolasMelody     
dw .Meat            
dw .MineKeyA        
dw .MineKeyB        
dw .MemoryMelody    
dw .CrystalBall     
dw .MineElevatorKey 
dw .MuPalaceKey     
dw .PurifyStone     
dw .HopeStatue      
dw .RamaStatue      
dw .MagicPowder     
dw .BlueJournal     
dw .LancesLetter    
dw .Necklace        
dw .RussianGlassWill
dw .Teapot          
dw .MushroomDrops   
dw .BagOfGold       
dw .BlackGlasses    
dw .GorgonFlower    
dw .Hieroglyph1E    
dw .Hieroglyph1F    
dw .Hieroglyph20    
dw .Hieroglyph21    
dw .Hieroglyph22    
dw .Hieroglyph23    
dw .Aura            
dw .LolasLetter     
dw .FathersJournal  
dw .CrystalRing     
dw .Apple           
dw .Blank29         
dw .Blank2a         
dw .Blank2b         
dw .Blank2c         
dw .Blank2d         
dw .TwoRedJewels
dw .ThreeRedJewels
dw .Blank30         
dw .Blank31         
dw .Blank32         
dw .Blank33         
dw .Blank34         
dw .Blank35         
dw .Blank36         
dw .Blank37         
dw .MysticStatue1   
dw .MysticStatue2   
dw .MysticStatue3   
dw .MysticStatue4   
dw .MysticStatue5   
dw .MysticStatue6   
dw .MysticStatue7   
dw .MysticStatue8   
}
{
.Null:
.Blank29:
.Blank2a:
.Blank2b:
.Blank2c:
.Blank2d:
.Blank30:
.Blank31:
.Blank32:
.Blank33:
.Blank34:
.Blank35:
.Blank36:
.Blank37:
db $00
.RedJewel:
db $52,$65,$64,$40,$4a,$65,$77,$65,$6c,$40,$00
.PrisonKey:
db $10,$06,$4b,$65,$79,$00
.IncaStatueA:
db $10,$04,$10,$0c,$41,$00
.IncaStatueB:
db $10,$04,$10,$0c,$42,$00
.IncaMelody:
db $10,$04,$4d,$65,$6c,$6f,$64,$79,$00
.Herb:
db $48,$65,$72,$62,$40,$40,$40,$40,$00
.DiamondBlock:
db $42,$6c,$75,$65,$40,$42,$6c,$6f,$63,$6b,$00
.WindMelody:
db $57,$69,$6e,$64,$40,$4d,$65,$6c,$6f,$64,$79,$40,$00
.LolasMelody:
db $4c,$6f,$6c,$61,$5c,$73,$40,$4d,$65,$6c,$6f,$64,$79,$40,$00
.Meat:
db $4d,$65,$61,$74,$40,$00
.MineKeyA:
db $4d,$69,$6e,$65,$40,$4b,$65,$79,$40,$41,$00
.MineKeyB:
db $4d,$69,$6e,$65,$40,$4b,$65,$79,$40,$42,$00
.MemoryMelody:
db $4d,$65,$6d,$6f,$72,$79,$40,$4d,$65,$6c,$6f,$64,$79,$00
.CrystalBall:
db $43,$72,$79,$73,$74,$61,$6c,$40,$42,$61,$6c,$6c,$00
.MineElevatorKey:
db $45,$6c,$65,$76,$61,$74,$6f,$72,$40,$4b,$65,$79,$40,$40,$00
.MuPalaceKey:
db $50,$61,$6c,$61,$63,$65,$40,$4b,$65,$79,$00
.PurifyStone:
db $50,$75,$72,$69,$66,$79,$40,$53,$74,$6f,$6e,$65,$00
.HopeStatue:
db $10,$0c,$6f,$66,$40,$48,$6f,$70,$65,$00
.RamaStatue:
db $52,$61,$6d,$61,$40,$53,$74,$61,$74,$75,$65,$00
.MagicPowder:
db $4d,$61,$67,$69,$63,$40,$44,$75,$73,$74,$00
.BlueJournal:
db $42,$6c,$75,$65,$40,$4a,$6f,$75,$72,$6e,$61,$6c,$00
.LancesLetter:
db $4c,$61,$6e,$63,$65,$5c,$73,$40,$6c,$65,$74,$74,$65,$72,$40,$40,$00
.Necklace:
db $4e,$65,$63,$6b,$6c,$61,$63,$65,$40,$53,$74,$6f,$6e,$65,$73,$00
.RussianGlassWill:
db $57,$69,$6c,$6c,$00
.Teapot:
db $54,$65,$61,$70,$6f,$74,$40,$40,$00
.MushroomDrops:
db $4d,$75,$73,$68,$72,$6f,$6f,$6d,$40,$44,$72,$6f,$70,$00
.BagOfGold:
db $42,$61,$67,$40,$6f,$66,$40,$47,$6f,$6c,$64,$00
.BlackGlasses:
db $42,$6c,$61,$63,$6b,$40,$47,$6c,$61,$73,$73,$65,$73,$40,$40,$00
.GorgonFlower:
db $47,$6f,$72,$67,$6f,$6e,$40,$46,$6c,$6f,$77,$65,$72,$40,$00
.Hieroglyph1E:
db $48,$69,$65,$72,$6f,$67,$6c,$79,$70,$68,$00
.Hieroglyph1F:
db $48,$69,$65,$72,$6f,$67,$6c,$79,$70,$68,$00
.Hieroglyph20:
db $48,$69,$65,$72,$6f,$67,$6c,$79,$70,$68,$00
.Hieroglyph21:
db $48,$69,$65,$72,$6f,$67,$6c,$79,$70,$68,$00
.Hieroglyph22:
db $48,$69,$65,$72,$6f,$67,$6c,$79,$70,$68,$00
.Hieroglyph23:
db $48,$69,$65,$72,$6f,$67,$6c,$79,$70,$68,$00
.Aura:
db $41,$75,$72,$61,$40,$40,$00
.LolasLetter:
db $4c,$6f,$6c,$61,$5c,$73,$40,$4c,$65,$74,$74,$65,$72,$40,$00
.FathersJournal:
db $46,$61,$74,$68,$65,$72,$5c,$73,$40,$4a,$6f,$75,$72,$6e,$61,$6c,$40,$00
.CrystalRing:
db $43,$72,$79,$73,$74,$61,$6c,$40,$52,$69,$6e,$67,$00
.Apple:
db $52,$65,$64,$40,$41,$70,$70,$6c,$65,$40,$00
.TwoRedJewels:
db "Two Red Jewels",$00
.ThreeRedJewels:
db "Three Red Jewels",$00
.MysticStatue1:
.MysticStatue2:
.MysticStatue3:
.MysticStatue4:
.MysticStatue5:
.MysticStatue6:
.MysticStatue7:
.MysticStatue8:
db $10,$05,$44,$6f,$6c,$6c,$00
}
warnpc $81e12a


org $81e12a
Lut_ItemDroppableFlags:    ; or "not-droppable" perhaps I should have written
db %10011111 ;$9f
db %11111111 ;$ff
if !Statue3Required == 1 || !SettingStatuesPlayerChoice == 1
db %10011111 ;$9f
else
db %10010111;$97
endif
if !Statue5Required == 1 || !SettingStatuesPlayerChoice == 1
db %11111111 ;$ff
db %11111111 ;$ff
else
db %00111111 ;$3f
db %10110000 ;$b0
endif
db %11000001 ;$01
db $00
db $00


org $81e132
table "table_invtext.txt",rtl
Text_ItemDescriptions:
.Pointers:
{
dw .Null             ; $E192
dw .RedJewel         ; $E19A
dw .PrisonKey        ; $E1B4
dw .IncaStatueA      ; $E1CA
dw .IncaStatueB      ; $E1CA
dw .IncaMelody       ; $E199
dw .Herb             ; $E1E3
dw .DiamondBlock     ; $E1F0
dw .WindMelody       ; $E208
dw .LolasMelody      ; $E227
dw .Meat             ; $E248
dw .MineKeyA         ; $E260
dw .MineKeyB         ; $E260
dw .MemoryMelody     ; $E277
dw .CrystalBall      ; $E282
dw .MineElevatorKey  ; $E29B
dw .MuPalaceKey      ; $E2B1
dw .PurifyStone      ; $E2C4
dw .HopeStatue       ; $E2E2
dw .RamaStatue       ; $E304
dw .MagicPowder      ; $E326
dw .BlueJournal      ; $E351
dw .LancesLetter     ; $E36A
dw .Necklace         ; $E37C
dw .RussianGlassWill ; $E39C
dw .Teapot           ; $E3C3
dw .MushroomDrops    ; $E3EF
dw .BagOfGold        ; $E199
dw .BlackGlasses     ; $E40F
dw .GorgonFlower     ; $E43B
dw .Hieroglyph1E     ; $E456
dw .Hieroglyph1F     ; $E456
dw .Hieroglyph20     ; $E456
dw .Hieroglyph21     ; $E456
dw .Hieroglyph22     ; $E456
dw .Hieroglyph23     ; $E456
dw .Aura             ; $E46A
dw .LolasLetter      ; $E492
dw .FathersJournal   ; $E4AE
dw .CrystalRing      ; $E4DA
dw .Apple            ; $E500
dw .HpItem           ; $E51C
dw .DefItem          ; $E51C
dw .StrItem          ; $E51C
dw .LightJewel       ; $E535
dw .DarkJewel        ; $E54C
dw .TwoRedJewels     ; $E562
dw .ThreeRedJewels   ; $E562
}
{
.Null:
db $4E,$6F,$74,$68,$69,$6E,$67
.BagOfGold:
.IncaMelody:
db $00
.RedJewel:
db $0D,$54,$72,$61,$64,$65,$40,$66,$6F,$72,$40,$67,$6F,$6F,$64,$73,$0D,$69,$6E,$40,$74,$6F,$77,$6E,$20,$00
.PrisonKey:
db $0D,$45,$64,$77,$61,$72,$64,$40,$43,$61,$73,$74,$6C,$65,$0D,$10,$06,$4B,$65,$79,$20,$00
.IncaStatueA:
.IncaStatueB:
db $0D,$10,$0C,$73,$68,$61,$70,$65,$64,$0D,$6C,$69,$6B,$65,$40,$61,$40,$73,$70,$69,$72,$69,$74,$20,$00
.Herb:
db $0D,$10,$09,$73,$74,$72,$65,$6E,$67,$74,$68,$20,$00
.DiamondBlock:
db $0D,$44,$69,$61,$6D,$6F,$6E,$64,$2E,$73,$68,$61,$70,$65,$64,$40,$0D,$62,$6C,$6F,$63,$6B,$20,$00
.WindMelody:
db $0D,$4D,$65,$6C,$6F,$64,$79,$40,$70,$6C,$61,$79,$65,$64,$40,$62,$79,$40,$0D,$49,$6E,$63,$61,$6E,$40,$57,$69,$6E,$64,$20,$00
.LolasMelody:
db $0D,$41,$6C,$6C,$6F,$77,$73,$40,$61,$63,$63,$65,$73,$73,$40,$74,$6F,$0D,$49,$74,$6F,$72,$79,$40,$56,$69,$6C,$6C,$61,$67,$65,$20,$00
.Meat:
db $0D,$46,$65,$65,$64,$73,$40,$61,$0D,$68,$75,$6E,$67,$72,$79,$40,$70,$65,$72,$73,$6F,$6E,$20,$00
.MineKeyA:
.MineKeyB:
db $0D,$55,$73,$65,$40,$69,$6E,$40,$74,$68,$65,$40,$6D,$69,$6E,$65,$20,$0D,$44,$75,$68,$20,$00
.MemoryMelody:
db $0D,$10,$09,$4D,$65,$6D,$6F,$72,$79,$20,$00
.CrystalBall:
db $0D,$46,$69,$74,$73,$40,$69,$6E,$74,$6F,$0D,$43,$72,$79,$73,$74,$61,$6C,$40,$54,$69,$6C,$65,$20,$00
.MineElevatorKey:
db $0D,$10,$01,$4D,$69,$6E,$65,$0D,$45,$6C,$65,$76,$61,$74,$6F,$72,$40,$4B,$65,$79,$20,$00
.MuPalaceKey:
db $0D,$4B,$65,$79,$40,$74,$6F,$0D,$4D,$75,$40,$74,$75,$6E,$6E,$65,$6C,$20,$00
.PurifyStone:
db $0D,$50,$75,$72,$69,$66,$69,$65,$73,$40,$66,$6F,$75,$6E,$74,$61,$69,$6E,$0D,$69,$6E,$40,$70,$61,$6C,$61,$63,$65,$20,$00
.HopeStatue:
db $0D,$10,$0C,$63,$6F,$6E,$74,$61,$69,$6E,$69,$6E,$67,$0D,$68,$6F,$70,$65,$73,$40,$6F,$66,$0D,$4D,$75,$40,$70,$65,$6F,$70,$6C,$65,$20,$00
.RamaStatue:
db $0D,$10,$0C,$77,$68,$69,$63,$68,$0D,$62,$72,$65,$61,$6B,$73,$40,$74,$68,$65,$40,$73,$65,$61,$6C,$0D,$6F,$66,$40,$52,$61,$6D,$61,$20,$00
.MagicPowder:
db $0D,$4D,$61,$67,$69,$63,$40,$70,$6F,$77,$64,$65,$72,$20,$0D,$52,$65,$6C,$65,$61,$73,$65,$73,$40,$70,$65,$72,$73,$6F,$6E,$0D,$10,$0E,$70,$61,$69,$6E,$74,$69,$6E,$67,$20,$00
.BlueJournal:
db $0D,$4C,$65,$61,$72,$6E,$40,$74,$6F,$40,$70,$6C,$61,$79,$0D,$74,$68,$65,$40,$67,$61,$6D,$65,$20,$00
.LancesLetter:
db $0D,$4C,$65,$74,$74,$65,$72,$40,$10,$0E,$0D,$4C,$61,$6E,$63,$65,$20,$00
.Necklace:
db $0D,$4E,$65,$63,$6B,$6C,$61,$63,$65,$40,$4C,$61,$6E,$63,$65,$0D,$6D,$61,$64,$65,$40,$66,$6F,$72,$40,$4C,$69,$6C,$6C,$79,$20,$00
.RussianGlassWill:
db $0D,$57,$69,$6C,$6C,$40,$67,$69,$76,$65,$6E,$40,$74,$6F,$0D,$52,$75,$73,$73,$69,$61,$6E,$40,$47,$6C,$61,$73,$73,$0D,$4F,$70,$70,$6F,$6E,$65,$6E,$74,$20,$00
.Teapot:
db $0D,$4A,$61,$72,$40,$66,$69,$6C,$6C,$65,$64,$0D,$77,$69,$74,$68,$40,$74,$65,$61,$72,$73,$40,$66,$6F,$72,$0D,$68,$65,$61,$6C,$69,$6E,$67,$40,$73,$70,$69,$72,$69,$74,$73,$20,$00
.MushroomDrops:
db $0D,$47,$72,$6F,$77,$73,$40,$70,$6C,$61,$6E,$74,$73,$0D,$10,$0E,$65,$6E,$64,$73,$40,$6F,$66,$0D,$73,$74,$61,$6C,$6B,$73,$20,$00
.BlackGlasses:
db $0D,$42,$6C,$61,$63,$6B,$40,$67,$6C,$61,$73,$73,$65,$73,$20,$0D,$50,$72,$6F,$74,$65,$63,$74,$73,$40,$66,$72,$6F,$6D,$0D,$62,$72,$69,$67,$68,$74,$40,$6C,$69,$67,$68,$74,$20,$00
.GorgonFlower:
db $0D,$10,$09,$74,$68,$69,$6E,$67,$73,$0D,$74,$75,$72,$6E,$65,$64,$40,$74,$6F,$40,$73,$74,$6F,$6E,$65,$20,$00
.Hieroglyph1E:
.Hieroglyph1F:
.Hieroglyph20:
.Hieroglyph21:
.Hieroglyph22:
.Hieroglyph23:
db $0D,$10,$07,$77,$69,$74,$68,$0D,$68,$69,$65,$72,$6F,$67,$6C,$79,$70,$68,$20,$00
.Aura:
db $0D,$10,$02,$4B,$6E,$69,$67,$68,$74,$0D,$53,$68,$61,$64,$6F,$77,$5C,$73,$40,$42,$6F,$64,$79,$0D,$74,$75,$72,$6E,$73,$40,$74,$6F,$40,$77,$61,$74,$65,$72,$20,$00
.LolasLetter:
db $0D,$4C,$65,$74,$74,$65,$72,$40,$66,$72,$6F,$6D,$0D,$4C,$6F,$6C,$61,$40,$61,$6E,$64,$40,$42,$69,$6C,$6C,$20,$00
.FathersJournal:
db $0D,$57,$69,$6C,$6C,$5C,$73,$40,$66,$61,$74,$68,$65,$72,$5C,$73,$0D,$6A,$6F,$75,$72,$6E,$61,$6C,$20,$40,$49,$6E,$66,$6F,$40,$6F,$6E,$40,$0D,$50,$79,$72,$61,$6D,$69,$64,$20,$00
.CrystalRing:
db $0D,$49,$66,$40,$79,$6F,$75,$40,$6C,$69,$6B,$65,$40,$69,$74,$20,$20,$20,$0D,$59,$6F,$75,$40,$6B,$6E,$6F,$77,$40,$74,$68,$65,$40,$72,$65,$73,$74,$20,$00
.Apple:
db $0D,$49,$72,$6F,$6E,$69,$63,$61,$6C,$6C,$79,$40,$6E,$6F,$74,$40,$66,$6F,$72,$0D,$65,$61,$74,$69,$6E,$67,$20,$00
.HpItem:
.DefItem:
.StrItem:
db $0D,$55,$73,$65,$40,$66,$6F,$72,$40,$61,$0D,$73,$74,$61,$74,$40,$75,$70,$67,$72,$61,$64,$65,$20,$00
.LightJewel:
db $0D,$49,$6D,$70,$72,$6F,$76,$65,$73,$0D,$50,$73,$79,$63,$68,$6F,$40,$44,$61,$73,$68,$20,$00
.DarkJewel:
db $0D,$49,$6D,$70,$72,$6F,$76,$65,$73,$0D,$44,$61,$72,$6B,$40,$46,$72,$69,$61,$72,$20,$00
.TwoRedJewels:
.ThreeRedJewels:
db $0D,$53,$65,$6E,$64,$73,$40,$52,$65,$64,$40,$4A,$65,$77,$65,$6C,$73,$0D,$74,$6F,$40,$4A,$65,$77,$65,$6C,$65,$72,$20,$00
db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 
}
warnpc $81e5ec


; I don't think we use this table anymore.
org $81fd24
table "table_dialogue.txt",rtl
Bg3_ItemGetText:
.Pointers:
{
dw .Null             ; $FDA4
dw .RedJewel         ; $FDA7
dw .PrisonKey        ; $FDB1
dw .IncaStatueA      ; $FDBC
dw .IncaStatueB      ; $FDBC
dw .IncaMelody       ; $FDA4
dw .Herb             ; $FDC1
dw .DiamondBlock     ; $FDC6
dw .WindMelody       ; $FDCE
dw .LolasMelody      ; $FDD3
dw .Meat             ; $FDD8
dw .MineKeyA         ; $FDE4
dw .MineKeyB         ; $FDE4
dw .MemoryMelody     ; $FDED
dw .CrystalBall      ; $FDF2
dw .MineElevatorKey  ; $FDF9
dw .MuPalaceKey      ; $FE03
dw .PurifyStone      ; $FE0C
dw .HopeStatue       ; $FE11
dw .RamaStatue       ; $FE19
dw .MagicPowder      ; $FE21
dw .BlueJournal      ; $FDA5
dw .LancesLetter     ; $FE2C
dw .Necklace         ; $FE37
dw .RussianGlassWill ; $FE40
dw .Teapot           ; $FE45
dw .MushroomDrops    ; $FE4C
dw .BagOfGold        ; $FDA5
dw .BlackGlasses     ; $FE5B
dw .GorgonFlower     ; $FE65
dw .Hieroglyph1E     ; $FE6F
dw .Hieroglyph1F     ; $FE6F
dw .Hieroglyph20     ; $FE6F
dw .Hieroglyph21     ; $FE6F
dw .Hieroglyph22     ; $FE6F
dw .Hieroglyph23     ; $FE6F
dw .Aura             ; $FE72
dw .LolasLetter      ; $FE75
dw .FathersJournal   ; $FE7A
dw .CrystalRing      ; $FE86
dw .Apple            ; $FE8D
dw .HpItem           ; $FE93
dw .DefItem          ; $FE96
dw .StrItem          ; $FE9A
dw .LightJewel       ; $FE9E
dw .DarkJewel        ; $FEAA
dw .TwoRedJewels     ; $FEB2
dw .ThreeRedJewels   ; $FEB2
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
}
;org $81fda4
{
.Null:
.IncaMelody:
.BlueJournal:
.BagOfGold:
db $AC,$AC,$CA
.RedJewel:
db $62,$84,$83,$AC,$49,$84,$A7,$84,$8B,$CA
.PrisonKey:
db $60,$A2,$88,$A3,$8E,$8D,$AC,$4A,$84,$A9,$CA
.IncaStatueA:
.IncaStatueB:
db $D6,$1E,$D6,$48,$CA
.Herb:
db $47,$84,$A2,$81,$CA
.DiamondBlock:
db $D6,$0E,$41,$8B,$8E,$82,$8A,$CA
.WindMelody:
db $D7,$3D,$D6,$34,$CA
.LolasMelody:
db $D6,$2D,$D6,$34,$CA
.Meat:
db $4B,$80,$A2,$86,$84,$AC,$62,$8E,$80,$A3,$A4,$CA
.MineKeyA:
.MineKeyB:
db $4C,$88,$8D,$84,$AC,$4A,$84,$A9,$CA
.MemoryMelody:
db $D7,$1D,$D6,$34,$CA
.CrystalBall:
db $D6,$07,$41,$80,$8B,$8B,$CA
.MineElevatorKey:
db $64,$87,$84,$AC,$D7,$5E,$8A,$84,$A9,$CA
.MuPalaceKey:
db $4C,$A5,$AC,$D7,$93,$8A,$84,$A9,$CA
.PurifyStone:
db $D6,$40,$D7,$9D,$CA
.HopeStatue:
db $47,$8E,$A0,$84,$AC,$D6,$48,$CA
.RamaStatue:
db $62,$80,$8C,$80,$AC,$D6,$48,$CA
.MagicPowder:
db $4C,$80,$86,$88,$82,$AC,$43,$A5,$A3,$A4,$CA
.LancesLetter:
db $4B,$80,$8D,$82,$84,$0E,$A3,$AC,$D7,$7F,$CA
.Necklace:
db $4D,$84,$82,$8A,$8B,$80,$82,$84,$CA
.RussianGlassWill:
db $67,$88,$8B,$8B,$CA
.Teapot:
db $64,$84,$80,$A0,$8E,$A4,$CA
.MushroomDrops:
db $4C,$A5,$A3,$87,$A2,$8E,$8E,$8C,$AC,$43,$A2,$8E,$A0,$A3,$CA
.BlackGlasses:
db $D6,$05,$46,$8B,$80,$A3,$A3,$84,$A3,$CA
.GorgonFlower:
db $46,$8E,$A2,$86,$8E,$8D,$AC,$D7,$68,$CA
.Hieroglyph1E:
.Hieroglyph1F:
.Hieroglyph20:
.Hieroglyph21:
.Hieroglyph22:
.Hieroglyph23:
db $D6,$1B,$CA
.Aura:
db $D6,$03,$CA
.LolasLetter:
db $D6,$2D,$D7,$7F,$CA
.FathersJournal:
db $D6,$68,$D6,$92,$89,$8E,$A5,$A2,$8D,$80,$8B,$CA
.CrystalRing:
db $D6,$07,$62,$88,$8D,$86,$CA
.Apple:
db $40,$A0,$A0,$8B,$84,$CA
.HpItem:
db $47,$60,$CA
.DefItem:
db $43,$44,$45,$CA
.StrItem:
db $63,$64,$62,$CA
.LightJewel:
db $4B,$88,$86,$87,$A4,$AC,$49,$84,$A7,$84,$8B,$CA
.DarkJewel:
db $D6,$0C,$49,$84,$A7,$84,$8B,$CA
.TwoRedJewels:
db $62,$84,$83,$AC,$D6,$22,$CA
.ThreeRedJewels:
db $4C,$A9,$A3,$A4,$88,$82,$AC,$D6,$48,$CA
}

warnpc $81ff02


org $81ff70
; "Change start menu FORCE text"
db $01,$c6,$01,$03,$14,$2d
if !SettingZ3 == 1
db $31
else
db $33
endif
db $48,$50,$00
org $81ff80
db $01,$c6,$01,$03,$14,$2d,$31,$53,$54,$52,$00
org $81ff90
db $01,$c6,$01,$03,$14,$2d,$31,$44,$45,$46,$00


org $81ff9b
; "Write code for clearing enemy tally data"
phy
pha
ldy #$0000
lda #$0000
-:
sta $0A80,y
iny : iny : cpy #$0020 : bne -
pla
ply
rtl



} ; end bank $81



; Bank $82
{


; Reduce cost of multiplication and division.
org $8281D1
LR_MultiplyBytesOfA:
{
sta $804202
xba
sta $804203
nop : nop : nop ; : nop ; reduce unneeded filler cycles
lda $804217
xba
lda $804216
rtl
nop ; filler
}
LR_DivideYByA:
{
sty $4204
sta $4206
pha : pla ;nop : nop : nop : nop ; reduce unneeded filler cycles
pha : pla ;nop : nop : nop : nop ; reduce unneeded filler cycles
lda $4216
xba
lda $4214
rtl
nop : nop : nop : nop ; filler
}
warnpc $8281FE


; Removes 5 pointless nops.
org $82a5e8
plp : rtl


org $82a5f9
; Part of LR_UpdateTilemapOpenChests, updated for 2-byte item IDs.
skip 3   ; lda $0000,x
skip 3   ; bit #$0080
skip 2   ; bne B_82A65B
phx
lda $0004,x : and #$007f : jsl $80B489 : bcc UpdateTilemapChestsCheckNext
org $82a652
UpdateTilemapChestsCheckNext:
rep #$21
pla : adc #$0005 : tax

org $82a65d
SR_CheckChestCollide:
org $82a6e4
{
.GetChestListForRoom:
ldy $0646
ldx.w Lut_Chests,y
.CheckNextChest:
lda $0000,x : bmi .NoMatchedChest
cmp $18 : bne ..NotMatchedX
lda $0001,x : cmp $1C : beq .GotMatchedChest
..NotMatchedX:
inx : inx : inx : inx : inx
bra .CheckNextChest
.NoMatchedChest:
rep #$20
ldy #$FF48
jsl LR_ParseDialogueScriptAtY
rts
.GotMatchedChest:
rep #$20
phx
lda #$0080 : tsb $09EC
lda #$00FC : sta $06
jsr $A8B2    ; Set chest tiles to "open"
lda $01,s : tax
lda $0002,x : beq .ChestEmpty
sep #$20
lda #$2A : sta $06F9
rep #$20
lda #$0001 : sta $0bfc    ; Slow item get text speed.
lda $0002,x : jsl LR_GiveAnyItemA16OrSec : bcc .GaveItemSuccess
.CannotGiveItem:
lda $01,s : tax
lda #$00F8 : sta $06
jsr $A8B2
bra .ReturnControl
.ChestEmpty:
ldy #$FF36
jsl LR_ParseDialogueScriptAtY
lda $01,s : tax
lda $0004,x : and #$007F : jsl LR_SetFlag20A
bra .ReturnControl
.GaveItemSuccess:
lda $01,s
phx
tax
lda #$0080 : trb $09EC
plx
.SetItemFlagAndReturn:
lda $01,s : tax
lda $0004,x : and #$007F : jsl LR_SetFlag20A
plx
rts
.ReturnControl:
lda #$0080 : trb $09EC
plx
rts
}
warnpc $82a7b8



org $82b858
jmp BR_CheckPsychoDash

org $82b871
db $30   ; Prevent Earthquaker and AB from implicitly allowing Friar

org $82b8df
jmp BR_CheckDarkFriar



org $82ca63
if !SettingFluteless == 1
jsr SR_AllowBlockIfNotWill    ; Instead of lda #$0100.
endif



; Early Firebird checks.
; Replaces "lda $0644 : cmp #$00e8 : bne .PostFirebird"
org $82cd07
nop : nop : nop : jsr SR_SecIfFirebirdAllowed : bcc $09
org $82cd88
nop : nop : nop : jsr SR_SecIfFirebirdAllowed : bcc $09
org $82ce06
nop : nop : nop : jsr SR_SecIfFirebirdAllowed : bcc $09
org $82ce84
nop : nop : nop : jsr SR_SecIfFirebirdAllowed : bcc $09


org $82ceee
SR_PlayerAttackFreezeAndSound:
lda $0656 : and #$0F00 : sta $0656
  ora #$8000 : sta $0658
if !SettingFluteless == 1
lda $0AD4 : beq .AsWill
lda #$0100 : trb $10
cop #$06 : db $02
rts
.AsWill:
jsr SR_DisableAttackDamage
rts
else
lda #$0100 : trb $10
lda $0AD4 : beq .AsWill
cop #$06 : db $02
rts
.AsWill:
cop #$06 : db $01
rts
endif
warnpc $82cf0f


org $82cf58
if !SettingZ3 == 1
lda $0ade    ; Instead of lda #$0001, doubles jump-slash damage
endif


org $82f0c0
SR_SecIfFirebirdAllowed:
{
lda $0644 : cmp #$00e8 : beq .OkayFirebird
if !SettingEarlyFirebird == 0
bra .NoFirebird
else
lda $0ad4 : cmp #$0002 : bne .NoFirebird
cop #$D0 : db $3e,$00 : dw .NoFirebird
cop #$D0 : db $8a,$00 : dw .NoFirebird
endif
.OkayFirebird:
lda $213f : adc $2137 : adc $213c : adc $0036
  and #$000f : sec : sbc #$0004 : sta $09e2   ; Firebird damage randomizer.
sec
rts
.NoFirebird:
clc
rts
}


org $82f130
; enemystats.bin, the new way of doing stat blocks
if !SettingZ3 == 0
{
db $00,$00,$00,$00
db $04,$01,$00,$02
db $03,$01,$00,$01
db $07,$01,$00,$03
db $02,$01,$00,$01
db $02,$01,$00,$01
db $55,$00,$00,$00
db $05,$01,$00,$00
db $02,$01,$00,$00
db $04,$01,$00,$00
db $05,$01,$00,$02
db $04,$01,$00,$01
db $06,$01,$00,$01
db $07,$01,$00,$02
db $05,$01,$00,$03
db $04,$01,$00,$01
db $09,$01,$00,$00
db $07,$01,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$02,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $07,$02,$00,$02
db $03,$02,$00,$01
db $03,$02,$00,$03
db $08,$02,$00,$01
db $08,$02,$00,$02
db $0B,$02,$00,$01
db $0D,$02,$00,$03
db $03,$01,$00,$00
db $03,$01,$00,$00
db $AA,$02,$00,$00
db $AA,$02,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $11,$03,$00,$02
db $0F,$03,$00,$03
db $08,$03,$00,$01
db $05,$03,$00,$01
db $0D,$04,$00,$02
db $03,$04,$00,$01
db $07,$04,$00,$03
db $28,$03,$7F,$00
db $28,$04,$7F,$00
db $21,$05,$7F,$00
db $0A,$04,$00,$01
db $11,$04,$00,$02
db $0F,$04,$00,$03
db $0F,$04,$00,$02
db $28,$05,$7F,$00
db $02,$04,$7F,$00
db $0D,$02,$00,$03
db $0D,$02,$00,$00
db $0D,$02,$00,$01
db $0B,$03,$00,$00
db $0B,$04,$00,$02
db $0C,$04,$00,$01
db $0C,$04,$00,$01
db $0A,$05,$00,$03
db $08,$02,$00,$02
db $04,$02,$00,$01
db $11,$05,$00,$02
db $0D,$06,$00,$01
db $14,$05,$00,$03
db $13,$06,$00,$02
db $0D,$05,$FF,$00
db $0D,$05,$00,$03
db $07,$05,$00,$00
db $0A,$05,$00,$02
db $05,$05,$00,$01
db $04,$02,$00,$01
db $08,$05,$00,$02
db $13,$06,$00,$00
db $14,$06,$00,$03
db $0D,$05,$00,$02
db $28,$08,$7F,$00
db $11,$05,$00,$02
db $05,$02,$00,$00
db $03,$02,$00,$01
db $0D,$08,$7F,$00
db $28,$08,$7F,$00
db $07,$09,$7F,$00
db $01,$08,$7F,$00
db $0D,$0A,$7F,$00
db $0B,$03,$00,$02
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $0D,$08,$00,$02
db $0B,$08,$00,$02
db $14,$08,$00,$02
db $07,$02,$00,$00
db $01,$07,$7F,$00
db $07,$09,$7F,$00
db $0D,$08,$7F,$00
db $28,$07,$7F,$00
db $28,$09,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $FF,$FF,$FF,$FF
db $FF,$FF,$FF,$FF
db $00,$00,$00,$00
db $06,$01,$00,$02
db $05,$01,$00,$01
db $0A,$01,$00,$03
db $03,$01,$00,$01
db $03,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$00,$00
db $03,$01,$00,$00
db $06,$01,$00,$00
db $08,$01,$00,$02
db $06,$01,$00,$01
db $09,$01,$00,$01
db $0B,$01,$00,$02
db $08,$01,$00,$03
db $06,$01,$00,$01
db $0E,$01,$00,$00
db $0A,$01,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$02,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $0A,$02,$00,$02
db $05,$02,$00,$01
db $05,$02,$00,$03
db $0C,$02,$00,$01
db $0C,$02,$00,$02
db $10,$02,$00,$01
db $14,$02,$00,$03
db $05,$01,$00,$00
db $05,$01,$00,$00
db $FF,$02,$00,$00
db $FF,$02,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $1A,$03,$00,$02
db $16,$03,$00,$03
db $0C,$03,$00,$01
db $08,$03,$00,$01
db $14,$04,$00,$02
db $05,$04,$00,$01
db $0A,$04,$00,$03
db $28,$03,$7F,$00
db $28,$04,$7F,$00
db $32,$05,$7F,$00
db $0F,$04,$00,$01
db $19,$04,$00,$02
db $16,$04,$00,$03
db $16,$04,$00,$02
db $28,$05,$7F,$00
db $03,$04,$7F,$00
db $14,$02,$00,$03
db $14,$02,$00,$00
db $14,$02,$00,$01
db $10,$03,$00,$00
db $10,$04,$00,$02
db $12,$04,$00,$01
db $12,$04,$00,$01
db $0F,$05,$00,$03
db $0C,$02,$00,$02
db $06,$02,$00,$01
db $19,$05,$00,$02
db $14,$06,$00,$01
db $1E,$05,$00,$03
db $1C,$06,$00,$02
db $14,$05,$FF,$00
db $14,$05,$00,$03
db $0A,$05,$00,$00
db $0F,$05,$00,$02
db $08,$05,$00,$01
db $06,$02,$00,$01
db $0C,$05,$00,$02
db $1C,$06,$00,$00
db $1E,$06,$00,$03
db $14,$05,$00,$02
db $28,$08,$7F,$00
db $19,$05,$00,$02
db $08,$02,$00,$00
db $05,$02,$00,$01
db $14,$08,$7F,$00
db $28,$08,$7F,$00
db $0A,$09,$7F,$00
db $01,$08,$7F,$00
db $14,$0A,$7F,$00
db $10,$03,$00,$02
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $28,$08,$7F,$00
db $14,$08,$00,$02
db $10,$08,$00,$02
db $1E,$08,$00,$02
db $0A,$02,$00,$00
db $01,$07,$7F,$00
db $0A,$09,$7F,$00
db $14,$08,$7F,$00
db $28,$07,$7F,$00
db $28,$09,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $FF,$FF,$FF,$FF
db $FF,$FF,$FF,$FF
db $00,$00,$00,$00
db $06,$02,$00,$02
db $05,$02,$00,$01
db $0A,$02,$00,$03
db $03,$02,$00,$01
db $03,$02,$00,$01
db $7F,$00,$00,$00
db $08,$02,$04,$00
db $03,$02,$03,$00
db $06,$02,$03,$00
db $08,$02,$00,$02
db $06,$02,$00,$01
db $09,$02,$00,$01
db $0B,$03,$00,$02
db $08,$02,$00,$03
db $06,$02,$00,$01
db $0E,$02,$00,$00
db $0A,$03,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $0A,$05,$00,$02
db $05,$04,$00,$01
db $05,$04,$00,$03
db $0C,$05,$00,$01
db $0C,$05,$00,$02
db $10,$05,$00,$01
db $14,$05,$00,$03
db $05,$02,$00,$00
db $05,$02,$00,$00
db $FF,$05,$00,$00
db $FF,$05,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$07,$7F,$00
db $1A,$07,$00,$02
db $16,$06,$00,$03
db $0C,$07,$00,$01
db $08,$07,$00,$01
db $14,$08,$00,$02
db $05,$07,$01,$01
db $0A,$08,$01,$03
db $28,$07,$7F,$00
db $28,$07,$7F,$00
db $32,$0A,$7F,$00
db $0F,$07,$01,$01
db $19,$08,$01,$02
db $16,$09,$00,$03
db $16,$07,$00,$02
db $28,$09,$7F,$00
db $03,$08,$7F,$00
db $14,$05,$00,$03
db $14,$05,$00,$00
db $14,$05,$00,$01
db $10,$07,$00,$00
db $10,$08,$01,$02
db $12,$09,$01,$01
db $12,$08,$01,$01
db $0F,$09,$01,$03
db $0C,$05,$00,$02
db $06,$05,$00,$01
db $19,$0A,$01,$02
db $14,$0B,$01,$01
db $1E,$0A,$01,$03
db $1C,$0B,$01,$02
db $14,$0A,$FF,$00
db $14,$0A,$01,$03
db $0A,$0A,$01,$00
db $0F,$0A,$01,$02
db $08,$0A,$01,$01
db $06,$05,$00,$01
db $0C,$0A,$01,$02
db $1C,$0B,$01,$00
db $1E,$0B,$01,$03
db $14,$0A,$01,$02
db $28,$0F,$7F,$00
db $19,$09,$01,$02
db $08,$05,$00,$00
db $05,$05,$00,$01
db $14,$0F,$7F,$00
db $28,$09,$7F,$00
db $0A,$10,$7F,$00
db $01,$0F,$7F,$00
db $14,$12,$7F,$00
db $10,$07,$00,$02
db $28,$0F,$7F,$00
db $28,$0F,$7F,$00
db $28,$0F,$7F,$00
db $28,$0F,$7F,$00
db $28,$0F,$7F,$00
db $28,$0F,$7F,$00
db $28,$0F,$7F,$00
db $14,$0F,$01,$02
db $10,$0F,$01,$02
db $1E,$0F,$01,$02
db $0A,$04,$00,$00
db $01,$08,$7F,$00
db $0A,$0A,$7F,$00
db $14,$09,$7F,$00
db $28,$08,$7F,$00
db $28,$11,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $FF,$FF,$FF,$FF
db $FF,$FF,$FF,$FF
db $00,$00,$00,$00
db $06,$04,$00,$02
db $05,$03,$00,$01
db $0A,$04,$00,$03
db $03,$04,$00,$01
db $03,$03,$00,$01
db $7F,$00,$00,$00
db $08,$04,$06,$00
db $03,$04,$05,$00
db $06,$04,$04,$00
db $08,$04,$00,$02
db $06,$04,$00,$01
db $09,$04,$00,$01
db $0B,$05,$00,$02
db $08,$04,$00,$03
db $06,$04,$00,$01
db $0E,$04,$00,$00
db $0A,$05,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$06,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $0A,$07,$00,$02
db $05,$06,$00,$01
db $05,$06,$00,$03
db $0C,$07,$00,$01
db $0C,$07,$00,$02
db $10,$07,$00,$01
db $14,$07,$00,$03
db $05,$03,$00,$00
db $05,$03,$00,$00
db $FF,$07,$00,$00
db $FF,$07,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$09,$7F,$00
db $1A,$09,$01,$02
db $16,$08,$00,$03
db $0C,$09,$00,$01
db $08,$09,$00,$01
db $14,$0A,$01,$02
db $05,$09,$01,$01
db $0A,$0A,$01,$03
db $28,$09,$7F,$00
db $28,$09,$7F,$00
db $32,$0C,$7F,$00
db $0F,$09,$01,$01
db $19,$0A,$01,$02
db $16,$0B,$01,$03
db $16,$09,$01,$02
db $28,$0B,$7F,$00
db $03,$0A,$7F,$00
db $14,$07,$01,$03
db $14,$07,$01,$00
db $14,$07,$01,$01
db $10,$09,$01,$00
db $10,$0A,$01,$02
db $12,$0B,$01,$01
db $12,$0A,$01,$01
db $0F,$0B,$01,$03
db $0C,$07,$01,$02
db $06,$07,$00,$01
db $19,$0C,$01,$02
db $14,$0D,$01,$01
db $1E,$0C,$01,$03
db $1C,$0D,$01,$02
db $14,$0C,$FF,$00
db $14,$0C,$01,$03
db $0A,$0C,$01,$00
db $0F,$0C,$01,$02
db $08,$0C,$01,$01
db $06,$07,$00,$01
db $0C,$0C,$01,$02
db $1C,$0D,$01,$00
db $1E,$0D,$01,$03
db $14,$0C,$01,$02
db $28,$11,$7F,$00
db $19,$0B,$02,$02
db $08,$07,$01,$00
db $05,$07,$00,$01
db $14,$11,$7F,$00
db $28,$0A,$7F,$00
db $0A,$12,$7F,$00
db $01,$11,$7F,$00
db $14,$14,$7F,$00
db $10,$09,$01,$02
db $28,$11,$7F,$00
db $28,$11,$7F,$00
db $28,$11,$7F,$00
db $28,$11,$7F,$00
db $28,$11,$7F,$00
db $28,$11,$7F,$00
db $28,$11,$7F,$00
db $14,$11,$02,$02
db $10,$11,$02,$02
db $1E,$11,$02,$02
db $0A,$06,$01,$00
db $01,$09,$7F,$00
db $0A,$0B,$7F,$00
db $14,$0A,$7F,$00
db $28,$09,$7F,$00
db $28,$13,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
}
else
{
db $00,$00,$00,$00
db $02,$01,$00,$02
db $02,$01,$00,$01
db $04,$02,$00,$03
db $02,$01,$00,$01
db $02,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$46,$00
db $03,$01,$33,$00
db $06,$01,$30,$00
db $03,$01,$00,$02
db $02,$02,$00,$01
db $03,$01,$00,$01
db $04,$02,$00,$02
db $03,$02,$00,$03
db $02,$02,$00,$01
db $06,$02,$00,$00
db $04,$03,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $04,$04,$00,$02
db $02,$04,$00,$01
db $02,$04,$00,$03
db $04,$04,$00,$01
db $04,$05,$00,$02
db $06,$04,$00,$01
db $08,$05,$00,$03
db $02,$01,$00,$00
db $02,$01,$00,$00
db $FF,$04,$00,$00
db $FF,$05,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$07,$7F,$00
db $10,$06,$00,$02
db $0C,$06,$00,$03
db $04,$06,$00,$01
db $03,$06,$00,$01
db $08,$08,$00,$02
db $02,$07,$00,$01
db $04,$08,$00,$03
db $28,$06,$7F,$00
db $28,$07,$7F,$00
db $32,$0A,$7F,$00
db $06,$07,$00,$01
db $10,$08,$00,$02
db $0C,$09,$00,$03
db $0C,$07,$00,$02
db $28,$09,$7F,$00
db $03,$08,$7F,$00
db $08,$04,$00,$03
db $08,$04,$00,$00
db $08,$04,$00,$01
db $06,$06,$00,$00
db $06,$08,$00,$02
db $08,$09,$00,$01
db $08,$08,$00,$01
db $06,$09,$00,$03
db $04,$04,$00,$02
db $02,$04,$00,$01
db $10,$0A,$00,$02
db $08,$0B,$00,$01
db $18,$0A,$00,$03
db $14,$0B,$00,$02
db $08,$0A,$FF,$00
db $08,$0A,$00,$03
db $04,$0A,$00,$00
db $06,$0A,$00,$02
db $03,$0A,$00,$01
db $02,$04,$00,$01
db $08,$0A,$00,$02
db $14,$0B,$00,$00
db $18,$0B,$00,$03
db $0A,$0A,$00,$02
db $28,$0F,$7F,$00
db $10,$09,$00,$02
db $03,$04,$00,$00
db $02,$04,$00,$01
db $14,$10,$7F,$00
db $28,$0F,$7F,$00
db $0A,$10,$7F,$00
db $01,$0F,$7F,$00
db $14,$12,$7F,$00
db $06,$06,$00,$02
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $10,$10,$00,$02
db $0A,$10,$00,$02
db $18,$10,$00,$02
db $04,$04,$00,$00
db $01,$0D,$7F,$00
db $0A,$10,$7F,$00
db $14,$0F,$7F,$00
db $28,$0D,$7F,$00
db $28,$11,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $FF,$FF,$FF,$FF
db $FF,$FF,$FF,$FF
db $00,$00,$00,$00
db $02,$01,$00,$02
db $02,$01,$00,$01
db $04,$02,$00,$03
db $02,$01,$00,$01
db $02,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$46,$00
db $03,$01,$33,$00
db $06,$01,$30,$00
db $03,$01,$00,$02
db $02,$02,$00,$01
db $03,$01,$00,$01
db $04,$02,$00,$02
db $03,$02,$00,$03
db $02,$02,$00,$01
db $06,$02,$00,$00
db $04,$03,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $04,$04,$00,$02
db $02,$04,$00,$01
db $02,$04,$00,$03
db $04,$04,$00,$01
db $04,$05,$00,$02
db $06,$04,$00,$01
db $08,$05,$00,$03
db $02,$01,$00,$00
db $02,$01,$00,$00
db $FF,$04,$00,$00
db $FF,$05,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$07,$7F,$00
db $10,$06,$00,$02
db $0C,$06,$00,$03
db $04,$06,$00,$01
db $03,$06,$00,$01
db $08,$08,$00,$02
db $02,$07,$00,$01
db $04,$08,$00,$03
db $28,$06,$7F,$00
db $28,$07,$7F,$00
db $32,$0A,$7F,$00
db $06,$07,$00,$01
db $10,$08,$00,$02
db $0C,$09,$00,$03
db $0C,$07,$00,$02
db $28,$09,$7F,$00
db $03,$08,$7F,$00
db $08,$04,$00,$03
db $08,$04,$00,$00
db $08,$04,$00,$01
db $06,$06,$00,$00
db $06,$08,$00,$02
db $08,$09,$00,$01
db $08,$08,$00,$01
db $06,$09,$00,$03
db $04,$04,$00,$02
db $02,$04,$00,$01
db $10,$0A,$00,$02
db $08,$0B,$00,$01
db $18,$0A,$00,$03
db $14,$0B,$00,$02
db $08,$0A,$FF,$00
db $08,$0A,$00,$03
db $04,$0A,$00,$00
db $06,$0A,$00,$02
db $03,$0A,$00,$01
db $02,$04,$00,$01
db $08,$0A,$00,$02
db $14,$0B,$00,$00
db $18,$0B,$00,$03
db $0A,$0A,$00,$02
db $28,$0F,$7F,$00
db $10,$09,$00,$02
db $03,$04,$00,$00
db $02,$04,$00,$01
db $14,$10,$7F,$00
db $28,$0F,$7F,$00
db $0A,$10,$7F,$00
db $01,$0F,$7F,$00
db $14,$12,$7F,$00
db $06,$06,$00,$02
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $10,$10,$00,$02
db $0A,$10,$00,$02
db $18,$10,$00,$02
db $04,$04,$00,$00
db $01,$0D,$7F,$00
db $0A,$10,$7F,$00
db $14,$0F,$7F,$00
db $28,$0D,$7F,$00
db $28,$11,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $FF,$FF,$FF,$FF
db $FF,$FF,$FF,$FF
db $00,$00,$00,$00
db $02,$01,$00,$02
db $02,$01,$00,$01
db $04,$02,$00,$03
db $02,$01,$00,$01
db $02,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$46,$00
db $03,$01,$33,$00
db $06,$01,$30,$00
db $03,$01,$00,$02
db $02,$02,$00,$01
db $03,$01,$00,$01
db $04,$02,$00,$02
db $03,$02,$00,$03
db $02,$02,$00,$01
db $06,$02,$00,$00
db $04,$03,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $04,$04,$00,$02
db $02,$04,$00,$01
db $02,$04,$00,$03
db $04,$04,$00,$01
db $04,$05,$00,$02
db $06,$04,$00,$01
db $08,$05,$00,$03
db $02,$01,$00,$00
db $02,$01,$00,$00
db $FF,$04,$00,$00
db $FF,$05,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$07,$7F,$00
db $10,$06,$00,$02
db $0C,$06,$00,$03
db $04,$06,$00,$01
db $03,$06,$00,$01
db $08,$08,$00,$02
db $02,$07,$00,$01
db $04,$08,$00,$03
db $28,$06,$7F,$00
db $28,$07,$7F,$00
db $32,$0A,$7F,$00
db $06,$07,$00,$01
db $10,$08,$00,$02
db $0C,$09,$00,$03
db $0C,$07,$00,$02
db $28,$09,$7F,$00
db $03,$08,$7F,$00
db $08,$04,$00,$03
db $08,$04,$00,$00
db $08,$04,$00,$01
db $06,$06,$00,$00
db $06,$08,$00,$02
db $08,$09,$00,$01
db $08,$08,$00,$01
db $06,$09,$00,$03
db $04,$04,$00,$02
db $02,$04,$00,$01
db $10,$0A,$00,$02
db $08,$0B,$00,$01
db $18,$0A,$00,$03
db $14,$0B,$00,$02
db $08,$0A,$FF,$00
db $08,$0A,$00,$03
db $04,$0A,$00,$00
db $06,$0A,$00,$02
db $03,$0A,$00,$01
db $02,$04,$00,$01
db $08,$0A,$00,$02
db $14,$0B,$00,$00
db $18,$0B,$00,$03
db $0A,$0A,$00,$02
db $28,$0F,$7F,$00
db $10,$09,$00,$02
db $03,$04,$00,$00
db $02,$04,$00,$01
db $14,$10,$7F,$00
db $28,$0F,$7F,$00
db $0A,$10,$7F,$00
db $01,$0F,$7F,$00
db $14,$12,$7F,$00
db $06,$06,$00,$02
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $10,$10,$00,$02
db $0A,$10,$00,$02
db $18,$10,$00,$02
db $04,$04,$00,$00
db $01,$0D,$7F,$00
db $0A,$10,$7F,$00
db $14,$0F,$7F,$00
db $28,$0D,$7F,$00
db $28,$11,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $FF,$FF,$FF,$FF
db $FF,$FF,$FF,$FF
db $00,$00,$00,$00
db $02,$01,$00,$02
db $02,$01,$00,$01
db $04,$02,$00,$03
db $02,$01,$00,$01
db $02,$01,$00,$01
db $7F,$00,$00,$00
db $08,$01,$46,$00
db $03,$01,$33,$00
db $06,$01,$30,$00
db $03,$01,$00,$02
db $02,$02,$00,$01
db $03,$01,$00,$01
db $04,$02,$00,$02
db $03,$02,$00,$03
db $02,$02,$00,$01
db $06,$02,$00,$00
db $04,$03,$00,$03
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$04,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $04,$04,$00,$02
db $02,$04,$00,$01
db $02,$04,$00,$03
db $04,$04,$00,$01
db $04,$05,$00,$02
db $06,$04,$00,$01
db $08,$05,$00,$03
db $02,$01,$00,$00
db $02,$01,$00,$00
db $FF,$04,$00,$00
db $FF,$05,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $28,$07,$7F,$00
db $10,$06,$00,$02
db $0C,$06,$00,$03
db $04,$06,$00,$01
db $03,$06,$00,$01
db $08,$08,$00,$02
db $02,$07,$00,$01
db $04,$08,$00,$03
db $28,$06,$7F,$00
db $28,$07,$7F,$00
db $32,$0A,$7F,$00
db $06,$07,$00,$01
db $10,$08,$00,$02
db $0C,$09,$00,$03
db $0C,$07,$00,$02
db $28,$09,$7F,$00
db $03,$08,$7F,$00
db $08,$04,$00,$03
db $08,$04,$00,$00
db $08,$04,$00,$01
db $06,$06,$00,$00
db $06,$08,$00,$02
db $08,$09,$00,$01
db $08,$08,$00,$01
db $06,$09,$00,$03
db $04,$04,$00,$02
db $02,$04,$00,$01
db $10,$0A,$00,$02
db $08,$0B,$00,$01
db $18,$0A,$00,$03
db $14,$0B,$00,$02
db $08,$0A,$FF,$00
db $08,$0A,$00,$03
db $04,$0A,$00,$00
db $06,$0A,$00,$02
db $03,$0A,$00,$01
db $02,$04,$00,$01
db $08,$0A,$00,$02
db $14,$0B,$00,$00
db $18,$0B,$00,$03
db $0A,$0A,$00,$02
db $28,$0F,$7F,$00
db $10,$09,$00,$02
db $03,$04,$00,$00
db $02,$04,$00,$01
db $14,$10,$7F,$00
db $28,$0F,$7F,$00
db $0A,$10,$7F,$00
db $01,$0F,$7F,$00
db $14,$12,$7F,$00
db $06,$06,$00,$02
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $28,$10,$7F,$00
db $10,$10,$00,$02
db $0A,$10,$00,$02
db $18,$10,$00,$02
db $04,$04,$00,$00
db $01,$0D,$7F,$00
db $0A,$10,$7F,$00
db $14,$0F,$7F,$00
db $28,$0D,$7F,$00
db $28,$11,$7F,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
db $00,$00,$00,$00
}
endif




; More "Early Firebird"
org $82f828
LR_SpawnFirebirdPaletteManager:
cop #$3B : db $71 : dl TFirebirdPaletteManager
lda #$1000 : tsb $12
rtl
-:
cop #$C1
TFirebirdPaletteManager:
lda $0AD4 : cmp #$0002 : beq +
  rtl
+:
cop #$36
cop #$39
bra -

BR_CheckPsychoDash:
lda $0AA2 : bit #$0001 : beq +
lda #$BEA0 : jsr $B926
+:
jmp $B901
BR_CheckDarkFriar:
lda $0aa2 : bit #$0010 : beq +
lda #$bb3b : jsr $b926
+:
jmp $b901

SR_AllowBlockIfNotWill:   ; assumed to be $82f845
lda $0ad4 : beq +
lda #$0100
+:
rts
SR_DisableAttackDamage:
lda #$0400 : tsb $10
lda #$0200 : trb $10
rts
SR_AllowChargeIfInSnakeGame:
lda $0644 : cmp #$00C6 : beq +
lda $09AE : bit #$0008 : beq +
cop #$E0
+:
jmp $B7BD

}



; Bank $83
{

org $8381d6
jmp $fdc0    ; "Black Glasses allow you to see which upgrades are available"


org $838294
lda $81adac,x   ; radar screen chest counter, update for new chest table
rep #$20
and #$007f : jsl $80b489
sep #$20 : bcs +
org $8382f9
inc $0002
+:
inx : inx : inx : inx : inx : jmp $828e


org $83848d
dw SR_UseItemCrystalRing    ; Item $27
dw SR_UseItemApple    ; Item $28
dw SR_UseItemHpUpgrade    ; Item $29 
dw $f792    ; Item $2a 
dw $f7cd    ; Item $2b 
dw SR_UseItemPsychoDashUpgrade    ; Item $2c 
dw SR_UseItemFriarUpgrade    ; Item $2d 
dw SR_UseItemTwoJewels    ; Item $2e 
dw SR_UseItemThreeJewels    ; Item $2f 
dw $ffa0    ; Item $30 



org $8384d5
SR_UseItemRedJewel:
if !SettingRedJewelMadness == 1
cop #$BF : dw .UseText
jsr SR_RemoveHeldItem
jsl LR_IncJewelCounter
jsl LR_DecHP
phx
phd
  lda $09AA : tcd : tax
  cop #$A5 : dl $838566 : dw $0000,$2000
  tyx
  lda #$0000 : sta $0012,x
  lda #$3000 : sta $000E,x
  lda $1014 : sta $0014,x
  lda $1016 : sta $0016,x
pld
plx
rts
.UseText:
db $cd : dl TextUsedRedJewelRJM
db $c0
endif
warnpc $838566


org $8385cf
db $13    ; Allow Prison Key use from south of door.
org $8385dc
cop #$D5 : db $02   ; No need to check whether the key is being re-used. Just remove it here.
nop : nop : nop


org $83881d
; Unused Inca Melody block, used now for upgrade items
{
SR_UseItemStrUpgrade:
cop #$BF : dw .Text
inc $0ade
jsr $9fb2    ; jsr SR_RemoveHeldItem
rts
.Text:
; "Your STR increased!"
db $D3,$D6,$68,$63,$64,$62,$AC,$88,$8D,$82,$A2,$84,$80,$A3,$84,$83,$4F,$C0

SR_UseItemPsychoDashUpgrade:
cop #$BF : dw .Text
inc $0b16
jmp $f07d
.Text:
; "Psycho Dash has been improved!"
db $D6,$3C,$43,$80,$A3,$87,$AC,$87,$80,$A3,$AC,$D6,$70,$CB,$88,$8C,$A0,$A2,$8E,$A6,$84,$83,$4F,$AC,$C0

SR_UseItemFriarUpgrade:
cop #$BF : dw .Text
inc $0b1c
jmp $f07d
.Text:
; "Dark Friar has been improved!"
db $D3,$D6,$0C,$45,$A2,$88,$80,$A2,$AC,$87,$80,$A3,$AC,$D6,$70,$CB,$88,$8C,$A0,$A2,$8E,$A6,$84,$83,$4F,$AC,$C0
}


org $83888a
table "table_dialogue.txt",rtl
SR_UseItemHerb:
cop #$BF : dw .TextOfferUse
cop #$BE : db $02,$01 : dw .UseOptions
.UseOptions:
  dw .ChooseDecline
  dw .ChooseAccept, .ChooseDecline
.ChooseAccept:
cop #$BF : dw ..Text
jsr SR_GetHerbHealAmount : sta $0b22    ; Instead of lda #$0008, uses difficulty level to set heal amount.
sed
  lda $0aaa : sec : sbc #$0001 : sta $0aaa
cld
bne +
  jsr SR_RemoveHeldItem
+:
rts
..Text:
db $cd : dl TextUsedHerbOverflow
db $c0
.ChooseDecline:
cop #$BF : dw ..Text
rts
..Text:
db $cd : dl TextDeclinedHerbOverflow
db $c0
.TextOfferUse:
db $d3
db $c6 : dw $0002, $0aaa    ; <number>
db "_left - take one?",$cb
db "_Yes",$cb
db "_No"
db $ca
warnpc $838917


org $838BA4
SR_UseItemLolasMelody:
{
lda $0AD4 : beq +
  jmp .NoFlute
+:
jsl $82a10a : bcc +
  rts
+:
lda $0644 : cmp #$0015 : bne .NothingHappened
.InItory:    ; org $838bd6
cop #$D0 : db $40, $01 : dw .NothingHappened
.DoPlaySong:    ; org $838bef
lda #$0080 : tsb $09EC
cop #$BF : dw Text_LayDownDatFunkCat
phx
ldx #$0000
cop #$A5 : dl $839FCA : dw $0000, $2000
cpy #$1FC0 : bne +
  jmp ++
+:
lda #$CFF0 : tsb $065A
++:
lda $0012,y : ora #$1000 : sta $0012,y
lda #$0018 : sta $0026,y
lda #$0001 : sta $0020,y
plx
rts
.NothingHappened:
cop #$BF : dw $8CDB
rts
.NoFlute:
cop #$BF : dw $8F82
rts
}
warnpc $838c35
org $838c35
EFluteSongPlayer_PostLolasMelody:
{
lda $0644 : cmp #$0015 : bne EFluteSongPlayer_PostLolasMelody_ButNothingHappened
cop #$CC : db $40
cop #$BF : dw $8ca0
cop #$D5 : db $09
cop #$C5
EFluteSongPlayer_PostLolasMelody_ButNothingHappened:
cop #$BF : dw $8d05
cop #$C5

Text_LayDownDatFunkCat:
db $D3,$4B,$80,$A9,$AC,$83,$8E,$A7,$8D,$AC,$83,$80,$A4,$AC,$85,$A5,$8D,$8A,$2B,$AC,$82,$80,$A4,$2A,$C0
}

org $838f17
; item0d.bin, memory melody
{
lda $0ad4 : beq +
  cop #$BF : dw $8f82
  rts
+:
lda $0644 : cmp #$0049 : beq +
  bra ++
+:
cop #$D0 : db $14,$01 : dw $8f7d
cop #$45 : db $00,$00,$0f,$0f : dw $8f3b
bra ++
lda #$0080 : tsb $09ec
cop #$BF : dw $8fcd
phx
ldx #$0000
cop #$A5 : dl $839fca : db $00,$00 : dw $2000
lda $0012,y : ora #$1000 : sta $0012,y
lda #$001d : sta $0026,y
lda #$0002 : sta $0020,y
plx
lda #$000e : sta $06f2
rts

cop #$D5 : db $0d
cop #$3B : db $1b : dl $80b519
cop #$CC : db $14
cop #$C5

++:
cop #$BF : dw $8f98
rts

; "He doesn't have the Flute."
db $D3,$47,$84,$AC,$D6,$84,$87,$80,$A6,$84,$CB,$A4,$87,$84,$AC,$45,$8B,$A5,$A4,$84,$2A,$C0

; "Will began playing the melody he remembered. But nothing happened."
db $D3,$67,$88,$8B,$8B,$AC,$81,$84,$86,$80,$8D,$AC,$D6,$C4,$A4,$87,$84,$AC,$CB,$D6,$B4,$87,$84,$AC,$A2,$84,$8C,$84,$8C,$81,$84,$A2,$84,$83,$2A,$AC,$CF,$41,$A5,$A4,$AC,$D6,$B9,$87,$80,$A0,$A0,$84,$8D,$84,$83,$2A,$C0

; "Will began playing the melody he remembered."
db $D3,$CE,$67,$88,$8B,$8B,$AC,$81,$84,$86,$80,$8D,$AC,$D6,$C4,$A4,$87,$84,$AC,$CB,$D6,$B4,$87,$84,$AC,$A2,$84,$8C,$84,$8C,$81,$84,$A2,$84,$83,$2A,$AC,$C0
}

org $839174
rts   ; End Mu key use before excessive text.

org $8391d7
db $c0    ; Shorten Mu door text.

org $8393a5
; Magic Dust check.
{
lda $0644
if !KaraLocation == 1
cmp #$0013 : bne $08
cop #$45 : db $0b,$0b,$0d,$0d
elseif !KaraLocation == 2
cmp #$0047 : bne $08
cop #$45 : db $0b,$24,$0d,$26
elseif !KaraLocation == 3
cmp #$0074 : bne $08
cop #$45 : db $07,$08,$09,$0a
elseif !KaraLocation == 4
cmp #$00a9 : bne $08
cop #$45 : db $12,$06,$14,$08
else
cmp #$00bf : bne $08
cop #$45 : db $1a,$10,$1c,$12
endif
}

org $8393c3
; Magic Dust sets unique flag
db $8a

org $839427
SR_UseItemBlueJournal:
cop #$BF : dw .TextIntro
cop #$BE : db $03,$01 : dw .UseOptions
.UseOptions:
  dw .ChooseDecline
  dw .ChooseOption1, .ChooseOption2, .ChooseOption3
.ChooseDecline:
cop #$BF : dw .TextDecline
rts
.ChooseOption1:
cop #$BF : dw .TextOption1
rts
.ChooseOption2:
cop #$BF : dw .TextOption2
rts
.ChooseOption3:
cop #$BF : dw .TextOption3
rts
.TextIntro:
db $cd : dl TextBlueJournalIntro
db $ca
.TextDecline:
db $cd : dl TextBlueJournalDecline
db $c0
.TextOption1:
if !SettingRedJewelHunt == 1
db $cd : dl TextBlueJournalOption1RJH
else
db $cd : dl TextBlueJournalOption1Normal
endif
db $c0
.TextOption2:
db $cd : dl TextBlueJournalOption2
db $c0
.TextOption3:
db $cd : dl TextBlueJournalOption3
db $c0



org $83950c
; Lance's letter
{
cop #$BF : dw Text_LancesLetter    ; $9514
cop #$CC : db $8e
rts

Text_LancesLetter:
; "Will, Kara is in"
db $D3,$C2,$04,$D6,$5C,$D6,$26,$88,$A3,$AC,$88,$8D,$CB
if !KaraLocation == 1   ; Edward's
db $44,$83,$a7,$80,$a2,$83,$0e,$a3,$ac,$60,$a2,$88,$a3,$8e,$8d
elseif !KaraLocation == 2   ; Mine
db $43,$88,$80,$8c,$8e,$8d,$83,$ac,$4c,$88,$8d,$84
elseif !KaraLocation == 3   ; Angel Village
db $40,$8d,$86,$84,$8b,$ac,$66,$88,$8b,$8b,$80,$86,$84
elseif !KaraLocation == 4   ; Kress
db $4c,$a4,$2a,$ac,$4a,$a2,$84,$a3,$a3
else   ; Angkor Wat
db $40,$8d,$8a,$8e,$a2,$ac,$67,$80,$a4
endif
db $CB 
; "        -Lance"
db $AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$6D,$4B,$80,$8D,$82,$84,$C0
}

org $83983d
; Teapot
{
cop #$BF : dw $9861
lda $0644 : cmp #$001a : bne +
  cop #$45 : db $07,$05,$17,$10 : dw DoUseTeapot
+:
cop #$BF : dw $9880
rts
DoUseTeapot:
cop #$BF : dw $9890
cop #$D5 : db $19
cop #$CC : db $2a
rts
}

org $83997f
SR_UseItemBlackGlasses:
{
cop #$BF : dw .TextPutOn
cop #$CC : db $f5
cop #$D5 : db $1c
rts
.TextPutOn:
table "table_dialogue.txt",rtl
db $d3
db "Coolness intensifies!"
db $c0
}


org $839b89
; "which tiles are called when hieroglyph is placed"
db !HieroItemTile1
skip 4
db !HieroItemTile2
skip 4
db !HieroItemTile3
skip 4
db !HieroItemTile4
skip 4
db !HieroItemTile5
skip 4
db !HieroItemTile6


org $839CDC    ; In SR_UseItemAura, this is the not-Shadow branch.
cop #$BF : dw TextShadowsFormUnlocked
cop #$CC : db $b4
rts


org $839d09
; item25.bin, nominally Lola's letter but also includes 2+3 RJ items
{
cop #$CC : db $11
cop #$D5 : db $25
cop #$BF : dw Text_LolasLetter
rts
Text_LolasLetter:
db $D3,$C2,$03,$D6,$5C,$48,$AC,$D6,$99,$A9,$8E,$A5,$AC,$D6,$BA,$A4,$8E,$CB
db $8B,$84,$80,$A2,$8D,$AC,$4C,$8E,$A2,$A3,$84,$AC,$42,$8E,$83,$84,$2A,$AC,$41,$88,$8B,$8B,$CB
db $8A,$8D,$8E,$A7,$A3,$AC,$88,$A4,$2B,$AC,$D6,$20,$84,$8D,$82,$8B,$8E,$A3,$84,$83,$CB
db $87,$88,$A3,$AC,$84,$A8,$A0,$8B,$80,$8D,$80,$A4,$88,$8E,$8D,$2A,$AC,$6D,$4B,$8E,$8B,$80,$CF
db $C3,$00,$69,$8E,$A5,$AC,$8D,$8E,$A7,$AC,$D6,$A4,$4C,$8E,$A2,$A3,$84,$AC,$42,$8E,$83,$84,$4F,$C0

SR_UseItemTwoJewels:
jsr SR_RemoveHeldItem
phx
ldx #$0002
-:
jsl LR_IncJewelCounter
if !SettingRedJewelMadness == 1
jsl LR_DecHP
endif
dex : bne -
plx
cop #$BF : dw .Text
rts
.Text:
db $cd : dl TextUsedTwoRedJewels
db $C0

SR_UseItemThreeJewels:
jsr SR_RemoveHeldItem
phx
ldx #$0003
-:
jsl LR_IncJewelCounter
if !SettingRedJewelMadness == 1
jsl LR_DecHP
endif
dex : bne -
plx
cop #$BF : dw .Text
rts
.Text:
db $cd : dl TextUsedThreeRedJewels
db $C0
}


org $839e9a
; Father's Journal hiero text.
dw !HieroJournalText1,!HieroJournalText2,!HieroJournalText3
dw !HieroJournalText4,!HieroJournalText5,!HieroJournalText6

org $839ea8
db $cd : dl TextFathersJournalSubstitute
db $c0


org $839f30
SR_UseItemCrystalRing:
cop #$BF : dw .TextBlingBling
cop #$CC : db $3e
cop #$D5 : db $27
rts
.TextBlingBling:
table "table_dialogue.txt",rtl
db $d3
db "Bling bling."
db $c0

org $839f5d
; item28.bin, nominally the apple but also includes upgrade items
{
SR_UseItemApple:
cop #$BF : dw .Text
rts
.Text:
; "Great an apple."
db $D3,$D6,$16,$80,$8D,$AC,$80,$A0,$A0,$8B,$84,$2A,$C0

SR_UseItemHpUpgrade:
cop #$BF : dw .Text
inc $0aca
jsr $fe70 : sta $0b22
jsr $9fb2    ; jsr SR_RemoveHeldItem
rts
.Text:
; "Your HP increased!"
db $D3,$D6,$68,$47,$60,$AC,$88,$8D,$82,$A2,$84,$80,$A3,$84,$83,$4F,$C0

SR_UseItemDefUpgrade:
cop #$BF : dw .Text
inc $0adc
jsr $9fb2    ; jsr SR_RemoveHeldItem
rts
.Text:
; "Your DEF increased!"
db $D3,$D6,$68,$43,$44,$45,$AC,$88,$8D,$82,$A2,$84,$80,$A3,$84,$83,$4F,$C0
}





org $83b401
;mapchoices.bin
Lut_MapChoices:
{
.Pointers:
{
dw .Index00   ; Inaccessible.
dw .ContinentSW
dw .ContinentSE
dw .ContinentNE
dw .ContinentNN
dw .ContinentNW
}
; Continent SE.
{
.Index00:
.ContinentSE:
cop #$BF : dw ..Text
cop #$BE : db $53,$00 : dw ..Options
cop #$C5
..Options:
dw OverworldMapChoices_!OverworldShuffleFrejLabel
dw OverworldMapChoices_!OverworldShuffleFrejLabel
dw OverworldMapChoices_!OverworldShuffleNzcaLabel
dw OverworldMapChoices_!OverworldShuffleNeilLabel
dw OverworldMapChoices_!OverworldShuffleDCstLabel
dw OverworldMapChoices_!OverworldShuffleMineLabel
..Text:
db $C1,$02,$14   ; This + next line, instead of $C2,$11;
db $C7,$0E,$03   ; because "Where do you go?" doesn't fit with 5 options.
db $D2,$00
db $AC,"!OverworldShuffleFrejText",$AC,$AC,"!OverworldShuffleDCstText"
db $CB
db $AC,"!OverworldShuffleNzcaText",$AC,$AC,"!OverworldShuffleMineText"
db $CB
db $AC,"!OverworldShuffleNeilText"
db $CA
}
; Continent NE.
{
.ContinentNE:
cop #$BF : dw ..Text
cop #$BE : db $32,$01 : dw ..Options
cop #$C5
..Options:
dw OverworldMapChoices_!OverworldShuffleWtmaLabel
dw OverworldMapChoices_!OverworldShuffleWtmaLabel
dw OverworldMapChoices_!OverworldShuffleGtWlLabel
dw OverworldMapChoices_!OverworldShuffleAnglLabel
..Text:
db $C2,$11
db $D2,$00
db $AC,"!OverworldShuffleWtmaText",$AC,$AC,"!OverworldShuffleAnglText"
db $CB
db $AC,"!OverworldShuffleGtWlText"
db $CA
}
; Continent N.
{
.ContinentNN:
cop #$BF : dw ..Text
cop #$BE : db $42,$01 : dw ..Options
cop #$C5
..Options:
dw OverworldMapChoices_!OverworldShuffleEuroLabel
dw OverworldMapChoices_!OverworldShuffleEuroLabel
dw OverworldMapChoices_!OverworldShuffleNtVlLabel
dw OverworldMapChoices_!OverworldShuffleKresLabel
dw OverworldMapChoices_!OverworldShuffleAnkrLabel
..Text:
db $C2,$11
db $D2,$00
db $AC,"!OverworldShuffleEuroText",$AC,$AC,"!OverworldShuffleKresText"
db $CB
db $AC,"!OverworldShuffleNtVlText",$AC,$AC,"!OverworldShuffleAnkrText"
db $CA
}
; Continent NW.
{
.ContinentNW:
cop #$BF : dw ..Text
cop #$BE : db $02,$01 : dw ..Options
cop #$C5
..Options:
dw OverworldMapChoices_!OverworldShuffleDaoLabel
dw OverworldMapChoices_!OverworldShuffleDaoLabel
dw OverworldMapChoices_!OverworldShufflePymdLabel
..Text:
db $C2,$11
db $D2,$00
db $AC,"!OverworldShuffleDaoText"
db $CB
db $AC,"!OverworldShufflePymdText"
db $CA
}
; Continent SW.
{
.ContinentSW:
cop #$BF : dw ..Text
cop #$BE : db $53,$00 : dw ..Options
cop #$C5
..Options:
dw OverworldMapChoices_!OverworldShuffleCapeLabel
dw OverworldMapChoices_!OverworldShuffleCapeLabel
dw OverworldMapChoices_!OverworldShuffleEdLabel
dw OverworldMapChoices_!OverworldShuffleMoonLabel
dw OverworldMapChoices_!OverworldShuffleIncaLabel
dw OverworldMapChoices_!OverworldShuffleItryLabel
..Text:
db $C1,$02,$14   ; This + next line, instead of $C2,$11;
db $C7,$0E,$03   ; because "Where do you go?" doesn't fit with 5 options.
db $D2,$00
db $AC,"!OverworldShuffleCapeText",$AC,$AC,"!OverworldShuffleIncaText"
db $CB
db $AC,"!OverworldShuffleEdText",$AC,$AC,"!OverworldShuffleItryText"
db $CB
db $AC,"!OverworldShuffleMoonText"
db $CA
}

}


org $83b955
; mapdest.bin, where options in Lut_MapChoices take you
OverworldMapChoices:
{
.Cape:
cop #$26 : db $01 : dw $0178,$0040 : db $03,$00,$43
cop #$C5
.Ed:
cop #$26 : db $0A : dw $01F8,$02C0 : db $00,$20,$34
cop #$C5
.Moon:
cop #$26 : db $1A : dw $0150,$01A0 : db $00,$00,$22
cop #$C5
.Inca:
cop #$26 : db $1C : dw $0070,$0160 : db $00,$00,$22
cop #$C5
.DCst:
cop #$26 : db $30 : dw $0048,$0020 : db $03,$00,$21
cop #$C5
.Frej:
cop #$26 : db $32 : dw $0130,$0350 : db $00,$00,$45
cop #$C5
.Mine:
cop #$26 : db $3E : dw $00A8,$03D0 : db $80,$00,$42
cop #$C5
.Neil:
cop #$26 : db $49 : dw $0088,$00C0 : db $00,$00,$11
cop #$C5
.Nzca:
cop #$26 : db $4B : dw $0120,$0080 : db $00,$00,$44
cop #$C5
.SeaP:
cop #$26 : db $5A : dw $0090,$0070 : db $83,$00,$14
cop #$C5
.Mu:
cop #$26 : db $5F : dw $0088,$0050 : db $07,$00,$44
cop #$C5
.Angl:
cop #$26 : db $69 : dw $02A0,$00C0 : db $00,$00,$13
cop #$C5
.Wtma:
cop #$26 : db $78 : dw $0278,$0390 : db $00,$00,$45
cop #$C5
.GtWl:
cop #$26 : db $82 : dw $0020,$0090 : db $87,$00,$18
cop #$C5
.Euro:
cop #$26 : db $91 : dw $03D0,$0430 : db $06,$00,$54
cop #$C5
.Kres:
cop #$26 : db $A0 : dw $02C8,$01B0 : db $86,$00,$23
cop #$C5
.NtVl:
cop #$26 : db $AC : dw $01C0,$01D0 : db $06,$00,$22
cop #$C5
.Ankr:
cop #$26 : db $B0 : dw $01F8,$04C0 : db $80,$00,$54
cop #$C5
.Dao:
cop #$26 : db $C3 : dw $0010,$00E0 : db $07,$00,$23
cop #$C5
.Pymd:
cop #$26 : db $CC : dw $0010,$00D0 : db $87,$00,$44
cop #$C5
.Babl:
cop #$26 : db $DE : dw $0078,$00C0 : db $00,$00,$11
cop #$C5
.Itry:
cop #$26 : db $15 : dw $02D8,$0370 : db $00,$00,$45
cop #$C5
}


; Changes to make monster stats lookup the correct new tables.
org $83be52
db $82
org $83bfba
jsr $fe80
org $83bfc3
jsr $fe96
org $83c45d
jsr $fe8b



org $83c464
if !SettingZ3 == 1
jsr SR_HalveAPerDef    ; Instead of sbc $0adc, halves damage per DEF instead of reducing it by 1 per DEF
endif



org $83c849
LR_WriteSpriteIfVisible:
; Optimization: D=0, so $00??,x -> $??,x if x is LowRAM or ROM bank $00.
phb 
sep #$21
  lda $7f0008,x : pha : plb 
rep #$20
lda $14,x  ; sec provided by sep #$21 up there
  sbc $18,x : sec : sbc $1a : sta $18
lda $16,x : sec : sbc $1a,x : sec : sbc $1e : sta $1c
lda $0e,x : sta $04         ; $04 = SpriteFlags.
stz $02
lda $10,x : bit #$0080 : beq +
  bit #$0010 : bne +
lda $7F0028,x : beq ++
lsr : bcc ++
  lda #$0E00 : sta $02
++:
lda $10,x
+:
bpl +
  jmp $c928
+:
lda $7f000c,x : clc : adc #$0008 : tax 
lda $0000,x : and #$00ff : sta $10
.MegaLoop:
lda $0004,x : bit $04 : bpl +     ; >$c8b9
  xba
+:
and #$00ff : clc : adc $1c : cmp #$00f0 : bcs .NoFlushOffScreenSprite
  sbc #$0010 : sta $0423,y
lda $0006,x : eor $04 : ora $02 : sta $0424,y
lda $0002,x : bit $04 : bvc +
  xba 
+:
and #$00ff : clc : adc $18 : cmp #$0110 : bcs .FlushOffScreenSprite
  sbc #$000f
sep #$20
  sta $0422,y
xba : lsr : ror $00
lda $0001,x : lsr : ror $00
dec $0e : bne +     ; >$c909
  lda $00 : sta ($06)
  inc $06
  lda #$04 : sta $0e
+:
rep #$21
tya : adc #$0004 : tay
cpy #$0200 : beq .Finish     ; >$c91e
.TryNextSprite:
txa : adc #$0007 : tax
dec $10 : bne .MegaLoop     ; >$c8b0
.Finish:
plb 
rts 
.FlushOffScreenSprite:
lda #$e080 : sta $0422,y
.NoFlushOffScreenSprite:
clc
bra .TryNextSprite
warnpc $83c926



org $83CA55
LR_AnimateSprite:
; Similar optimizations.
phb          ;<--SR
sep #$20
  lda $7F0008,x : pha : plb
rep #$21
lda $28 : asl : adc $7F0006,x : tay
lda $2A : asl : asl : adc $0000,y : tay
lda $0000,y : bmi .SecAndReturn;+$79     ;[$83CAF0]
  sta $08
lda $0002,y : tay
  clc : adc #$0004 : sta $7F000C,x
lda $0002,y : bit $0E : bpl +
  xba
+:
sep #$20
  sta $1A
  xba
  sta $1E
rep #$20
lda $0000,y : bit $0E : bvc +
  xba
+:
sep #$20
sta $18
stz $19
xba
sta $1C
stz $1D
bpl +
  lda #$FF : sta $1D
+:
xba
bpl +
  lda #$FF : sta $19
+:
inc $2A
lda $13 : lsr : bcs .ClcAndReturn    ; Flag means "no-update hitbox".
lda $18 : sta $20    ; Do update hitbox.
lda $1C : sta $21
lda $1E : sta $23
lda $1A : bit $12 : bmi +    ; Flag means "no-trim hitbox Y".
  sbc #$09    ; Actually subtract 8, but c=0 is guaranteed.
+:
sta $22
.ClcAndReturn:
rep #$21
plb
rtl
.SecAndReturn:
rep #$20
stz $2A
sec
plb
rtl
warnpc $83CAF5



org $83d0db
; Extensive modifications to this routine.
SR_FixMapAndSecIfMonDead:
phy
phx
sta $0000
lsr : lsr : lsr : tay
lda #$0000
sep #$20
lda $0000 : and #$07 : tax
if !SettingDungeonShuffle == 0    ; In dungeon shuffle, monsters always respawn upon entering a room.
lda.l Lut_PowersOfTwo83,x : and $0A80,y : bne .MonIsDead
endif
clc
rep #$20
plx
ply
rts
.MonIsDead:
if !SettingOrbRando > 0
rep #$20
bra .DoneOrSkippedRearrange
else
lda $03,s : tay    ; High byte of A and Y both are guaranteed to be 0.
lda [$3E],y
rep #$20
beq .DoneOrSkippedRearrange
jsl LR_GetItemId8ForMonsterItemFlagA
jsl $82a363    ; jsl LR_StageMapRearrange
bcs .DoneOrSkippedRearrange
ldy $3E : phy
ldy $40 : phy
jsl $82a220    ; jsl LR_DoMapRearrange
ply : sty $40
ply : sty $3E
endif
.DoneOrSkippedRearrange:
sec
plx
ply
rts
warnpc $83d125
org $83d125
Lut_PowersOfTwo83:
db $01,$02,$04,$08,$10,$20,$40,$80
warnpc $83d12d


org $83cffb
jsr $fed0    ; Another monster stat lookup.


org $83d003
jsr $fe80    ; jsr to lookup for new stat blocks


org $83e03a
nop : nop    ; Load Firebird assets in every map, in case Early Firebird is enabled.


org $83ef97
; In case I've missed any explicit "jsl $83ef97" in the code.
LR_GiveItemAnchor:
jml LR_GiveNormalItemA8OrSec
warnpc $83f08d


org $83f208
; Pyramid Guy hook to show journal text
cop #$BF : dw $9e1a
rtl




org $83faee
SR_HalveAPerDef:
phx
ldx $0ADC
-:
cpx #$0000 : beq +
lsr a
dex
bra -
+:
plx
cmp #$0000  
rts


org $83fdc0
; startmenu.bin
{
pha
cop #$D0 : db $F5,$01 : dw $fdd4
cop #$D0 : db $F5,$01 : dw $fdd4   ; repetition is a bug
pla
lda #$2EE1
jmp $81d9
; org $83ffd4, show room reward type
phb
lda #$7f00 : pha : plb : plb
lda #$2ee1 : sta $0406
inc : sta $0408
inc : sta $0446
lda #$6ee0 : sta $040c
inc : sta $040a
inc : sta $044c
lda #$aee1 : sta $04c6
inc : sta $04c8
inc : sta $0486
lda #$eee1 : sta $04cc
inc : sta $04ca
inc : sta $048c
lda #$32e8 : sta $0448
inc : sta $044a
inc : sta $0488
inc : sta $048a
plb
pla
ldx #$0000
dec : beq ++
dec : beq +
cop #$BD : dl $81ff90
bra +++
+:
cop #$BD : dl $81ff80
bra +++
++:
cop #$BD : dl $81ff70
+++:
jmp $8248
}

org $83fe50
SR_GetHerbHealAmount:
lda $0B24 : beq +++
  dec : beq ++
  dec : beq +
if !SettingZ3 == 0
lda #$0004
else
lda #$0008
endif
bra ++++
+:
if !SettingZ3 == 0
lda #$0006
else
lda #$000e
endif
bra ++++
++:
if !SettingZ3 == 0
lda #$0008
else
lda #$0028
endif
bra ++++
+++:
lda #$0028 ;: bra ++++
++++:
rts
warnpc $83fe6e

org $83fe80
; Routines to look up stats in new, non-Intermediate tables.
; HP
jsr $fead
phx
tyx
lda $820000,x
plx
rts
; STR
jsr $fead
phx
tyx
lda $820001,x
plx
rts
; DEF
jsr $fead
phx
tyx
lda $820002,x
plx
rts
; GEM, the only one referenced from another bank, has to be a LR instead of an SR.
tay
jsr $FEAD
phx
tyx
lda $820003,x
plx
rtl
; This is $fead and converts, if applicable, a hardcoded stat block address to the new format.
cpy #$B000 : bcs +
  tya : beq +
    sec : sbc #$ABF0 : clc : jsr $FED0 : tay
+:
rts

org $83fed0
pha
lda $0B24 : beq +++
  dec : beq ++
    dec : beq +
      pla : adc #$F670
      bra ++++
+:
    pla : adc #$F4B0
    bra ++++
++:
  pla : adc #$F2F0
  bra ++++
+++:
pla : adc #$F130
++++:
rts





table "table_dialogue.txt",rtl
org $83ff00
Text_UseJewelOHKO:
db $d3
db "Will drops the HP Jewel.",$cb
db "It shatters into a",$cb
db "million pieces.",$cb
db "Whoops."
db $c0

TextShadowsFormUnlocked:
table "table_dialogue.txt",rtl
db $d3
db $cd : dl TextLongShadowsFormUnlocked
db $c0

}



; Bank $84
{

org $848377    ; Fisherman only appears at the east side of the docks.
cop #$D0 : db $10,$01 : dw $83aa
nop

org $848468
; Fisherman
%MTryGiveItemAndFlag(!CapeFisherItem, $d7)
rtl

org $848a03
db $10   ; Seth's house flag

org $848a8c
db $35 : dw $1000
ECapeTeacher:
lda #$0200 : tsb $12
cop #$C0 : dw .OnInteract
cop #$0B
cop #$C1
rtl
.OnInteract:
cop #$BF : dw .Text
cop #$CC : db $38
rtl
.Text:
db $d3
;if !StatuesRequiredCount == 0
;db "No statues required!"
;elseif !StatuesRequiredCount == 1
;db "You need Statue "
;else
;db "You need Statues ",$cb
;endif
db !TextTeacherStatuesString
db $c0


; No friend actors in school (redundant?)
org $848d25
db $e0,$6b
org $848d72
db $e0,$6b
org $848d99
db $e0,$6b


org $84922f
cop #$C0 : dw TutorialNpcOnInteract

org $84928a
db $10   ; Lola flag 1

org $849873
db $10   ; Lola flag 2

org $849985
rtl      ; Skip Lola's Melody cutscene

org $8499d8
; Lola
{
cop #$D0 : db $35,$01 : dw LolaGotItem
%MTryGiveItemAndFlag(!CapeLolaItem, $35)
rtl
LolaGotItem:
cop #$BF : dw $9d94
rtl
}

org $84afb6
db $e0,$6b   ; Disable playing cards (redundant?)

org $84b067
db $10,$00   ; Disable Cape cave friend 1

org $84b06c
db $e0,$6b   ; Disable cave Lance (redundant?)

org $84b459
db $e0,$6b   ; Disable cave Seth (redundant?)

org $84b465
db $10,$00   ; Disable Cape cave friend 2

org $84b8b4
cop #$D0 : db $10,$01 : dw $b962   ; Change Erik's code path in Cape
org $84b968
cop #$C0 : dw $b9a5    ; Change Erik's interaction in Cape

org $84b9a5
; seaside.bin, Erik's dialogue in Seaside Cave
{
ErikOnInteract:
cop #$D0 : db $12,$01 : dw ErikAskWhere
cop #$D0 : db $11,$01 : dw ErikSetTravelFlag
cop #$BF : dw TextErikNoTravel
rtl
ErikSetTravelFlag:
cop #$CC : db $12
cop #$BF : dw TextErikFirstTravel
ErikAskWhere:
cop #$BF : dw TextErikWhereTravel
cop #$BE : db $42,$01 : dw ErikTravelOptions
ErikTravelOptions:
dw ErikCancel
dw ErikCancel,        ErikToWatermia
dw ErikToDiamondCoast,ErikToSouthCape
dw ErikToSouthCape    ; unused, does not appear due to 4x2 restriction
ErikCancel:
cop #$BF : dw TextErikCancel
rtl
ErikToWatermia:
cop #$26 : db $78 : dw $0278,$0390 : db $00,$00,$45
cop #$C5
ErikToSeaPalace:
cop #$26 : db $5a : dw $0090,$0070 : db $83,$00,$14
cop #$C5
ErikToDiamondCoast:
cop #$26 : db $30 : dw $0048,$0110 : db $03,$00,$21
cop #$C5
ErikToSouthCape:
cop #$26 : db $02 : dw $0070,$0080 : db $03,$00,$11
cop #$C5
TextErikNoTravel:
db $C2,$0A,$C2,$03,$44,$A2,$88,$8A,$2F,$AC,$48,$AC,$82,$80,$8D,$AC,$D6,$9B,$63,$84,$A4,$87,$AC
db $CB
db $D6,$8E,$D6,$D6,$82,$80,$A6,$84,$2B,$AC,$81,$A5,$A4,$AC,$48,$AC
db $CB
db $D6,$82,$D6,$A4,$4C,$8E,$A2,$A3,$84,$AC,$42,$8E,$83,$84,$2A
db $C0
TextErikFirstTravel:
db $C2,$0A,$C2,$03,$44,$A2,$88,$8A,$2F,$AC,$4E,$87,$AC,$86,$A2,$84,$80,$A4,$2B,$AC,$A9,$8E,$A5,$AC,$D6,$A4
db $CB
db $4C,$8E,$A2,$A3,$84,$AC,$42,$8E,$83,$84,$0D,$AC,$D6,$2B,$A3,$84,$84,$AC
db $CB
db $D6,$F7,$63,$84,$A4,$87,$AC,$88,$A3,$AC,$A3,$80,$A9,$88,$8D,$86,$4F,$AC,$CF,$CE,$C2,$0A,$C2,$05,$D5,$00,$63,$84,$A4,$87,$2F,$AC,$D6,$5C,$48,$AC,$82,$80,$8D,$AC,$D6,$E7
db $CB
db $A9,$8E,$A5,$AC,$80,$82,$A2,$8E,$A3,$A3,$AC,$A4,$87,$84,$AC,$A3,$84,$80,$2A,$2A,$2A,$AC
db $C0
TextErikWhereTravel:
db $D3,$C2,$05,$D5,$00,$67,$87,$84,$A2,$84,$0E,$83,$AC,$A9,$8E,$A5,$AC,$D6,$A5,$A4,$8E,$AC,$86,$8E,$0D
db $CB
db $AC,$D6,$42,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$D6,$0E,$82,$8E,$80,$A3,$A4
db $CB
db $AC,$67,$80,$A4,$84,$A2,$8C,$88,$80,$AC,$AC,$AC,$AC,$D6,$47,$42,$80,$A0,$84
db $CA
TextErikUnusedJunk:
db $8E,$A7,$84,$A2,$AC
db $CB
db $AC,$63,$84,$80,$AC,$D7,$93,$AC,$AC,$AC
db $CA
TextErikCancel:
db $CE,$C2,$05,$D5,$00,$63,$84,$A4,$87,$2F,$AC,$D6,$63,$A4,$87,$80,$8D,$8A,$A3,$AC,$85,$8E,$A2
db $CB
db $8D,$8E,$A4,$88,$82,$88,$8D,$86,$AC,$8C,$84,$2A,$2A,$2A,$AC,$AC,$AC
db $C0
}

org $84bca9
db $10   ; Will's house flag 1

org $84bccc
db $10   ; Will's house flag 2

org $84bcda
db $10   ; Lance's house flag

org $84bce8
db $10   ; Erik's house flag

org $84bcf6
db $10   ; Seaside cave flag another one

org $84be3d
db $10   ; Seaside cave flag

org $84be6a
db !Map02Exit01

org $84c20e
%MTryGiveItemAndFlag(!ECHiddenGuardItem, $d8)
rtl

org $84c297
db $c0   ; "fix hidden guard text box"

org $84c3d4
cop #$C0 : dw $c406    ; Skip first half of Edward interaction

org $84c4fb
; edward.bin, Edward's dialogue
{
db $D3,$46,$8E,$AC,$A4,$8E,$AC,$89,$80,$88,$8B,$2A
db $CB
db $46,$8E,$AC,$83,$88,$A2,$84,$82,$A4,$8B,$A9,$AC,$A4,$8E,$AC,$89,$80,$88,$8B,$2A,$CF,$43,$8E,$AC,$8D,$8E,$A4,$AC,$A0,$80,$A3,$A3,$AC,$46,$8E,$2A
db $CB
db $43,$8E,$AC,$8D,$8E,$A4,$AC,$82,$8E,$8B,$8B,$84,$82,$A4,$AC,$22,$20,$20
db $CB
db $83,$8E,$8B,$8B,$80,$A2,$A3,$2A
db $C0
}

org $84c6af    ; edward2.bin, Edward interaction QoL
cop #$9C : dl $84c721 : dw $2000
cop #$0C
cop #$C0 : dw $0000
cop #$85 : db $20, $04, $12
cop #$8A
cop #$86 : db $1f, $04, $12
cop #$8A
cop #$81 : db $20,$12
cop #$89
cop #$80 : db $1c
cop #$89
lda #$0800 : trb $10
bra +
nop : nop
+:
cop #$CC : db $0b
cop #$D2 : db $0c,$01
cop #$DA : db $0b

org $84c746
db $10    ; Don't set a flag upon talking to Edward

org $84c755
db !MapPrisonWarpString

org $84caf5   ; Castle guard top floor text
db $d3
db "!SpoilerTextCastleGuard"
db $c0

org $84cb5e
db $e0,$6b    ; Disable Castle Kara (redundant?)

org $84d0da
; Castle basement barrel
{
cop #$C0 : dw CastleBasementBarrelInteract
cop #$C1
rtl
CastleBasementBarrelInteract:
cop #$D0 : db $46,$00 : dw CastleBasementBarrelGiveItem
cop #$E0
CastleBasementBarrelGiveItem:
%MTryGiveItemAndFlag(!ECBasementItem, $46)
rtl
}

org $84d1a0
; castleguard.bin, the jailer's dialogue
{
cop #$C0 : dw $d1ce
cop #$BC : db $00,$08
---:
cop #$0B
cop #$0D : db $00,$01
cop #$0D : db $00,$FF
cop #$D2 : db $01,$01
cop #$0C
cop #$10 : db $10,$3b
cop #$10 : db $10,$3c
lda #$0008 : sta $09b2
cop #$DA : db $1d
cop #$CE : db $01
bra ---
cop #$BF : dw $d1d6
cop #$CC : db $01
rtl
db $C2,$0B,$64,$87,$88,$A3,$AC,$88,$A3,$AC,$A4,$87,$84,$AC,$A0,$A2,$88,$A3,$8E,$8D,$2A
db $CB
db $48,$8D,$8D,$8E,$82,$84,$8D,$A4,$A3,$AC,$D6,$78,$84,$8D,$A4,$84,$A2,$2A
db $C0
}

; Several tweaks to skip the prison cell cutscene.
org $84d205
cop #$D0 : db $24,$01 : dw PrisonCutsceneSkipPoint

org $84d22a
nop : nop : nop : nop   ; Skip Will's prison chatter

org $84d234
PrisonCutsceneSkipPoint:
cop #$D0 : db $23,$00 : dw $d2d6
cop #$E0

org $84d329
; Hamlet
%MTryGiveItemAndFlag(!EDHamletItem,$23)
cop #$D0 : db $23,$01 : dw HamletItemGiverDie
rtl
HamletItemGiverDie:
cop #$E0
org $84db15
cop #$E0

org $84dc5e
db $d3,$60,$8b,$84,$80,$a3,$84,$2a,$2a,$2a,$ac,$d7,$ad,$cb,$63,$8c,$80,$a3,$87,$4c,$80,$8d,$88,$80,$82,$ac,$48,$0e,$8c,$ac,$d6,$fd,$cb,$85,$8e,$a2,$ac,$87,$88,$8c,$2a,$2a,$2a,$c0

org $84e06e
db $e0,$6b    ; Disable Itory Kara (redundant?)

org $84e1b7
db $e0,$6b    ; Disable Lilly's-house Kara (redundant?)

org $84e2a3
; itory.bin, modified itory entrance handler
{
db $00 : dw $3000
EItoryEntranceHandler:
cop #$45 : db $20,$30,$40,$40 : dw .PlayerInArea
cop #$E0
.PlayerInArea:
cop #$C1
cop #$D0 : db $40,$01 : dw .DoEnterItory
cop #$40 : dw $0f01 : dw .TryLeaveItory
rtl
.DoEnterItory:
lda #$1000 : tsb $10
lda #$eff0 : tsb $065a
lda #$0380 : sta $2130
cop #$3C : dl $80b7ce
cop #$DA : db $af
cop #$CC : db $01
cop #$CA : db $10
lda $06c2 : sec : sbc #$0010 : sta $06c2
ldy $09aa
lda $0016,y : sec : sbc #$0010 : sta $0016,y
lda $16 : sec : sbc #$0010 : sta $16
cop #$CB
lda #$0300 : sta $06dc
cop #$CE : db $01
cop #$DA : db $3b
cop #$3C : dl $80b7d8
cop #$DA : db $9d
cop #$DA : db $29
lda #$eff0 : trb $065a
lda #$0800 : tsb $10
cop #$82 : db $1e,$11
cop #$89
cop #$81 : db $21,$01
cop #$89
cop #$86 : db $1e,$02,$01
cop #$8A
lda #$cff0 : trb $065a
cop #$85 : db $21,$06,$01
cop #$8A
cop #$82 : db $1e,$11
cop #$89
cop #$85 : db $21,$02,$01
cop #$8A
cop #$86 : db $1f,$06,$12
cop #$8A
cop #$81 : db $21,$11
cop #$89
cop #$80 : db $1d
cop #$89
lda #$0800 : trb $10
cop #$D2 : db $04,$01
lda #$0001 : jsl $80c6e4
cop #$80 : db $1a
cop #$89
cop #$BF : dw $e53c
lda #$0800 : tsb $10
cop #$86 : db $1f,$02,$12
cop #$8A
cop #$86 : db $1f,$04,$12
cop #$8A
cop #$E0
.TryLeaveItory:
cop #$45 : db $2c,$36,$2f,$39 : dw ..DoNothing
cop #$66 : dw $00c0,$02c0 : db !OverworldShuffleItryMenuId
cop #$C1
..DoNothing:
rtl
}

org $84e5a6
db $6f    ; Lilly change 1
org $84e5ac
dw $e5ff  ; Lilly changes 2
cop #$0B
rtl

org $84e5ff
; lilly.bin, Lilly NPC
{
cop #$D6 : db $17 : dw $e60c
cop #$BF : dw $e617
rtl
cop #$CC : db $37
cop #$CC : db $6f
cop #$D5 : db $17
cop #$BF : dw $e653
rtl
db $C2,$0B,$C2,$02,$D6,$2A,$48,$AC,$D7,$7A,$A4,$87,$84,$AC,$8D,$84,$82,$8A,$8B,$80,$82,$84
db $CB
db $4B,$80,$8D,$82,$84,$AC,$86,$80,$A6,$84,$AC,$8C,$84,$4F,$AC,$48,$AC,$D6,$91
db $CB
db $A3,$8E,$AC,$80,$A7,$85,$A5,$8B,$2A,$2A,$2A,$AC,$AC,$AC,$AC,$AC
db $C0
db $C2,$0B,$C2,$02,$D6,$2A,$4E,$87,$2B,$AC,$A9,$8E,$A5,$AC,$D6,$8F,$8C,$A9
db $CB
db $8D,$84,$82,$8A,$8B,$80,$82,$84,$4F,$AC,$D6,$58,$A9,$8E,$A5,$AC,$A3,$8E
db $CB
db $8C,$A5,$82,$87,$4F,$AC,$AC,$CF,$CE,$C2,$02,$4B,$84,$A4,$AC,$8C,$84,$AC,$89,$8E,$88,$8D,$AC,$A9,$8E,$A5,$2B,$AC,$48,$AC,$8C,$80,$A9,$AC,$81,$84
db $CB
db $8E,$85,$AC,$87,$84,$8B,$A0,$AC,$83,$8E,$A7,$8D,$AC,$A4,$87,$84,$AC,$A2,$8E,$80,$83,$4F
db $C0
db $CE,$C2,$02,$4B,$84,$A4,$AC,$8C,$84,$AC,$A0,$80,$82,$8A,$AC,$8C,$A9,$AC,$A4,$87,$88,$8D,$86,$A3,$2B
db $CB
db $D6,$1F,$85,$8B,$A9,$AC,$D6,$A1,$D6,$FE,$A0,$8E,$82,$8A,$84,$A4
db $CB
db $D6,$F6,$D6,$FF,$8D,$8E,$A4,$AC,$D6,$AB,$2F,$6F
db $C0
}

org $84e933
db $10   ; Itory elder is always visible

org $84e97a
cop #$BF : dw $e9ff    ; Itory elder just talks upon interaction
rtl

org $84e9ff
TextSpoilerItoryElder:
db $d3
db "!SpoilerTextItoryElder"
db $c0

org $84ef78
db $e0,$6b    ; Disable Itory Bill (redundant?)

org $84f0a7
db $e0,$6b    ; Disable Itory Lola (redundant?)

org $84f373
; Itory cave statue
%MTryGiveItemAndFlag(!ItoryCaveItem, $2d)
rtl

org $84f8b7
lda.w #$!MoonTribeTimeLimit    ; The code requires this input to be BCD, so e.g. 30 seconds = $30.

org $84fadf
; Moon Tribe cave statue
%MTryGiveItemAndFlag(!MoonTribeCaveItem, $48)
rtl

org $84fb50
; tutorial.bin, NPC who gives tutorial book
{
TutorialNpcOnInteract:
cop #$BF : dw $fb80
cop #$BE : db $02,$01 : dw $fb5a
dw $fb60
dw $fb60
dw $fb65
cop #$BF : dw $fba0
rtl
cop #$D6 : db $15 : dw $fb79
cop #$D4 : db $15 : dw $fb74
cop #$BF : dw $fbf0
rtl
cop #$BF : dw $fc10
rtl
cop #$BF : dw $fbd0
rtl
db $ff,$ff   ; padding
db $D3,$67,$80,$8D,$A4,$AC,$80,$AC,$A4,$A5,$A4,$8E,$A2,$88,$80,$8B,$0D
db $CB
db $AC,$4D,$8E
db $CB
db $AC,$69,$84,$A3
db $CA
db $FF,$FF,$FF,$FF,$FF   ; padding
db $CE,$D6,$69,$A2,$88,$86,$87,$A4,$AB,$AC,$A2,$84,$80,$83,$88,$8D,$86,$0E,$A3,$AC
db $CB
db $85,$8E,$A2,$AC,$8D,$84,$A2,$83,$A3,$2A
db $C0
db $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF   ; padding
db $CE,$69,$8E,$A5,$AC,$80,$8B,$A2,$84,$80,$83,$A9,$AC,$D6,$98,$8E,$8D,$84,$4F,$AC
db $CB
db $46,$A2,$84,$84,$83,$A9,$2A,$2A,$2A
db $C0
db $FF   ; padding
db $CE,$69,$8E,$A5,$AC,$86,$8E,$A4,$AC,$A4,$87,$84,$AC,$41,$8B,$A5,$84,$AC,$49,$8E,$A5,$A2,$8D,$80,$8B,$4F
db $C0
db $FF,$FF,$FF,$FF,$FF   ; padding
db $CE,$D6,$68,$88,$8D,$A6,$84,$8D,$A4,$8E,$A2,$A9,$0E,$A3,$AC,$85,$A5,$8B,$8B,$AB,$AC
db $CB
db $8C,$80,$A4,$84,$2A
db $C0
}

}



; Bank $85
{
org $858188
nop : nop : nop : nop    ; Don't lock out Castoth on gold ship

org $8583c9
db $80,$0a    ; Gold Ship ladder NPC spawns away from ladder

org $8583cb
db $10   ; Gold Ship ladder NPC checks for Mystic Statue get

org $8584a9
; goldship.bin
{
EGoldShipPilot_OnInteract:
cop #$BF : dw Text_GoldShipOfferTravel
cop #$BE : db $02,$01 : dw .Options
.Options:
  dw .SayNo
  dw .SayNo, .SayYes
.SayNo:
cop #$BF : dw Text_GoldShipDeclineTravel
rtl
.SayYes:
cop #$26 : db !MapShipExitString ; $30 : dw $0048,$0110 : db $03,$00,$21
cop #$C5
Text_GoldShipOfferTravel:    ; "Ready to set sail?" etc.
db $D3,$62,$84,$80,$83,$A9,$AC,$A4,$8E,$AC,$A3,$84,$A4,$AC,$A3,$80,$88,$8B,$0D,$CB
db $AC,$4D,$8E,$CB
db $AC,$69,$84,$A3,$CA
Text_GoldShipDeclineTravel:    ; "Come back when you're ready"
db $CE,$D6,$09,$D6,$73,$D6,$F6,$CB
db $D6,$FF,$A2,$84,$80,$83,$A9,$2A,$C0
Text_GoldShipCantTravel:    ; "I'd offer you passage, but" etc.
db $D3,$48,$0E,$83,$AC,$8E,$85,$85,$84,$A2,$AC,$A9,$8E,$A5,$AC,$A0,$80,$A3,$A3,$80,$86,$84,$2B,$AC,$81,$A5,$A4,$CB
db $80,$AC,$D6,$9C,$8C,$8E,$8D,$A3,$A4,$84,$A2,$AC,$88,$A3,$AC,$82,$A5,$A4,$A4,$88,$8D,$86,$CB
db $8E,$85,$85,$AC,$80,$82,$82,$84,$A3,$A3,$AC,$A4,$8E,$AC,$8C,$A9,$AC,$A3,$87,$88,$A0,$2A,$C0

EGoldShipPilotAlternate:
db $02 : dw $1000
cop #$0B
cop #$C0 : dw EGoldShipPilot_OnInteract
rtl
}

org $8586a3   ; Map transition upon sleeping in Inca ship
cop #$26 : db $30 : dw $0048,$0020 : db $03,$00,$21

org $858a04
dw $0010 ; Gold Ship queen flag

org $858a1f
db $10   ; Gold Ship queen flag

org $858a29
db $10   ; Gold Ship queen flag

org $858ac0   ; Gold Ship queen text
db $d3
db "!SpoilerTextGoldShipQueen"
db $c0

org $859643
db $10,$00    ; "Seth" actor flag

org $859652
cop #$D0 : db $e0,$01 : dw IncaSethAlreadyGivenItem
%MTryGiveItemAndFlag(!IncaGoldShipItem, $e0)
rtl
IncaSethAlreadyGivenItem:
cop #$BF : dw $96c1
rtl


org $85aa74
cop #$C0 : dw TurboOnInteract

org $85ad6b
db $d3
db "!SpoilerTextDiamondCoast"
db $c0

org $85b683    ; Woman on roof who can warp you upward
cop #$BF : dw .TextAskChoice
cop #$BE : db $02,$01 : dw .ChoiceOptions
.ChoiceOptions:
  dw .ChooseDecline
  dw .ChooseDecline, .ChooseAccept
.ChooseDecline:
cop #$BF : dw ..Text
rtl
..Text:
db $ce
db $c8
db $c0
.ChooseAccept:
cop #$26 : db $32 : dw $0360, $0170 : db $00,$00,$45
rtl
.TextAskChoice:
db $cd : dl TextRoofWarpingWomanAskChoice
db $ca
warnpc $85b6c0


org $85b6d2
%MTryGiveItemAndFlag(!FrejEastSlaverItem, $e1)
rtl

org $85b880
FrejSnitchSlaverInteraction:
cop #$BF : dw TextFrejSnitchGreeting
cop #$BE : db $02,$02 : dw .HaveYouSeenOptions
.HaveYouSeenOptions:
  dw ..SayNo, ..SayYes, ..SayNo
..SayNo:
cop #$BF : dw TextFrejSayNotSeen
rtl
..SayYes:
cop #$BF : dw TextFrejSaySeen
cop #$BE : db $02,$02 : dw .TellWhereOptions
.TellWhereOptions:
  dw ..SayNo, ..SayYes, ..SayNo
..SayNo:
cop #$BF : dw $b9cb
rtl
..SayYes:
cop #$D0 : db $59,$00 : dw .PlayerDoesNotKnow
%MTryGiveItemAndFlag(!FrejSnitchItem, $5a)
cop #$D0 : db $5a,$00 : dw .InvFull
cop #$CC : db $5a
lda #$eff0 : tsb $065a
.InvFull:
rtl
.PlayerDoesNotKnow:
cop #$BF : dw $b9af
rtl
TextFrejSnitchGreeting:
db $d3
db "A 'FRIEND' escaped.",$cb
db "Have you seen him?",$cb
db " Yes",$cb
db " No",$ca
TextFrejSayNotSeen:
db $ce
db "Useless.",$c0
TextFrejSaySeen:
db $ce
db "I'll give you something",$cb
db "if you tell me where.",$cb
db " Yes, I'm a bad person",$cb
db " Snitches get stitches yo",$ca
warnpc $85ba0c

org $85bfdb
dw $bfde    ; Slave text target

org $85c331
; "Crap, I left the door unlocked again..."
db $42,$a2,$80,$a0,$2b,$ac,$48,$ac,$d6,$ae,$a4,$87,$84,$ac,$d7,$58,$cb,$a5
db $8d,$8b,$8e,$82,$8a,$84,$83,$ac,$80,$86,$80,$88,$8d,$2a,$2a,$2a,$c0

; Disable Freejia hotel friends (redundant?)
org $85c45a
db $e0,$6b
org $85c5b7
db $e0,$6b
org $85c782
db $e0,$6b
org $85cb34
db $e0,$6b

org $85cf31
EFreejiaBin2_OnInteract:
cop #$D0 : db $53,$01 : dw .GotItemAlready
%MTryGiveItemAndFlag(!FrejBin2Item, $53)
.GotItemAlready:
rtl

org $85cf85
{
db $25 : dw $1000
EFreejiaBin1:
lda #$0200 : tsb $12
cop #$C0 : dw .OnInteract
cop #$0B
cop #$C1
rtl
.OnInteract:
cop #$D0 : db $54,$01 : dw .GotItemAlready
%MTryGiveItemAndFlag(!FrejBin1Item, $54)
.GotItemAlready:
rtl
}

org $85d223
if !KaraLocation != 2
db $28
else
db $1a
endif
dw $1000
EMineSam:
nop : nop : nop : nop : nop : nop
lda #$0200 : tsb $12
cop #$0B
if !KaraLocation != 2
cop #$9C : dl $85D49E : dw $0100   ; slave chain
cop #$C0 : dw $D299
else
cop #$C1
jmp $D24B
endif

org $85d24f
rtl   ; No singing Sam.

org $85d2a4
%MTryGiveItemAndFlag(!MineSamItem, $5e)
rtl

org $85d4d0
EMorgueItemPickup_OnInteract:
cop #$D0 : db $5d,$01 : dw .GotItemAlready
%MTryGiveItemAndFlag(!MineMorgueItem, $5d)
rtl
.GotItemAlready:
cop #$E0

org $85d62d
; Allow Mine DS to contain an ability.
cop #$9C : dl $88d6ac : dw $2b00
lda $0e : sta $24
lda #$2000 : sta $0e
cop #$E0    ; Possibly unsafe?

org $85d796
cop #$CC : db $05   ; Use temp flag to trigger caved-in miner.

org $85d7cb
{  ; Caved-in slave miner.
cop #$BC : db $08,$00
lda #$2000 : tsb $10
cop #$80 : db $0c
cop #$89
cop #$D2 : db $05,$01
lda #$2000 : trb $10
lda #$eff0 : tsb $065a
cop #$DA : db $77
cop #$CE : db $00
EMineWallSlave_TryGiveItem:
%MTryGiveItemAndFlag(!MineWallSlaveItem, $d9)
cop #$D0 : db $d9,$00 : dw EMineWallSlave_InvWasFull
lda #$EFF0 : trb $065A
lda #$0080 : tsb $09EC
cop #$86 : db $0D, $08, $01
cop #$8A
lda #$0080 : trb $09EC
cop #$E0
EMineWallSlave_InvWasFull:
lda #$0200 : tsb $12
cop #$C0 : dw EMineWallSlave_TryGiveItem
cop #$C1
rtl
}

org $85d89a
; neilscottage.bin, Neil in his cottage
{
db $13 : dw $1000
ENeilInCottage:
cop #$0B
cop #$C0 : dw .OnInteract
cop #$C1
rtl
.OnInteract:
cop #$D0 : db $15,$01 : dw .OfferTravel
cop #$D0 : db $14,$01 : dw .FirstTravel
cop #$BF : dw Text_NeilCantTravel
rtl
.FirstTravel:
cop #$CC : db $15
cop #$BF : dw Text_NeilFirstTravel
.OfferTravel:
cop #$BF : dw Text_NeilOfferTravel
cop #$BE : db $53,$01 : dw ..Options
..Options:
  dw .Cancel
  dw .Cancel, .ToEuro
  dw .ToDao, .ToNeils
  dw .ToBabel
.Cancel:
cop #$BF : dw Text_NeilDeclineTravel
rtl
.ToEuro:
cop #$26 : db $95 : dw $0260,$0080 : db $03,$01,$13
rtl
.ToDao:
cop #$26 : db $C8 : dw $0078,$00C0 : db $00,$00,$11
rtl
.ToNeils:
cop #$26 : db $49 : dw $0088,$00C0 : db $00,$00,$11
rtl
.ToBabel:
cop #$26 : db $DE : dw $0078,$00C0 : db $00,$00,$11
rtl

Text_NeilCantTravel:
db $C2,$0A,$C2,$06,$D6,$36,$D6,$1C,$D7,$39,$48,$0E,$83,$AC,$8B,$8E,$A6,$84,$CB
db $A4,$8E,$AC,$D6,$E7,$A9,$8E,$A5,$AC,$A5,$A0,$AC,$88,$8D,$AC,$8C,$A9,$CB
db $A0,$8B,$80,$8D,$84,$2B,$AC,$81,$A5,$A4,$2A,$2A,$2A,$AC,$AC,$AC,$CF
db $D7,$01,$48,$AC,$85,$8E,$A2,$86,$8E,$A4,$AC,$87,$8E,$A7,$CB
db $A4,$8E,$AC,$85,$8B,$A9,$AC,$88,$A4,$4F,$AC,$c0
Text_NeilFirstTravel:
db $C2,$0A,$C2,$06,$D6
db $36,$D6,$1C,$48,$AC,$A2,$84,$8C,$84,$8C,$81,$84,$A2,$AC,$87,$8E,$A7,$CB
db $A4,$8E,$AC,$A0,$88,$8B,$8E,$A4,$AC,$8C,$A9,$AC,$A0,$8B,$80,$8D,$84,$4F,$AC,$64,$87,$80,$8D,$8A,$A3,$CB
db $80,$AC,$8B,$8E,$A4,$4F,$AC,$AC,$AC,$C0
Text_NeilOfferTravel:
db $D3,$C2,$06,$67,$87,$84,$A2,$84,$0E,$83,$AC,$A9,$8E,$A5,$AC,$D6,$A5,$A4,$8E,$AC,$86,$8E,$0D,$CB
db $AC,$D6,$42,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$D6,$37,$AC,$AC,$AC,$CB
db $AC,$44,$A5,$A2,$8E,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$41,$80,$81,$84,$8B,$AC,$64,$8E,$A7,$84,$A2,$AC,$CB
db $AC,$43,$80,$8E,$AC,$AC,$AC,$CA
Text_NeilDeclineTravel:
db $CE,$C2,$06,$48,$AC,$A4,$A2,$80,$A6,$84,$8B,$AC,$D7,$92,$A2,$84,$86,$A5,$8B,$80,$A2,$8B,$A9,$CB
db $81,$84,$A4,$A7,$84,$84,$8D,$AC,$8C,$A9,$AC,$A0,$8B,$80,$82,$84,$2B,$AC,$44,$A5,$A2,$8E,$2B,$CB
db $80,$8D,$83,$AC,$43,$80,$8E,$2A,$AC,$D6,$09,$A6,$88,$A3,$88,$A4,$AC,$8C,$84,$CB
db $80,$8D,$A9,$A4,$88,$8C,$84,$4F,$C0
}


org $85e647
; nazca.bin, the tile that ports you to the sky
{
db $00 : dw $3000
cop #$9C : dl $85e7d0 : dw $2000
cop #$D2 : db $10,$01
cop #$C0 : dw $e6ad
cop #$D2 : db $0f,$01
lda #$eff0 : tsb $065a
lda #$00e0 : sta $7f0010,x
cop #$CA : db $08
lda $7f0010,x
  sep #$20
    sta $2132
  rep #$20
  inc : sta $7f0010,x
cop #$DA : db $01
cop #$CB
cop #$C1
cop #$C1
cop #$C1
cop #$C1
cop #$C1
cop #$9C : dl $85e7a6 : dw $0300
cop #$DA : db $3b
cop #$C1
cop #$C1
lda #$0404 : sta $064a
cop #$26 : db !MapGardenEntranceString ; $4c : dw $0168,$0040 : db $83,$00,$22
cop #$C1
rtl

cop #$BF : dw $e71d
cop #$BE : db $02,$01 : dw $e6b7
  dw $e6bd
  dw $e6a0,$e6bd
cop #$BF : dw $e6c2
rtl

db $CE,$D6,$63,$8E,$8A,$80,$A9,$2A
db $C0
db $A4,$88,$8B,$84,$AC,$81,$A5,$A2,$88,$84,$83
db $CB
db $88,$8D,$AC,$A4,$87,$84,$AC,$A3,$80,$8D,$83,$2A,$2A,$2A,$CF,$D6,$61,$67,$88,$8B,$8B,$0E,$A3,$AC,$45,$8B,$A5,$A4,$84,$AC,$CB,$A4,$8E,$A5,$82,$87,$84,$83,$AC,$88,$A4,$2B,$AC,$D6,$D9,$CB,$A7,$80,$A3,$AC,$80,$AC,$A2,$A5,$8C,$81,$8B,$88,$8D,$86,$AC,$A3,$8E,$A5,$8D,$83,$4F,$C3,$00
db $C0
db $D3,$67,$80,$A2,$A0,$AC,$A4,$8E,$AC,$63,$8A,$A9,$AC,$46,$80,$A2,$83,$84,$8D,$0D
db $CB
db $AC,$69,$84,$A3
db $CB
db $AC,$4D,$8E
db $CA
}

org $85e80c
; Nazca exit to world map at edges.
cop #$66 : dw $0310,$0290 : db !OverworldShuffleNzcaMenuId
cop #$C1
rtl

; Disable Nazca friends (redundant?)
org $85e845
db $e0,$6b
org $85ec8f
db $e0,$6b
org $85eea5
db $e0,$6b
org $85efed
db $e0,$6b
org $85f1fd
db $e0,$6b






; "Put a Moon Tribe where the warp point is"
org $85f2f1
db $10
bra $0b
org $85f30c
cop #$C0 : dw $e6ad
bra $f5

org $85f356
; Sky Garden spirits and exit portal.
{
db $3c : dw $1000
ESGMoonTribe:
lda #$0200 : tsb $12
cop #$D0 : db $2a,$01 : dw .NotDead
cop #$E0
.NotDead:
cop #$C0 : dw .OnInteract
cop #$0B
cop #$C1
cop #$80 : db $3C : cop #$89
rtl
.OnInteract:
cop #$BF : dw Text_NazcaOfferTravel
cop #$BE : db $32,$01 : dw ..Options
..Options:
  dw .Cancel
  dw .Cancel, .ToSeaPalace
  dw .ToMoonTribe
.Cancel:
cop #$BF : dw Text_NazcaDeclineTravel
rtl
.ToNazca:
cop #$26 : db $4b : dw $0120,$0080 : db $00,$00,$44
stz $0ad4
rtl
.ToMoonTribe:
cop #$26 : db $1a : dw $0110,$00d0 : db $03,$00,$22
stz $0ad4
rtl
.ToSeaPalace:
cop #$26 : db $5a : dw $0090,$0070 : db $83,$00,$14
stz $0ad4
rtl

Text_NazcaDeclineTravel:
db $CE,$4A,$A5,$AC,$8A,$A5,$AC,$8A,$A5,$2A,$2A,$2A,$C0
Text_NazcaOfferTravel:
db $D3
db $67,$87,$84,$A2,$84,$0E,$83,$AC,$A9,$8E,$A5,$AC,$D6,$A5,$A4,$8E,$AC,$86,$8E,$0D,$CB
db $AC,$D6,$42,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$4C,$8E,$8E,$8D,$AC,$64,$A2,$88,$81,$84,$CB
db $AC,$63,$84,$80,$AC,$D7,$93,$CA

db $00 : dw $3000
ESGExitPortal:
cop #$45 : db $15,$03,$18,$05 : dw .PlayerInArea
rtl
.PlayerInArea:
cop #$40 : dw $0800 : dw .DoPort
rtl
.DoPort:
cop #$26 : db !MapGardenExitString ; $4b : dw $01e0,$02c0 : db $03,$00,$44
cop #$C1
rtl

}


org $85fed2
TurboOnInteract:
{
cop #$CC : db $01
cop #$D0 : db $11,$01 : dw .CanTravel
.NoTravel:
cop #$BF : dw .TextNoTravel
rtl
.CanTravel:
cop #$D0 : db $12,$01 : dw .OfferTravel
..FirstTravel:
cop #$CC : db $12
cop #$BF : dw .TextFirstTravel
.OfferTravel:
jml ErikAskWhere
.TextNoTravel:
db $d3
db "Woof woof!",$cb
db "(You don't happen to",$cb
db "know Morse Code, do you?)",$c0
.TextFirstTravel:
db $d3
db "Woof woof!",$cb
db "(Oh good, you know Morse",$cb
db "Code. Let's see what",$cb
db "Seth's up to!)",$c0
}

}



; Bank $86
{
org $868689
db $e0,$6b    ; Disable Lilly in SeaPal (redundant?)


org $8686fa
db $10   ; Lilly at Seaside Palace flag

org $868af5
%MTryGiveItemAndFlag(!SeaPalBuffyItem, $85)
rtl

org $868b01
rtl   ; Shorten Seaside NPC item get

; "Make coffin spoiler re-readable"
org $868ff3
dw $8ff5
org $868ffb
db $70, $e5
org $869092
cop #$CE : db $01
cop #$25 : db $2f,$0a
jmp $8ffd

org $869167
db $d3
db "!SpoilerTextSeaPalCoffin"
db $c0


org $8691AC
db $00 : dw $3002
ESeaPLillyAtCoffin:
cop #$D1 : dw $013B : db $01 : dw .CoffinOpenDoDie
cop #$BC : db $08, $00
cop #$C0 : dw .OnInteract
.AwaitInteractWithLilly:
cop #$D2 : db $02, $01
lda #$CFF0 : tsb $065A
lda #$2000 : trb $10
cop #$88 : dl $8EE000
lda $1014 : sta $14
lda $1016 : sec : sbc #$0010 : sta $16
cop #$85 : db $33, $04, $14
cop #$8A
cop #$84 : db $33, $04
cop #$8A
lda #$02C0 : sta $7F0018,x
lda #$009C : sta $7F001A,x
cop #$22 : db $33, $01
lda #$2000 : tsb $10
cop #$DA : db $3B
cop #$32 : db $3B
cop #$33
cop #$CD : dw $013B
cop #$DA : db $3B
lda #$00A0 : sta $16
lda #$2000 : trb $10
%MTryGiveItemAndFlag(!SeaPalCoffinItem, $13)    ; Surrogate flag $13 for this item.
cop #$D0 : db $13,$00 : dw .CancelItemGet
cop #$DA : db $03
lda #$CFF0 : tsb $065A
cop #$84 : db $33, $04
cop #$8A
lda $1014 : sta $7F0018,x
lda $1016 : sec : sbc #$0010 : sta $7F001A,x
cop #$22 : db $33, $01
lda #$2000 : tsb $10
lda #$CFF0 : trb $065A
.CoffinOpenDoDie:
cop #$E0
.CancelItemGet:
cop #$CF : dw $013B
cop #$CE : db $02
cop #$84 : db $33, $04
cop #$8A
lda $1014 : sta $7F0018,x
lda $1016 : sec : sbc #$0010 : sta $7F001A,x
cop #$22 : db $33, $01
lda #$2000 : tsb $10
lda #$CFF0 : trb $065A
cop #$25 : db $2B, $0A
jmp .AwaitInteractWithLilly
.OnInteract:
cop #$D0 : db $6f,$01 : dw ..WithLilly
cop #$BF : dw $92e2
rtl
..WithLilly:
cop #$BF : dw $930a
cop #$CC : db $02
rtl
warnpc $8692E2


org $869406
db $10    ; Lilly at Seaside Palace flag

org $869418
cop #$DA : db $01
nop : nop : nop : nop    ; "Purification event won't softlock if you don't have Lilly"

; "Speed up purification sequence"
org $869450
db $20
org $869456
db $04
org $86945d
db $01
org $86946f
db $03
org $869486
bra $10

org $869739
; mudoor.bin
{
cop #$28 : dw $0388, $00c8 : dw $9742
rtl
cop #$D1 : dw $0138 : db $01 : dw $9757
cop #$D6 : db $10 : dw $9750
cop #$E0
cop #$CD : dw $0138
cop #$D5 : db $10
cop #$26 : db !Map5EExit03
cop #$C5
}

org $8698b2
%MTryGiveItemAndFlag(!MuHopeStatue1Item, $79)
rtl

org $86995a
%MTryGiveItemAndFlag(!MuHopeStatue2Item, $7f)
rtl

org $8699c7
db $0e : dw $3000
EMuHopeRoomListener:   ; Speed this along for QoL.
{
EMuHopeRoomFlame = $869c14
EMuHopeRoomWizard = $869BDA

cop #$45 : db $10, $00, $20, $10 : dw EMuHopeRoomListenerRight
cop #$D0 : db $7B, $01 : dw .StatueAlreadyPlaced
cop #$D2 : db $7B, $01
cop #$A0 : dl EMuHopeRoomStatueSprite : dw $0080, $0058, $1000
lda #$CFF0 : tsb $065A
cop #$DA : db $0F
cop #$04 : db $1B
cop #$DA : db $10
cop #$3C : dl $80B7E2
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0020, $00C0, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $00E0, $00C0, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0040, $0090, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $00C0, $0090, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0070, $0070, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0090, $0070, $1800
cop #$DA : db $3B
cop #$A0 : dl EMuHopeRoomWizard : dw $0050, $00C8, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomWizard : dw $0070, $00C8, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomWizard : dw $0090, $00C8, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomWizard : dw $00B0, $00C8, $1800
cop #$DA : db $77
cop #$BF : dw TextMuHopeRoomWizard
cop #$08 : db $25, $25
cop #$DA : db $10
cop #$CC : db $02
cop #$DA : db $10
cop #$3C : dl $80B7EC
cop #$DA : db $10
stz $0688
lda #$CFF0 : trb $065A
cop #$E0
.StatueAlreadyPlaced:    ; org $869aae
cop #$A0 : dl EMuHopeRoomStatueSprite : dw $0080, $0058, $1000
cop #$E0

EMuHopeRoomStatueSprite:    ; org $869abb
cop #$80 : db $30
cop #$89
rtl

EMuHopeRoomListenerRight:    ; org $869ac1
cop #$D0 : db $7E, $01 : dw .StatueAlreadyPlaced
cop #$D2 : db $7E, $01
cop #$A0 : dl EMuHopeRoomStatueSprite : dw $0180, $0058, $1000
lda #$CFF0 : tsb $065A
cop #$DA : db $0F
cop #$04 : db $1B
cop #$DA : db $10
cop #$3C : dl $80B7E2
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0120, $00C0, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $01E0, $00C0, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0140, $0090, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $01C0, $0090, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0170, $0070, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomFlame : dw $0190, $0070, $1800
cop #$DA : db $3B
cop #$A0 : dl EMuHopeRoomWizard : dw $0150, $00C8, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomWizard : dw $0170, $00C8, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomWizard : dw $0190, $00C8, $1800
cop #$DA : db $10
cop #$A0 : dl EMuHopeRoomWizard : dw $01B0, $00C8, $1800
cop #$DA : db $77
cop #$BF : dw TextMuHopeRoomWizard
cop #$08 : db $25, $25
cop #$DA : db $10
cop #$CC : db $02
cop #$DA : db $10
cop #$3C : dl $80B7EC
cop #$DA : db $10
stz $0688
lda #$CFF0 : trb $065A
cop #$E0
.StatueAlreadyPlaced:    ; org $869b9d
cop #$A0 : dl EMuHopeRoomStatueSprite : dw $0180, $0058, $1000
cop #$E0

TextMuHopeRoomWizard:
db $d3 : db "Hey." : db $c0    ; Hope Room text
}

org $869c60
cop #$26 : db !MapVampEntranceString ; $67 : dw $0178,$01d0 : db $80,$01,$22   ; Vamps exit change.

; "Shorten Rama statue event"
org $869e50
db $10
org $869f26
db $00

; Prevent softlocks due to Rama spirits.
{
org $86a07a
rtl
org $86a082
rtl
org $86a08a
rtl
org $86a092
rtl
org $86a09a
rtl
org $86a0a2
rtl
}

org $86a2cb
cop #$E0   ; Faux-remove Erik from vamps' room.

org $86a43b
jsl LR_ForceChangeToWill    ; After vamps.
cop #$C1
lda $09AE : bit #$0800 : beq +
  rtl
+:
jmp $a466

org $86a4c9
cop #$26 : db $66 : dw $00f8,$01d8 : db $00,$00,$22   ; Vamps exit change.
cop #$C1
rtl

org $86ba36
; angelsign.bin, "Update sign to read "Passage to Mu""
{
db $D3
db $CB
db $AC,$AC,$AC,$AC,$6D,$AC,$60,$80,$A3,$A3,$80,$86,$84,$AC,$A4,$8E,$AC,$4C,$A5,$AC,$6D
db $CB
db $AC,$AC,$AC,$41,$84,$A7,$80,$A2,$84,$AC,$8E,$85,$AC,$A6,$80,$8C,$A0,$88,$A2,$84,$A3
db $C0
}

org $86bff7
; Clear monster killed flags and force change to Will in Angel's exterior.
db $00 : dw $3000
jsl $80b4cc    ; i.e. jsl LR_ClearMonsterKilledFlags
jsl LR_ForceChangeToWill
cop #$E0

org $86cede
stz $0aa6    ; Ishtar's game never closes.
rtl

org $86cef6
db $40,$86,$80,$88,$8d,$4f,$c0   ; Ishtar's post-win text.

; Kara's Portrait mods.
org $86d153
{
db $8a   ; Flag
org $86d15b
if !KaraLocation == 3
cop #$B6 : db $10
else
cop #$B6 : db $30 ; Portrait sprite needs high priority.
endif
org $86d169
cop #$D2 : db $8a,$01  ; Flag check
cop #$E0
org $86d25c
db $8a   ; Flag
org $86d27e
db "Hurry boy, she's waiting",$cb
db "there for you!",$c0
org $86d305
db "Kara's portrait. If only",$cb
db "you had Magic Dust...",$c0
}

org $86d8c6
; "Reset Ishtar's puzzle upon entry"
phd
cop #$48 : dec : bne +
  stz $0aa6
+:
jmp $da0c
nop : nop : nop : nop : nop : nop : nop : nop
nop : nop : nop : nop : nop : nop : nop
db $ad,$29,$0a,$29,$01,$fe,$8d,$29,$0a    ; ???

org $86d95e
lda $24 : cmp.w #!IshtarRoom1TargetWest : bcc $1B
  cmp.w #!IshtarRoom1TargetEast : bcs $16
lda $26 : cmp.w #!IshtarRoom1TargetNorth : bcc $0F
  cmp.w #!IshtarRoom1TargetSouth : bcs $0A

org $86d978
dw $db2c    ; Ishtar puzzle 1 success text

org $86d98a
lda $24 : cmp.w #!IshtarRoom2TargetWest : bcc $1A
  cmp.w #!IshtarRoom2TargetEast : bcs $15
lda $26 : cmp.w #!IshtarRoom2TargetNorth : bcc $0E
  cmp.w #!IshtarRoom2TargetSouth : bcs $09

org $86d9b4
lda $24 : cmp.w #!IshtarRoom3TargetWest : bcc $1A
  cmp.w #!IshtarRoom3TargetEast : bcs $15
lda $26 : cmp.w #!IshtarRoom3TargetNorth : bcc $0E
  cmp.w #!IshtarRoom3TargetSouth : bcs $09

org $86d9ce
dw $db2c    ; Ishtar puzzle 3 success text

org $86d9de
lda $24 : cmp.w #!IshtarRoom4TargetWest : bcc $1E
  cmp.w #!IshtarRoom4TargetEast : bcs $19
lda $26 : cmp.w #!IshtarRoom4TargetNorth : bcc $12
  cmp.w #!IshtarRoom4TargetSouth : bcs $0D

org $86d9f8
dw $dbc6    ; Ishtar puzzle 4 text

org $86d9fc
db $10   ; Ishtar's game never closes.

org $86dbc6
db $c2,$0a   ; Ishtar puzzle 4 text

org $86dc53
jmp $dd00    ; "Add checks for Will's hair in each room"
org $86dc5d
IshtarRoomDifferenceIsHair:
org $86dc66
IshtarRoomDifferenceIsNotHair:

org $86dc97
db $d3
db "!SpoilerTextIshtarsApprentice"
db $c0

org $86dd00    ; "Add checks for Will's hair in each room"
!HairCheckAddr1 = IshtarRoomDifferenceIsNotHair
!HairCheckAddr2 = IshtarRoomDifferenceIsNotHair
!HairCheckAddr3 = IshtarRoomDifferenceIsNotHair
!HairCheckAddr4 = IshtarRoomDifferenceIsNotHair
!{HairCheckAddr!{IshtarRoomWithHairDifference}} = IshtarRoomDifferenceIsHair
cop #$45 : db $10,$00, $20,$10 : dw !HairCheckAddr1
cop #$45 : db $30,$00, $40,$10 : dw !HairCheckAddr2
cop #$45 : db $50,$00, $60,$10 : dw !HairCheckAddr3
cop #$45 : db $70,$00, $80,$10 : dw !HairCheckAddr4
jmp IshtarRoomDifferenceIsNotHair

; Item collection tracker in map room.
{
table "table_dialogue.txt",rtl
TextItemCounterDisplay:
db $D3
db "_Items Collected:_"
db $C6 : dw $0002, $00f0
db "/"
db $C6 : dw $0002, $00f2
db $CB
if !SettingOrbRando > 0
db "__Orbs Collected:_"
db $C6 : dw $0002, $00f4
db "/"
db $C6 : dw $0002, $00f6
db $CB
endif
db "_____Dark Spaces:_"
db $C6 : dw $0002, $00f8
db $C0

; Format is:
; db <flags with high byte $00: normal items>
; db $ff
; db <flags with high byte $02: chests are $01-$2E, RJs are $80-$8f>
; db $ff
; db <monster orb numbers, $01 - $2A>
; db $ff
Lut_TrackerItemFlagsByArea:
.Pointers:
{
dw .Cape
dw .EdDg
dw .Itry
dw .Moon
dw .Inca
dw .Coast
dw .Frej
dw .Mine
dw .Neil
dw .SkGn
dw .SeaP
dw .Mu
dw .Angl
dw .Wtma
dw .GtWl
dw .Euro
dw .Kres
dw .NtVl
dw .Ankr
dw .Dao
dw .Pymd
dw .Babl
}
{
.Cape:
db $35,$d7
db $ff
db $80,$81
db $ff
db $ff
.EdDg:
db $23,$46,$d8
db $ff
db $01,$02,$03,$82
db $ff
db $01,$02,$03,$04,$05,$06,$07
db $ff
.Itry:
db $2d
db $ff
db $83
db $ff
db $ff
.Moon:
db $48
db $ff
db $ff
db $ff
.Inca:
db $32,$e0
db $ff
db $04,$05,$06,$07
db $ff
db $08,$09,$0a,$0b,$0c,$0d,$0e
db $ff
.Coast:
db $ff
db $84
db $ff
db $ff
.Frej:
db $53,$54,$5a,$e1
db $ff
db $85
db $ff
db $ff
.Mine:
db $5d,$5e,$a2,$a3,$d9
db $ff
db $09
db $ff
db $0f,$10,$11,$12,$13,$14
db $ff
.Neil:
db $ff
db $ff
db $ff
.SkGn:
db $ff
db $0a,$0b,$0c,$0d,$0e,$0f,$10,$11
db $ff
db $15,$16,$17,$18,$19,$1a
db $ff
.SeaP:
db $13,$85
db $ff
db $12,$13,$14
db $ff
db $ff
.Mu:
db $79,$7f
db $ff
db $15,$16,$17,$18,$2e
db $ff
db $1b,$1c,$1d,$1e,$1f,$20
db $ff
.Angl:
db $ff
db $19,$1a,$1b,$1c,$86,$87
db $ff
db $ff
.Wtma:
db $e2,$95
db $ff
db $88,$89
db $ff
db $ff
.GtWl:
db $98,$99
db $ff
db $1d,$1e
db $ff
db $21
db $ff
.Euro:
db $9a,$a6,$e5,$f0,$f1
db $ff
db $8a,$8b
db $ff
db $ff
.Kres:
db $ff
db $1f,$20,$21,$22,$23
db $ff
db $23
db $ff
.NtVl:
db $e6
db $ff
db $8c
db $ff
db $ff
.Ankr:
db $ba,$be
db $ff
db $24,$25,$26,$27,$28
db $ff
db $24,$25,$27
db $ff
.Dao:
db $b8,$b8,$e7
db $ff
db $8d
db $ff
db $ff
.Pymd:
db $bd,$c2,$c3,$c4,$c5,$c6,$c7
db $ff
db $29,$2a,$2b,$2c,$8e
db $ff
db $28
db $ff
.Babl:
db $dc
db $ff
db $8f
db $ff
db $ff
}

TblTrackerDarkSpaceCountsByArea:
{
db $01   ; South Cape
db $02   ; Edward's
db $01   ; Itory
db $00   ; Moon Tribe
db $03   ; Inca
db $00   ; Coast
db $01   ; Freejia
db $03   ; Mine
db $00   ; Neil's
db $04   ; SkGn
db $01   ; SeaP
db $02   ; Mu
db $01   ; Angl
db $01   ; Wtma
db $03   ; GtWl
db $01   ; Euro
db $03   ; Kres
db $01   ; NtVl
db $03   ; Ankr
db $01   ; Dao
db $02   ; Pymd
db $02   ; Babl
}

db $00 : dw $3000
EInGameCollectionTracker:
stz $26
cop #$45 : db $0C,$39,$0E,$3B : dw .InSomeArea
inc $26
cop #$45 : db $0F,$32,$11,$34 : dw .InSomeArea
inc $26
cop #$45 : db $0B,$2A,$0D,$2C : dw .InSomeArea
inc $26
cop #$45 : db $08,$26,$0B,$28 : dw .InSomeArea
inc $26
cop #$45 : db $12,$27,$14,$29 : dw .InSomeArea
inc $26
cop #$45 : db $24,$34,$26,$36 : dw .InSomeArea
inc $26
cop #$45 : db $24,$2C,$26,$2E : dw .InSomeArea
inc $26
cop #$45 : db $32,$32,$34,$34 : dw .InSomeArea
inc $26
cop #$45 : db $26,$25,$28,$27 : dw .InSomeArea
inc $26
cop #$45 : db $2F,$28,$31,$2A : dw .InSomeArea
inc $26
cop #$45 : db $37,$08,$39,$0A : dw .InSomeArea
inc $26
cop #$45 : db $32,$07,$34,$09 : dw .InSomeArea
inc $26
cop #$45 : db $37,$15,$39,$17 : dw .InSomeArea
inc $26
cop #$45 : db $2C,$19,$2E,$1B : dw .InSomeArea
inc $26
cop #$45 : db $29,$11,$2B,$13 : dw .InSomeArea
inc $26
cop #$45 : db $1C,$12,$1E,$14 : dw .InSomeArea
inc $26
cop #$45 : db $20,$0C,$22,$0E : dw .InSomeArea
inc $26
cop #$45 : db $11,$19,$13,$1B : dw .InSomeArea
inc $26
cop #$45 : db $12,$14,$14,$16 : dw .InSomeArea
inc $26
cop #$45 : db $08,$10,$0A,$12 : dw .InSomeArea
inc $26
cop #$45 : db $06,$0A,$08,$0C : dw .InSomeArea
inc $26
cop #$45 : db $1F,$1F,$21,$21 : dw .InSomeArea
.OutsideAreasClearFlags:
cop #$CE : db $02
.DoNothing:
rtl
.InSomeArea:
cop #$D0 : db $02,$01 : dw .DoNothing
cop #$CC : db $02
stz $00f0
stz $00f2
stz $00f4
stz $00f6
stz $00f8
phx
lda $26 : tax
lda.l TblTrackerDarkSpaceCountsByArea,x : and #$00ff : sta $00f8
lda $26 : asl : tax
lda.l Lut_TrackerItemFlagsByArea,x : tax
.CountNextLowFlag:
lda.l Lut_TrackerItemFlagsByArea&$ff0000,x : and #$00ff : cmp #$00ff : beq ..DoneCountingLowFlags
jsl LR_SecOnAnyFlagA : bcc ..PostCollectionCheck
  jsr SR_IncrementCollectedItems
..PostCollectionCheck:
jsr SR_IncrementTotalItems
inx
bra .CountNextLowFlag
..DoneCountingLowFlags:
inx
.CountNextHighFlag:
lda.l Lut_TrackerItemFlagsByArea&$ff0000,x : and #$00ff : cmp #$00ff : beq ..DoneCountingHighFlags
lda.l Lut_TrackerItemFlagsByArea&$ff0000,x : jsl LR_SecOnFlag20A : bcc ..PostCollectionCheck
  jsr SR_IncrementCollectedItems
..PostCollectionCheck:
jsr SR_IncrementTotalItems
inx
bra .CountNextHighFlag
..DoneCountingHighFlags:
inx
.CountNextOrbFlag:
lda.l Lut_TrackerItemFlagsByArea&$ff0000,x : and #$00ff : cmp #$00ff : beq ..DoneCountingOrbFlags
jsl LR_SecOnMonsterItemFlagA : bcc ..PostCollectionCheck
sed
  lda $00f4 : clc : adc #$0001 : sta $00f4
cld
..PostCollectionCheck:
sed
  lda $00f6 : clc : adc #$0001 : sta $00f6
cld
inx
bra .CountNextOrbFlag
..DoneCountingOrbFlags:
plx
cop #$BF : dw TextItemCounterDisplay
rtl


SR_IncrementCollectedItems:
sed
  lda $00f0 : clc : adc #$0001 : sta $00f0
cld
rts
SR_IncrementTotalItems:
sed
  lda $00f2 : clc : adc #$0001 : sta $00f2
cld
rts
}

org $86e500
; vampchange.bin, "Instant form change after Vamps are defeated"
{
lda $0ad4 : cmp #$0000 : bne +
  bra +++
+:
lda $0ad4 : cmp #$0001 : bne ++
ldy $09aa
lda #$0088 : sta $0002,y
lda #$f37d : sta $0000,y
lda #$0000 : sta $0008,y
lda #$0800 : tsb $09ae
bra $1b
++:
ldy $09aa
lda #$0088 : sta $0002,y
lda #$f3b1 : sta $0000,y
lda #$0000 : sta $0008,y
lda #$0800 : tsb $09ae
cop #$C1
lda $09ae : bit #$0800 : beq +++
  rtl
+++:
jmp $a466
}

org $86e570
; "Make coffin spoiler re-readable"
cop #$D1 : dw $013a : db $01 : dw $e58a
cop #$D0 : db $6f, $01 : dw $e582
cop #$BF : dw $90a7
rtl
cop #$BF : dw $90cf
cop #$CC : db $01
rtl
cop #$BF : dw $9167
rtl

}



; Bank $87
{

org $878542   ; Part of a cop #$D0 that branches to Watermia NPCs.
dw SethWatermiaOnInteract   ; Seth travel NPC.
dw WatermiaToEuroNpcOnInteract   ; Travel to Euro NPC.


org $878569
; watermia1.bin
{
WatermiaToEuroNpcOnInteract:
cop #$BF : dw TextWatermiaOfferKruks
cop #$BE : db $21,$03 : dw .Options
.Options:
  dw .SayNo, .SayNo, .SayYes
.SayNo:
cop #$BF : dw TextWatermiaDeclineKrukTravel
rtl
.SayYes:
cop #$D6 : db $18 : dw WatermiaToEuroDoTravel
cop #$D0 : db $1f,$01 : dw WatermiaToEuroDoTravel
.CantTravel:
cop #$BF : dw TextWatermiaCantKrukTravel
rtl
}

org $8786c1
; watermia2.bin, text and actors
{
TextWatermiaOfferKruks:    ; "Do you own one of these Kruks" etc.
db $D3,$43,$8E,$AC,$A9,$8E,$A5,$AC,$8E,$A7,$8D,$AC,$8E,$8D,$84,$AC,$8E,$85,$AC,$D6,$E4,$CB
db $4A,$A2,$A5,$8A,$A3,$0D,$AC,$69,$8E,$A5,$0E,$8B,$8B,$AC,$D6,$BA,$8E,$8D,$84,$CB
db $A4,$8E,$AC,$86,$8E,$AC,$A4,$8E,$AC,$44,$A5,$A2,$8E,$2A,$CB
db $AC,$4D,$8E,$CC,$14,$69,$84,$A3,$CA
TextWatermiaDeclineKrukTravel:    ; "Come back anytime!"
db $CE,$D6,$09,$D6,$73,$80,$8D,$A9,$A4,$88,$8C,$84,$4F,$C0
TextWatermiaCantKrukTravel:
db $CE,$69,$8E,$A5,$AC,$D6,$82,$D7,$9E,$A4,$8E,$AC,$D6,$98,$CB
db $A4,$87,$84,$AC,$A0,$A2,$8E,$A0,$84,$A2,$AC,$A0,$80,$A0,$84,$A2,$A3,$2A,$2A,$2A,$C0
WatermiaToEuroDoTravel:
cop #$CC : db $1f
cop #$D5 : db $18
cop #$26 : db $91 : dw $0330,$0430 : db $03,$00,$54
cop #$C5
}

org $878d76
db $10   ; Flag for Russian Glass opponent in his house

org $878d91
db $10   ; Flag for Russian Glass opponent in his house

org $879237
; russianglass.bin
{
cop #$D0 : db $95,$00 : dw RussianGlassTryGiveItem
cop #$BF : dw TextRussianGlassGotItemAlready
rtl
RussianGlassTryGiveItem:
cop #$BF : dw TextRussianGlassGreeting
%MTryGiveItemAndFlag(!WtrmRussianGlassItem, $95)
rtl
TextRussianGlassGotItemAlready:
db $D3,$D6,$53,$80,$8B,$8B,$AC,$48,$AC,$86,$8E,$A4,$2B,$AC,$81,$A5,$83,$2A,$AC,$C0
TextRussianGlassGreeting:
db $D3,$63,$8E,$8C,$84,$AC,$86,$A5,$A9,$AC,$D6,$AE,$D6,$D6,$85,$8E,$A2,$AC,$CB
db $A9,$8E,$A5,$2A,$AC,$AC,$AC,$CF,$CA
}

org $879c81
db $d3
db "!SpoilerTextKarasJournal"
db $c0

org $87a871
db $e0,$6b    ; Disable Lilly in Watermia

org $87ad1b
nop : nop : nop : nop   ; "cop #$BF : dw $...." Skip Lance's speech.
%MTryGiveItemAndFlag(!WtrmLanceItem, $e2)
rtl

org $87b59e
; Necklace stones.
{
db $02 : dw $1001
ENecklaceStone1:
cop #$D0 : db $98,$01 : dw .Die
lda #$0200 : tsb $12
cop #$88 : dl $8ee000
cop #$C0 : dw .OnInteract
-:
cop #$80 : db $02 : cop #$89
cop #$DA : db $3b
bra -
.OnInteract:
%MTryGiveItemAndFlag(!GtWlNecklace1Item, $98)
cop #$D0 : db $98,$01 : dw .Die
rtl
.Die:
cop #$E0

db $02 : dw $1001
ENecklaceStone2:
cop #$D0 : db $99,$01 : dw .Die
lda #$0200 : tsb $12
cop #$88 : dl $8ee000
cop #$C0 : dw .OnInteract
-:
cop #$80 : db $02 : cop #$89
cop #$DA : db $3b
bra -
.OnInteract:
%MTryGiveItemAndFlag(!GtWlNecklace2Item, $99)
cop #$D0 : db $99,$01 : dw .Die
rtl
.Die:
cop #$E0
}

org $87be09
cop #$A0 : dl $88d6ac : dw $01c8,$0280 : dw $2b00
lda $0e : sta $24
lda #$2000 : sta $0e
cop #$E0    ; Unsafe?

org $87c09b
db $c4    ; "Change pointer for cannibalized event"

org $87c0a7
cop #$D0 : db $9a,$01 : dw AppleVendorGotItemAlready
%MTryGiveItemAndFlag(!EuroAppleVendorItem, $9a)
rtl
AppleVendorGotItemAlready:
cop #$BF : dw $c0dd
rtl

org $87c142
db $cd : dl TextEuroNoLongerInfected
db $c0

org $87c160
db $cd : dl TextEuroHovercraft
db $c0

org $87c182
db $cd : dl TextEuroHerring
db $c0

org $87c1b6
db $cd : dl TextEuroWaferThinMint
db $c0

org $87c1dc
db $cd : dl TextEuroMillClosed
db $c0

org $87c3d4
db $cd : dl TextEuroLooney
db $c0


org $87c432
; euro1.bin
{
dw $C45D 
dw $C449 
dw $C444 
dw $C444 
dw $C44E 
dw $C453 
dw $C458 
dw $C444 
dw $C444 

cop #$BF : dw $C482 
rtl
cop #$BF : dw $C4AA 
rtl
cop #$BF : dw $C56C 
rtl
cop #$BF : dw $C5AB 
rtl
cop #$BF : dw $C60A 
rtl

cop #$BF : dw Text_EuroOfferTravel
cop #$BE : db $21,$03 : dw EuroOfferTravelOptions
EuroOfferTravelOptions:
  dw .SayNo
  dw .SayNo, .SayYes
.SayNo:
cop #$BF : dw Text_EuroDeclineTravel
rtl
.SayYes:
cop #$D6 : db $18 : dw EuroFirstTravel
cop #$D0 : db $1f,$01 : dw EuroDoTravel
cop #$BF : dw Text_EuroCantTravel
rtl
}


org $87c482
db $cd : dl TextEuroMooseOnceBit
db $c0


org $87c4d0
; euro2.bin
{
EuroFirstTravel:
cop #$CC : db $1f
cop #$D5 : db $18
EuroDoTravel:
cop #$26 : db $78 : dw $0300,$0340 : db $03,$00,$45
cop #$C5

Text_EuroOfferTravel:
db $D3,$48,$AC,$A2,$A5,$8D,$AC,$A4,$87,$84,$AC,$A3,$A4,$80,$81,$8B,$84,$A3,$2A,$AC,$48,$AC,$82,$80,$8D,$CB
db $86,$84,$A4,$AC,$D6,$FE,$4A,$A2,$A5,$8A,$A3,$AC,$88,$85,$AC,$A9,$8E,$A5,$CB
db $D6,$F1,$A4,$8E,$AC,$86,$8E,$AC,$A4,$8E,$AC,$D7,$43,$CB
db $AC,$4D,$8E,$CC,$14,$69,$84,$A3,$CA
Text_EuroCantTravel:
db $CE,$69,$8E,$A5,$AC,$D6,$82,$D7,$9E,$A4,$8E,$AC,$D6,$98,$CB
db $A4,$87,$84,$AC,$A0,$A2,$8E,$A0,$84,$A2,$AC,$A0,$80,$A0,$84,$A2,$A3,$2A,$2A,$2A,$C0
Text_EuroDeclineTravel:
db $CE,$D6,$09,$D6,$73,$80,$8D,$A9,$A4,$88,$8C,$84,$4F,$C0
}

org $87c860
db $cd : dl TextEuroNobodyExpects
db $c0



org $87CB95
db $04 : dw $1000
EEuroShopExitNpc:
cop #$0B
cop #$C0 : dw .OnInteract
cop #$28 : db $70,$01, $d0,$00 : dw .PlayerEnteredThroughExit
cop #$C1
rtl
.PlayerEnteredThroughExit:
lda #$CFF0 : tsb $065a
cop #$81 : db $08,$02
cop #$89
cop #$80 : db $02
cop #$89
cop #$BF : dw ..TextGreeting
if !SettingEntranceShuffle > 0
cop #$BE : db $02,$01 : dw ..Options
..Options:
  dw ...ChooseNo
  dw ...ChooseNo, ...ChooseYes
...ChooseYes:
stz $0ad4
jsl LR_ClearMonsterKilledFlags
cop #$26 : db !StartWarpString
cop #$C1
rtl
...ChooseNo:
cop #$BF : dw ..TextDeclinedWarp
endif
cop #$9C : dl EEuroShopPlayerPusher : dw $2000
cop #$82 : db $06, $01
cop #$89
cop #$80 : db $02
cop #$89
cop #$C1
rtl
..TextGreeting:
if !SettingEntranceShuffle == 0
db $cd : dl TextEuroPlayerEnteredShopExitNormal
db $c0
else
db $cd : dl TextEuroPlayerEnteredShopExitOfferWarp
db $ca
..TextDeclinedWarp:
db $cd : dl TextEuroPlayerEnteredShopExitAndDeclinedWarp
db $c0
endif

.OnInteract:
cop #$BF : dw ..Text
rtl
..Text:
db $cd : dl TextEuroShopExitNpcOnInteract
db $c0

EEuroShopPlayerPusher:
ldy $09aa
lda $0016,y : inc : sta $0016,y
rtl

warnpc $87CC39



org $87cd03
cop #$D0 : db $f0,$01 : dw ShopItem1Die
cop #$C0 : dw ShopItem1OnInteract
cop #$C1
rtl
ShopItem1OnInteract:
%MTryGiveItemAndFlag(!EuroShop1Item, $f0)
cop #$D0 : db $f0,$01 : dw ShopItem1Die
rtl
ShopItem1Die:
cop #$E0

org $87cdf7
%MTryGiveItemAndFlag(!EuroShop2Item, $f1)
cop #$D0 : db $f1,$01 : dw ShopItem2Die
rtl
ShopItem2Die:
cop #$E0

org $87d5e1
dw $0100   ; Euro shop line delay, reduced from vanilla.

org $87d60a
dw $d614   ; "Old men text no longer checks for Teapot"

org $87d622
db $cd : dl TextEuroOldManConversation2
db $c0

org $87d6db
db $cd : dl TextEuroOldManConversation1
db $c0

org $87d7a5
dw $d7bd   ; "Old men text no longer checks for Teapot"

org $87d7b1
db $10    ; Reveal Mt. Kress on map

org $87d892
db $d3
db "!SpoilerTextEuroOldMan"
db $c0

; Disable friends in Euro (redundant?)
org $87d989
db $e0,$6b
org $87daa1
db $e0,$6b
org $87db29
db $e0,$6b

org $87df43
cop #$D5 : db $28
%MTryGiveItemAndFlag(!EuroAnnItem, $e5)
rtl

org $87e37a
; Neil in Euro
db $1e : dw $1000
ENeilInEuro:
{
cop #$D0 : db $14,$01 : dw EuroNeilCanTravel
cop #$E0
EuroNeilCanTravel:
cop #$BC : db $00,$fe
cop #$C7 : dl ENeilInCottage
}

org $87e517
; Euro secret house
{
cop #$D0 : db $a6,$01 : dw EuroSecretGotItemAlready
%MTryGiveItemAndFlag(!EuroHiddenHouseItem, $a6)
rtl
EuroSecretGotItemAlready:
cop #$BF : dw Text_EuroSecretGotItemAlready
rtl
Text_EuroSecretGotItemAlready:
db $d3,$d6,$63,$86,$8e,$2a,$c0
}

org $87e927
SethWatermiaOnInteract:
cop #$D0 : db $11,$01 : dw .CanTravel
.NoTravel:
cop #$BF : dw .TextNoTravel
rtl
.CanTravel:
cop #$D0 : db $12,$01 : dw .OfferTravel
..FirstTravel:
cop #$CC : db $12
cop #$BF : dw .TextFirstTravel
.OfferTravel:
jml ErikAskWhere
.TextNoTravel:
db $d3
db "Only town folk may cross",$cb
db "this river!",$cb
db "(Or if you can talk to",$cb
db "fish, I guess.)",$c0
.TextFirstTravel:
db $d3
db "Oh, you know Bagu? Then",$cb
db "I can help you cross.",$cb
db "(And by Bagu I mean",$cb
db "Morse Code.)",$c0

}



; Bank $88
{

org $888fc4
; natives.bin, "Native can guide you to Dao if you give him the roast"
{
cop #$D0 : db $41,$01 : dw $8ff3
cop #$D6 : db $0a : dw $8fd4
cop #$BF : dw TextHungryBoyNoFood
rtl
HungryBoyRequestsFood:
cop #$BF : dw TextHungryBoyRequestsFood
cop #$BE : db $02,$01 : dw .Choices
.Choices:
  dw .SayNo, .SayNo, .SayYes
.SayNo:
cop #$BF : dw TextHungryBoyRejected
rtl
.SayYes:
cop #$CC : db $41
cop #$D5 : db $0a
cop #$BF : dw TextHungryBoyAccepted
HungryBoyGoToDao:
cop #$BF : dw TextHungryBoyOffersGuidance
cop #$BE : db $02,$01 : dw .Choices
.Choices:
  dw .SayNo, .SayNo, .SayYes
.SayNo:
cop #$BF : dw TextHungryBoyThumbsUp
rtl
.SayYes:
cop #$26 : db $c3 : dw $0010,$00e0 : db $07,$00,$23
cop #$C5
TextHungryBoyNoFood:
db $D3,$47,$84,$AC,$D6,$AA,$87,$A5,$8D,$86,$A2,$A9,$2A,$2A,$2A,$CB
db $69,$8E,$A5,$AC,$D6,$F1,$A4,$8E,$AC,$D6,$97,$87,$88,$8C,$CB,$D6
db $D0,$85,$8E,$8E,$83,$0D,$AC,$AC,$AC,$AC,$AC,$C0
TextHungryBoyRequestsFood:
db $D3,$47,$84,$AC,$A0,$8E,$88,$8D,$A4,$A3,$AC,$85,$A2,$80,$8D,$A4,$88,$82,$80,$8B,$8B,$A9,$CB
db $A4,$8E,$AC,$D6,$FE,$A0,$80,$82,$8A,$2B,$AC,$D7,$B6,$A4,$8E,$CB
db $87,$88,$A3,$AC,$8C,$8E,$A5,$A4,$87,$2A,$CF
db $CE,$46,$88,$A6,$84,$AC,$87,$88,$8C,$AC,$A4,$87,$84,$AC,$A2,$8E,$80,$A3,$A4,$0D,$CB
db $AC,$4D,$8E,$CB
db $AC,$69,$84,$A3,$CA
TextHungryBoyUnused:
db $AC,$AC,$AC,$AC,$AC,$AC,$AC,$CA
TextHungryBoyRejected:
db $CE,$43,$A5,$83,$84,$2B,$AC,$A4,$87,$80,$A4,$0E,$A3,$AC,$82,$8E,$8B,$83,$2A,$AC,$AC,$AC,$AC,$AC,$C0
TextHungryBoyAccepted:
db $CE,$47,$84,$AC,$A0,$8E,$88,$8D,$A4,$A3,$AC,$A4,$8E,$AC,$43,$80,$8E,$AC,$8E,$8D,$CB
db $A9,$8E,$A5,$A2,$AC,$8C,$80,$A0,$2A,$AC,$AC,$AC,$AC,$AC,$C0
TextHungryBoyOffersGuidance:
db $D3,$4B,$84,$A4,$AC,$87,$88,$8C,$AC,$86,$A5,$88,$83,$84,$AC,$A9,$8E,$A5,$AC,$A4,$8E,$AC,$43,$80,$8E,$0D,$CB
db $AC,$4D,$8E,$CB
db $AC,$69,$84,$A3,$AC,$AC,$AC,$AC,$AC,$AC,$CA
TextHungryBoyThumbsUp:
db $CE,$47,$84,$AC,$85,$8B,$80,$A3,$87,$84,$A3,$AC,$A9,$8E,$A5,$AC,$80,$AC,$CB
db $A4,$87,$A5,$8C,$81,$A3,$6D,$A5,$A0,$2A,$C0
}

org $8893a9
nop : nop : nop : nop   ; "cop #$BF : dw $...." Skip girl's speech.
%MTryGiveItemAndFlag(!NativesGirlItem, $e6)
rtl

org $889a31
; ankorwat.bin, "Bright room looks at switch 4f rather than equipment"
{
cop #$BF : dw $9a68
lda #$cff0 : trb $065a
cop #$D0 : db $f5,$01 : dw $9a5d
cop #$DA : db $13
cop #$3C
-:    ; oops
dl $80b7ce
cop #$DA : db $b3
cop #$C1
cop #$D0 : db $f5,$01 : dw $9a55
rtl
cop #$3C : dl $80b7d8
cop #$DA : db $b3
cop #$C1
cop #$D0 : db $f5,$01 : dw $9a67
bra -
rtl

db $D3
db $63,$84,$A4,$A4,$88,$8D,$86,$AC,$8E,$8D,$84,$AC,$85,$8E,$8E,$A4,$AC,$88,$8D,$A3,$88,$83,$84,$2B,$CB
db $A4,$87,$84,$AC,$85,$8B,$8E,$80,$A4,$88,$8D,$86,$AC,$82,$A2,$A9,$A3,$A4,$80,$8B,$CB
db $D6,$CB,$A4,$8E,$AC,$86,$8B,$8E,$A7,$4F,$C0

}

org $889abf
; ankorwat.bin the spirit's item
{
WatSpirit:
cop #$C0 : dw .OnInteract
cop #$BC : db $08,$00
cop #$C1
cop #$89
rtl
.OnInteract:
cop #$D0 : db $be,$01 : dw .GotItemAlready
%MTryGiveItemAndFlag(!WatSpiritItem, $be)
rtl
.GotItemAlready:
cop #$BF : dw $9b2a
rtl
}

org $889b2a
db $d3
db "!SpoilerTextAngkorWatSpirit"
db $c0


org $889f7c
db $02 : dw $1001
EWatBushSparkleItem:
cop #$D0 : db $ba,$01 : dw .Die
lda #$0200 : tsb $12
cop #$88 : dl $8ee000
cop #$C0 : dw .OnInteract
-:
cop #$80 : db $02
cop #$89
cop #$DA : db $3b
bra -
.OnInteract:
%MTryGiveItemAndFlag(!WatGlassesItem, $ba)
cop #$D0 : db $ba,$01 : dw .Die
rtl
.Die:
cop #$E0

; Disable Dao friends (redundant?)
org $88a4af
db $e0,$6b
org $88a56b
db $e0,$6b

org $88a5b3
db $14,$00   ; Neil Dao flag

org $88a5bf
db $10       ; Other Neil Dao flag

org $88a5bd
; Neil in Dao
{
cop #$D0 : db $14,$01 : dw DaoNeilCanTravel
cop #$E0
DaoNeilCanTravel:
cop #$C7 : dl ENeilInCottage
}

org $88ad0c
db $d3
db "!SpoilerTextDaoGirl"
db $c0

org $88aeb9
jmp $af20    ; Snake Game text handler

org $88af20
lda $0B24 : beq +++
  dec : beq ++
  dec : beq +
    cop #$BF : dw TextSnakeGameIntroExpert
    bra ++++
+:
cop #$BF : dw TextSnakeGameIntroAdvanced
bra ++++
++:
cop #$BF : dw TextSnakeGameIntroIntermediate
bra ++++
+++:
cop #$BF : dw TextSnakeGameIntroEasy
++++:
jmp $AEBD


org $88afe6
dw 60*!SnakeGameTimeLimitSeconds

org $88aff3
jmp $ff58    ; Snake Game difficulty level handler.

org $88affb
cop #$BF : dw Text_SnakeGameLost

org $88b010
; snakegame.bin
{
cop #$BF : dw Text_SnakeGameWon
%MTryGiveItemAndFlag(!DaoSnakeGameItem, $e7)
cop #$E0
Text_SnakeGameLost:
db $d3,$D5,$02,$4E,$4A,$4F,$AC,$63,$A4,$8E,$A0,$4F,$CB
db $D6,$67,$87,$88,$A4,$AC,$C6,$03,$00,$AC,$0A,$AC,$A3,$8D,$80,$8A,$84,$A3,$2A,$CB
db $64,$A2,$A9,$AC,$80,$86,$80,$88,$8D,$4F,$C0
Text_SnakeGameWon:
db $d3,$D5,$00,$67,$8E,$A7,$AC,$C6,$03,$00,$AC,$0A,$AC,$A3,$8D,$80,$8A,$84,$A3,$2A,$AC,$66,$84,$A2,$A9,$CB
db $86,$8E,$8E,$83,$4F,$C0

cop #$BF : dw $b090
cop #$E0
}

org $88b16d
jmp DaoOfferTravelToNatives

org $88b1ae   ; Inventory freespace check is handled by NPC's code earlier.
%MTryGiveItemAndFlag(!DaoEntrance1Item, $b8)
%MTryGiveItemAndFlag(!DaoEntrance2Item, $b8)
cop #$BF : dw DaoOfferTravelToNatives_TextPostGiveItem
rtl

; Disable Pymd Kara and Jackal (redundant?)
org $88b7a1
db $e0,$6b
org $88b822
db $e0,$6b

org $88c205
cop #$C0 : dw PyramidGuyOnInteract ;$c20e
cop #$0B
cop #$C1
rtl
PyramidGuyOnInteract:
cop #$D0 : db $ef, $01 : dw PyramidGuyAlreadyGivenBook ;$c21e
cop #$D6 : db $26 : dw PyramidGuyGiveBook ;$c222
cop #$BF : dw PyramidGuyTextOfferTakeBook
rtl
PyramidGuyAlreadyGivenBook:
jml $83f208
PyramidGuyGiveBook:
cop #$CC : db $ef
cop #$D5 : db $26
cop #$BF : dw PyramidGuyTextDoTakeBook
rtl
PyramidGuyTextOfferTakeBook:
db $cd : dl TextPyramidGuyOfferTakeBook
db $c0
PyramidGuyTextDoTakeBook:
db $cd : dl TextPyramidGuyDoTakeBook
db $c0


; "Speed up Room 3 elevator"
org $88c55b
jsr SR_PymdRoom3Elevator1
nop : nop : nop
org $88c56c
jsr SR_PymdRoom3Elevator2
nop : nop : nop


; Hieroglyph locations.
org $88c7ac
%MTryGiveItemAndFlag(!PyramidHiero1Item, $c2)
rtl
org $88c873
%MTryGiveItemAndFlag(!PyramidHiero2Item, $c3)
rtl
org $88c91b
%MTryGiveItemAndFlag(!PyramidHiero3Item, $c4)
rtl
org $88c9c3
%MTryGiveItemAndFlag(!PyramidHiero4Item, $c5)
rtl
org $88ca6b
%MTryGiveItemAndFlag(!PyramidHiero5Item, $c6)
rtl
org $88cb13
%MTryGiveItemAndFlag(!PyramidHiero6Item, $c7)
rtl

org $88cb94
; "which tiles are called from placement flags"
db !HieroItemTile1
db !HieroItemTile2
db !HieroItemTile3
db !HieroItemTile4
db !HieroItemTile5
db !HieroItemTile6

org $88cd71
; MQ and Solid Arm disappear if they're the Pyramid boss; others don't.
if !Boss5Id == 5
db $fc,$01
elseif !Boss5Id == 7
db $f6,$01
else
db $10,$00
endif

org $88cdcd
cop #$26 : db !MapMQEntranceString
cop #$C1
rtl
TextMummyQueenPortal:
db $d3
db "Heeeeeeeeeeeeeere's",$cb
if !Boss5Id == 1
db "Castoth!"
elseif !Boss5Id == 2
db "Viper!"
elseif !Boss5Id == 3
db "Vampires!"
elseif !Boss5Id == 4
db "Sand Fanger!"
elseif !Boss5Id == 5
db "Mummy Queen!"
elseif !Boss5Id == 6
db "Mummy Queen 2.0!"
else
db "Solid Arm!"
endif
db $cb
db "_Quit",$cb
db "_Jump in"
db $ca
warnpc $88ce10


org $88ce30
; The warp after receiving MQ's statue is different, since it doesn't return to MQ's map.
lda.w #!MQPostStatueExitMap : sta $0b12
lda.w #!MQPostStatueExitX : sta $0b08
  sta $0b0a
lda.w #!MQPostStatueExitY : sta $0b0c
  sta $0b0e
lda.w #!MQPostStatueExitCam : sta $0b10
cop #$26 : db $fd : dw $0000, $0000 : db $00,$00,$11

org $88cea5
db $10,$00   ; Jeweler doesn't disappear when defeated.

org $88cec9
; jeweler.bin
{
EJeweler_OnChat:
cop #$BF : dw EJeweler_Text_Greeting
lda $0AB0 : beq J_88CED6
  cop #$BF : dw EJeweler_Text_ImHolding
J_88CED6:
cop #$D0 : db $E9, $01 : dw J_88CEE7
lda $0AB0 : cmp.w #$!Jeweler1Cost : bcc J_88CEE7
jmp J_88D017
J_88CEE7:
cop #$D0 : db $EA, $01 : dw J_88CEF8
lda $0AB0 : cmp.w #$!Jeweler2Cost : bcc J_88CEF8
jmp J_88D02A
J_88CEF8:
cop #$D0 : db $EB, $01 : dw J_88CF09
lda $0AB0 : cmp.w #$!Jeweler3Cost : bcc J_88CF09
jmp J_88D037
J_88CF09:
cop #$D0 : db $EC, $01 : dw J_88CF1A
lda $0AB0 : cmp.w #$!Jeweler4Cost : bcc J_88CF1A
jmp J_88D04A
J_88CF1A:
cop #$D0 : db $ED, $01 : dw J_88CF2B
lda $0AB0 : cmp.w #$!Jeweler5Cost : bcc J_88CF2B
jmp J_88D057
J_88CF2B:
cop #$D0 : db $EE, $01 : dw J_88CF3C
lda $0AB0 : cmp.w #$!Jeweler6Cost : bcc J_88CF3C
jmp J_88D067
J_88CF3C: 
lda $0AB0 : cmp.w #$!Jeweler7Cost : bcc B_88CF47
jmp J_88D077
B_88CF47:
cop #$BF : dw EJeweler_Text_MenuWithConfig
J_88CF4B:
cop #$BE : db $03,$01 : dw EJeweler_Text_MenuOptions
EJeweler_Text_MenuOptions:
  dw B_88CF59
  dw B_88CF59, B_88CF5E, B_88CFA6
B_88CF59:
cop #$BF : dw EJeweler_Text_Goodbye
rtl
B_88CF5E:
cop #$D6 : db $01 : dw B_88CF68
cop #$D6 : db $2e : dw B_88CF68
cop #$D6 : db $2f : dw B_88CF68
cop #$BF : dw EJeweler_Text_GiveZeroJewels
rtl
B_88CF68:
sed
sep #$20
ldy #$0000
-:
lda $0ab4,y
  cmp #$01 : beq .IsOne
  cmp #$2e : beq .IsTwo
  cmp #$2f : beq .IsThree
--:
iny : cpy #$0010 : bne -
bra B_88CF97
.IsThree:
if !SettingRedJewelMadness == 1
jsr SR_JewelerDecHP
jsr SR_JewelerDecHP
endif
lda #$03 : bra +
.IsTwo:
if !SettingRedJewelMadness == 1
jsr SR_JewelerDecHP
endif
lda #$02 : bra +
.IsOne:
lda #$01 ;: bra +
+:
clc : adc $0ab0 : sta $0ab0
if !SettingRedJewelMadness == 1
jsr SR_JewelerDecHP
endif
lda #$00 : sta $0ab4,y
bra --
B_88CF97:
rep #$20
cld
cop #$BF : dw EJeweler_Text_GiveJewels
jmp J_88CED6
B_88CFA6:
cop #$BF : dw EJeweler_Text_SeeInventory
cop #$BF : dw EJeweler_Text_DrawInventoryBox
cop #$D0 : db $E9, $00 : dw B_88CFB8
cop #$BF : dw EJeweler_Text_SetRedPalette
B_88CFB8:
cop #$BF : dw EJeweler_Text_Inventory_Reward1
cop #$D0 : db $EA, $00 : dw B_88CFC6
cop #$BF : dw EJeweler_Text_SetRedPalette
B_88CFC6:
cop #$BF : dw EJeweler_Text_Inventory_Reward2
cop #$D0 : db $EB, $00 : dw B_88CFD4
cop #$BF : dw EJeweler_Text_SetRedPalette
B_88CFD4:
cop #$BF : dw EJeweler_Text_Inventory_Reward3
cop #$D0 : db $EC, $00 : dw B_88CFE2
cop #$BF : dw EJeweler_Text_SetRedPalette
B_88CFE2:
cop #$BF : dw EJeweler_Text_Inventory_Reward4
cop #$D0 : db $ED, $00 : dw B_88CFF0
cop #$BF : dw EJeweler_Text_SetRedPalette
B_88CFF0:
cop #$BF : dw EJeweler_Text_Inventory_Reward5
cop #$D0 : db $EE, $00 : dw B_88CFFE
cop #$BF : dw EJeweler_Text_SetRedPalette
B_88CFFE:
cop #$BF : dw EJeweler_Text_Inventory_Reward6
cop #$BF : dw EJeweler_Text_Inventory_Secrets
cop #$BF : dw EJeweler_Text_MenuWithConfig
jmp J_88CF4B
B_88D012:
cop #$BF : dw EJeweler_Text_YourInventoryFull
rtl
J_88D017:
%MTryGiveItemAndFlag(!Jeweler1Item, $e9)
cop #$D0 : db $e9,$00 : dw B_88D012
jmp J_88CEE7
J_88D02A:
%MTryGiveItemAndFlag(!Jeweler2Item, $ea)
cop #$D0 : db $ea,$00 : dw B_88D012
jmp J_88CEF8
J_88D037:
%MTryGiveItemAndFlag(!Jeweler3Item, $eb)
cop #$D0 : db $eb,$00 : dw B_88D012
jmp J_88CF09
J_88D04A:
%MTryGiveItemAndFlag(!Jeweler4Item, $ec)
cop #$D0 : db $ec,$00 : dw B_88D012
jmp J_88CF1A
J_88D057:
%MTryGiveItemAndFlag(!Jeweler5Item, $ed)
cop #$D0 : db $ed,$00 : dw B_88D012
jmp J_88CF2B
J_88D067:
%MTryGiveItemAndFlag(!Jeweler6Item, $ee)
cop #$D0 : db $ee,$00 : dw B_88D012
jmp J_88CF3C
J_88D077:
cop #$BF : dw EJeweler_Text_GetSecrets
lda #$0202 : sta $0648
lda #$0404 : sta $064A
stz $0ad4
if !SettingRedJewelHunt == 1
cop #$26 : db $E5 : dw $0000,$0000 : db $00,$00,$11
else
cop #$26 : db !MapMansionEntranceString ; $E9 : dw $0330,$03d0 : db $80,$00,$44
endif
rtl
EJeweler_Die:
cop #$E0

EJeweler_Text_Greeting:
db $D3,$48,$0E,$8C,$AC,$D6,$FE,$87,$A5,$82,$8A,$8B,$84,$81,$84,$A2,$A2,$A9,$2A,$AC,$CF,$CA
EJeweler_Text_ImHolding:
EJeweler_Text_GiveJewels:
db $CE,$48,$AC,$D6,$98,$C6,$02,$00,$B0,$0A,$AC,$49,$84,$A7,$84,$8B,$A3,$2B,$CB
db $8E,$8D,$84,$AC,$85,$8E,$A2,$AC,$84,$80,$82,$87,$AC,$8E,$85,$AC,$A9,$80,$2A,$CF,$CA
EJeweler_Text_MenuWithConfig:
db $D3,$C3,$00
EJeweler_Text_Menu:
db $CE,$D6,$62,$83,$88,$83,$AC,$A9,$8E,$A5,$AC,$84,$A6,$84,$A2,$AC,$A7,$80,$8D,$A4,$0D,$CB
db $AC,$D6,$24,$D6,$FC,$A4,$8E,$AC,$A3,$84,$84,$AC,$A9,$8E,$A5,$CB
db $AC,$46,$88,$A6,$84,$AC,$A9,$8E,$A5,$AC,$62,$84,$83,$AC,$49,$84,$A7,$84,$8B,$A3,$CB
db $AC,$63,$84,$84,$AC,$D6,$FE,$88,$8D,$A6,$84,$8D,$A4,$8E,$A2,$A9,$CA
EJeweler_Text_Goodbye:
db $CE,$45,$8E,$A2,$86,$88,$A6,$84,$AC,$8C,$84,$AC,$88,$85,$AC,$48,$AC,$D6,$82,$AC,$CB
db $A3,$87,$80,$8A,$84,$AC,$87,$80,$8D,$83,$A3,$2A,$AC,$C0
EJeweler_Text_GiveZeroJewels:
db $CE,$48,$AC,$80,$A0,$8E,$8B,$8E,$86,$88,$AA,$84,$2B,$AC,$48,$AC,$85,$8E,$A2,$86,$8E,$A4,$AC,$A9,$8E,$A5,$CB
db $D6,$F2,$A4,$87,$84,$A2,$84,$2A,$AC,$69,$8E,$A5,$AC,$8C,$80,$A9,$AC,$86,$8E,$CB
db $8D,$8E,$A7,$2A,$AC,$C0
EJeweler_Text_YourInventoryFull:
db $D3,$D6,$30,$A0,$8E,$8A,$84,$A2,$0E,$A3,$AC,$D6,$A3,$8D,$8E,$A4,$AC,$CB
db $D6,$FE,$86,$80,$8C,$84,$2B,$AC,$48,$8A,$84,$2A,$AC,$AC,$C0
EJeweler_Text_GetSecrets:
db $D3,$D6,$69,$8D,$8E,$AC,$83,$80,$88,$A3,$A9,$4F,$AC,$D6,$69,$CB
db $8D,$8E,$AC,$83,$80,$88,$A3,$A9,$AC,$80,$A4,$AC,$80,$8B,$8B,$4F,$AC,$C0
EJeweler_Text_SetRedPalette:
db $C3,$04,$CA
EJeweler_Text_SetBluePalette:
db $C3,$00,$CA
EJeweler_Text_DrawInventoryBox:
db $C1,$03,$0B,$C7,$08,$07,$CE,$D2,$00,$CA
EJeweler_Text_Inventory:
.Reward1:
db $CE
db "!Jeweler1RowText",$CB,$C3,$00,$CA
.Reward2:
db "!Jeweler2RowText",$CB,$C3,$00,$CA
.Reward3:
db "!Jeweler3RowText",$CB,$C3,$00,$CA
.Reward4:
db "!Jeweler4RowText",$CB,$C3,$00,$CA
.Reward5:
db "!Jeweler5RowText",$CB,$C3,$00,$CA
.Reward6:
db "!Jeweler6RowText",$CB,$C3,$00,$CA
.Secrets:
db "!Jeweler7RowText",$C0
EJeweler_Text_SeeInventory:
db $CE,$D6,$69,$80,$AC,$83,$80,$88,$A3,$A9,$AC,$88,$85,$AC,$A9,$8E,$A5,$AC,$83,$8E,$2A,$C0

SR_JewelerDecHP:
php
rep #$20
jsl LR_DecHP
plp
rts
warnpc $88d6a9
}


org $88daf0
; Skip a lot of Gaia chatter.
{
EGaia_TryChat:
lda #$fff0 : tsb $065a
cop #$DA : db $05
lda #$fff0 : trb $065a
ldy $06
lda #$FFFF : sta $0024,y
lda $0ace : cmp $0aca : beq +
EGaia_TryChat_DoHeal:
  cop #$BF : dw $de4d
  lda #$FFF0 : tsb $065a
  lda #$0028 : sta $0b22
  cop #$C1
  lda $0ace : cmp $0aca : beq +
  rtl
+:
EGaia_FindChatMapping:
; IOGR only has one special chat mapping.
lda #$FFF0 : trb $065A
lda $0b12 : cmp #$00cc : bne EGaia_MaybeOfferDarkGaia
lda $0aac : beq EGaia_MaybeOfferDarkGaia   ; Bottom DS has $0aac = 0, top has it = 1.
cop #$D0 : db $bd,$01 : dw EGaia_MaybeOfferDarkGaia
%MTryGiveItemAndFlag(!PyramidGaiaItem, $bd)
EGaia_MaybeOfferDarkGaia:
if !SettingRedJewelHunt == 0
cop #$D0 : db $8a,$00 : dw EGaia_OfferSave    ; Rescued Kara
cop #$D0 : db $b4,$00 : dw EGaia_OfferSave    ; Used Aura
if !SettingStatuesPlayerChoice == 1
lda $0a1f : sta $0000
lda #$0000
clc
sep #$20
lsr $0000 : adc #$00
lsr $0000 : adc #$00
lsr $0000 : adc #$00
lsr $0000 : adc #$00
lsr $0000 : adc #$00
lsr $0000 : adc #$00
rep #$20
cmp.w #!StatuesRequiredCount : bcc EGaia_OfferSave
else
if !Statue1Required == 1
cop #$D0 : db $f8,$00 : dw EGaia_OfferSave
endif
if !Statue2Required == 1
cop #$D0 : db $f9,$00 : dw EGaia_OfferSave
endif
if !Statue3Required == 1
cop #$D0 : db $fa,$00 : dw EGaia_OfferSave
endif
if !Statue4Required == 1
cop #$D0 : db $fb,$00 : dw EGaia_OfferSave
endif
if !Statue5Required == 1
cop #$D0 : db $fc,$00 : dw EGaia_OfferSave
endif
if !Statue6Required == 1
cop #$D0 : db $fd,$00 : dw EGaia_OfferSave
endif
endif
EGaia_OfferDarkGaia:
cop #$BF : dw EGaia_TextOfferDarkGaia
cop #$BE : db $02,$01 : dw .Options
.Options:
  dw .SayNo, .SayNo, .SayYes
.SayYes:
cop #$26 : db $e4 : dw $00f0,$0140 : db $80,$00,$22
cop #$C1
rtl
.SayNo:
endif
EGaia_OfferSave:
cop #$BF : dw EGaia_TextOfferSave
cop #$BE : db $02,$02 : dw .Options
.Options:
  dw .SayYes, .SayYes, EGaia_ThenGo
.SayYes:
lda $0D8C    ; Save file index.
jsl $83D916  ; Save game routine.
cop #$07 : db $29
lda #$FFF0 : tsb $065A
cop #$DA : db $3B
lda #$FFF0 : trb $065A
stz $0bfc   ; Restore default fast item-get text speed after the save routine uses this.
cop #$BF : dw EGaia_TextFinishedRecordingOfferWarp
EGaia_OfferWarp:
cop #$BE : db $02,$01 : dw .Options
.Options:
  dw .SayNo, .SayNo, .SayYes
.SayYes:
stz $0ad4
jsl LR_ClearMonsterKilledFlags
cop #$26 : db !StartWarpString
cop #$C5
.SayNo:
EGaia_ThenGo:
cop #$BF : dw EGaia_TextThenGo
ldy $06
lda #$0000 : sta $0024,y
cop #$C5

EGaia_TextOfferDarkGaia:
db $D3,$45,$80,$82,$84,$AC,$D6,$0C,$46,$80,$88,$80,$0D,$CB
db $AC,$4D,$8E,$CB
db $AC,$69,$84,$A3
db $CA
EGaia_TextOfferSave:
db $D3,$CE,$62,$84,$82,$8E,$A2,$83,$AC,$A7,$87,$80,$A4,$0E,$A3,$AC,$87,$80,$A0,$A0,$84,$8D,$84,$83,$CB
db $A3,$8E,$AC,$85,$80,$A2,$0D,$CB,$AC,$62,$84,$82,$8E,$A2,$83,$CB,$AC,$D6,$0D,$A2,$84,$82,$8E,$A2,$83,$CA
EGaia_TextFinishedRecordingOfferWarp:
db $CE,$45,$88,$8D,$88,$A3,$87,$84,$83,$AC,$A2,$84,$82,$8E,$A2,$83,$88,$8D,$86,$2A,$2A,$2A,$CF
db $CE
db $62,$84,$A4,$A5,$A2,$8D,$AC,$A4,$8E,$AC    ; "Return to "
db "!StartLocationName"
db $0D,$CB    ; "?"
db $AC,$4D,$8E,$CB
db $AC,$69,$84,$A3
db $CA
EGaia_TextThenGo:
db $CE,$64,$87,$84,$8D,$AC,$86,$8E,$2A,$C0

}

org $88eb15
; "Cut out ability explanation text"
ldy $26
lda #$0000 : sta $0024,y
cop #$04 : db $16
cop #$DA : db $01
lda #$FFF0 : trb $065A
cop #$E0

org $88eb5a
EDarkSpace_MapAbilityMappings:    ; format=map,ability
{
db !DSPsychoDashMap,$01
db !DSPsychoSliderMap,$02
db !DSSpinDashMap,$04
db !DSDarkFriarMap,$10
db !DSAuraBarrierMap,$20
db !DSEarthquakerMap,$40
db $00,$00
}

org $88eb81
db $c0   ; "Shorten ability acquisition text"

org $88f0a1
db $10   ; Meet Freedan

org $88fa25
jmp SolidArmDeathOverride

org $88fa32
; Solid Arm intro text.
db "Weave a circle",$cb
db "__round him thrice,",$cb
db "And close your eyes",$cb
db "__with holy dread,",$cf
db "For he on honey-dew",$cb
db "__hath fed,",$cb
db "And drunk the milk",$cb
db "__of Paradise.",$c0

org $88fbc9
; Solid Arm death text.
db $d5,$02
db "Ed, what an ugly thing",$cb
db "to say... does this",$cb
db "mean we're not friends",$cb
db "anymore?",$cf
db "You know, Ed, if I thought",$cb
db "you weren't my friend,",$cb
db "I just don't think",$cb
db "I could bear it.",$c0

org $88fcb2
; Exit to Dao from Mansion
cop #$26 : db !MapMansionExitString ; $c3 : dw $0140,$0088 : db $00,$00,$23

org $88fd16
; Force change back to Will.
{
LR_ForceChangeToWill:
lda $0AD4 : beq .Done
cop #$9C : dl EForceChangeToWill : dw $2000
.Done:
rtl
EForceChangeToWill:
cop #$C8 : dw $f309   ; Effect of saying Yes at Will transform statue.
cop #$E0
}

DaoOfferTravelToNatives:
{
cop #$BF : dw .TextOfferTravel
cop #$BE : db $02,$01 : dw .Options
.Options:
  dw .SayNo, .SayNo, .SayYes
.SayNo:
cop #$BF : dw .TextDeclinedTravel
rtl
.SayYes:
cop #$26 : db $ac : dw $01c0,$01d0 : db $06,$00,$22
cop #$C1
rtl
.TextOfferTravel:
db $d3
db "Go to Natives' Village?",$cb
db "_No",$cb
db "_Yes",$ca
.TextDeclinedTravel:
db $ce
db "Come back any time!",$c0
.TextPostGiveItem:
db $d3
db "If you want a guide to",$cb
db "take you to the Natives'",$cb
db "Village, I can get one",$cb
db "for you.",$c0
}

SolidArmDeathOverride:
cop #$CC : db $f6
cop #$26 : db $e3 : dw $0280,$01a0 : db $80,$10,$23
cop #$E0

SR_PymdRoom3Elevator1:
dec : dec : dec : dec
bra +
SR_PymdRoom3Elevator2:
inc : inc : inc : inc
+:
sta $0026,y
dec $26
dec $26
dec $26
dec $26
rts


;org $88fd80
;; jeweler2.bin
;{
;cop #$D6 : db $2e : dw $fd92
;cop #$D6 : db $2f : dw $fd9a
;cop #$D6 : db $01 : dw $cf68
;jmp $cf63
;
;cop #$D5 : db $2e
;lda #$0002 : bra +
;cop #$D5 : db $2f
;lda #$0003
;+:
;if !ModeFlagRjm == 0
;{
;sed
;clc : adc $0ab0 : sta $0ab0
;cld
;cop #$D6 : db $2f : dw $fd9a
;cop #$D6 : db $01 : dw $cf68
;jmp $cf9f
;
;; filler
;db $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
;
;}
;else   ; RJM handler
;{
;pha
;pha
;-:
;jsl $83fdb2
;jsl $83fda0
;pla : dec : beq +
;  pha : bra -
;+:
;-:
;jsl $83fda9
;pla : dec : beq +
;  pha : bra -
;+:
;cop #$D6 : db $2f : dw $fd9a
;cop #$D6 : db $01 : dw $cf68
;jmp $cf9f
;
;cop #$D5 : db $01
;jsl $83fda0
;jsl $83fda9
;jmp $cf9a
;}
;endif
;}

org $88feb0
TextSnakeGameSnakesInSecondsGo:
db "_snakes in","!SnakeGameTimeLimitSecondsString",$cb,"seconds. Go!"
db $ca
TextSnakeGameIntroEasy:
db $ce
db "Hit","!SnakeGameTargetEasyString"
db $cd : dl TextSnakeGameSnakesInSecondsGo
db $c0
TextSnakeGameIntroIntermediate:
db $ce
db "Hit","!SnakeGameTargetIntermediateString"
db $cd : dl TextSnakeGameSnakesInSecondsGo
db $c0
TextSnakeGameIntroAdvanced:
db $ce
db "Hit","!SnakeGameTargetAdvancedString"
db $cd : dl TextSnakeGameSnakesInSecondsGo
db $c0
TextSnakeGameIntroExpert:
db $ce
db "Hit","!SnakeGameTargetExpertString"
db $cd : dl TextSnakeGameSnakesInSecondsGo
db $c0

warnpc $88ff50
org $88ff50
dw !SnakeGameTargetEasy
dw !SnakeGameTargetIntermediate
dw !SnakeGameTargetAdvanced
dw !SnakeGameTargetExpert
;org $88ff58
phx
  lda $0B24 : asl : tax
  lda $0AAC : cmp $88FF50,x
plx
jmp $AFF9

}



; Bank $89
{

org $898045
jsr SR_BabelSpiritTransformAndRespawnEnemies

org $89804a
db !MapBabelWarpString

org $898055
db $cd : dl TextBabelBabylonJoke
db $cb
db "_", $d6,$42, $cb
db "_Go to_"
if !Boss6Id == 1
db "Diamond Coast"
elseif !Boss6Id == 2
db "Seaside Palace"
elseif !Boss6Id == 3
db "Mu"
elseif !Boss6Id == 4
db "Great Wall"
elseif !Boss6Id == 5
db "Pyramid"
else
db "Dao"
endif
db $ca

org $8980cb
jmp DaoSpiritLogicOverride

org $898519
db $e0,$6b    ; Disable one Babel Kara (redundant?)

org $89884c
db $01,$00   ; "Shorten Olman text boxes"

org $898891
cop #$0B
rtl      ; Stop Olman's dialogue early

org $8988d2
jmp JRequireBossDefeatedForStatue6    ; "Check for conditions before giving up Statue"

org $898903
db $d3 : db "heya.",$c0

org $8989a2
db $d3 : db "you've been busy, huh?",$c0

org $898ebe
db "!TextShadowSuperhero"
db $c3,$00
db $c0

org $898fad
cop #$CC : db $0e
cop #$CC : db $0f
rtl     ; Speed up rooftop sequence

; (Babel) "Speed up warp sequences"
org $8995a9
db $01,$00
org $8995b0
db $01,$00
org $8996ab
db $03
org $8996fd
db $10
org $89982a
db $10
org $899848
db $04

org $899866
db $cd : dl TextBabelTalonJoke
db $c0
org $89974e
db $cd : dl TextBabelVampireJoke
db $c0

org $89999b
jmp CrystalRingBarrierLogicOverride

org $8999aa
jmp CrystalRingBarrierLogicOverride2

org $899a49
%MTryGiveItemAndFlag(!BabelForceFieldItem, $dc)
cop #$D0 : db $dc,$01 : dw BabelForceFieldGotItem
rtl
BabelForceFieldGotItem:
cop #$E0

org $899a70
db $d3,"Well, lookie there.",$c0   ; Crystal Ring popped off text.


; (Babel) "Spirits can warp you back to start"
org $899b5f
BabelSpiritWarpLabelPlaceholder:
cop #$D9 : dw $0000 : dw .TypePointers ;$9b65
.TypePointers:
  dw .Type0, .Type1, .Type1, .Type1, .Type1, .Type1
.Type0:
cop #$BF : dw ..Text
rtl
..Text:
db $d3
db "!SpoilerTextBabelSpirit"
db $c0
.Type1:
cop #$BF : dw ..TextDialogue
cop #$BE : db $02,$01 : dw ..DialogueOptions
..DialogueOptions:
  dw ..ChooseDecline
  dw ..ChooseDecline, ..ChooseAccept
..TextDialogue:
db $cd : dl BabelWarperSpiritDialogueOptions
db $ca
..ChooseDecline:
cop #$BF : dw ...Text
rtl
...Text:
db $ce
db "Darn straight."
db $c0
..ChooseAccept:
cop #$26 : db $de : dw $0078, $00c0 : db $00,$00,$11
cop #$C5
rtl

org $899e90
db $e0,$6b    ; Disable other Babel Kara (redundant?)


; Lilly button is available if Lilly is with you due to Necklace.
org $89aa40
db $15 : dw $1000
cop #$D0 : db $6f,$00 : dw $aa6c
cop #$CC : db $02
org $89be74
db $d7,$18    ; Dialogue to say "Lilly's" instead of Strange.


; "Reconstructed" Apocalypse Gaia code.
org $89aae3
if !ApocalypseGaia == 1
incsrc "apocalypse_gaia_1.asr"
endif
warnpc $89ba80

org $89bc37
cop #$02 : db $e0    ; Disable Lilly's flower (redundant?)
rtl

org $89bf7d
; Allow Edward's to spawn a DS containing an ability.
cop #$A0 : dl $88d6ac : dw $00a8,$04c0 : dw $0b00
jmp EDarkSpaceSpawnerMemoryShuffler

org $89bf95
db $10   ; Meet Lilly

org $89c037
jsl LR_ForceChangeToWill   ; At Edward's dungeon exit.
cop #$E0

org $89c5bb
; Singing Statue
%MTryGiveItemAndFlag(!IncaCliffItem, $32)
lda #$eff0 : trb $065a
cop #$E0

org $89c660
; Remove Wind Melody when door opens.
WindMelodyOpenAndRemove:
cop #$CD : dw $0112
cop #$D5 : db $08
cop #$E0
org $89c676
db $67
org $89c681   ; Change Inca glowing tile check area (but not graphic location).
cop #$45 : db !IncaTileWest,!IncaTileNorth,!IncaTileEast,!IncaTileSouth
org $89c6a3
cop #$D0 : db $10,$01 : dw WindMelodyOpenAndRemove

org $89ca02
; incaship.bin
{
cop #$80 : db $1a : cop #$89
cop #$25 : db $16,$13
cop #$0B
cop #$C0 : dw $ca31
lda $0ad4 : beq +
ldy $09aa
sep #$20
lda #$88 : sta $0002,y
rep #$20
lda #$F37d : sta $0000,y
lda #$0800 : tsb $09ae
+:
cop #$C1
rtl

cop #$BF : dw $ca89
cop #$BE : db $21,$03 : dw $ca3b
  dw $ca41
  dw $ca41,$ca46

cop #$BF : dw $cae0
rtl

cop #$D6 : db $1b : dw $ca50
cop #$BF : dw $cb06
rtl

cop #$BF : dw $cb30
cop #$BE : db $42,$01 : dw $ca5a
  dw $ca41
  dw $ca41,$ca65,$ca71,$ca7d
rtl

cop #$26 : db $78 : dw $0278,$0390 : db $00,$00,$45
cop #$C5

cop #$26 : db $30 : dw $0048,$0110 : db $03,$00,$21
cop #$C5

cop #$26 : db $5A : dw $0090,$0070 : db $83,$00,$14
cop #$C5

db $C1,$03,$06,$C7,$0D,$04,$C2,$02,$48,$AC,$89,$A5,$A3,$A4,$AC,$8C,$84,$A4,$AC,$80,$AC,$82,$80,$A0,$A4,$80,$88,$8D,$CB,$8E,$85,$85,$84,$A2,$88,$8D,$86,$AC,$A0,$80,$A3,$A3,$80,$86,$84,$AC,$80,$82,$A2,$8E,$A3,$A3,$CB,$A4,$87,$84,$AC,$A3,$84,$80,$2A,$AC,$48,$8D,$A4,$84,$A2,$84,$A3,$A4,$84,$83,$0D,$CB,$C3,$00,$AC,$4D,$8E,$CC,$14,$69,$84,$A3,$AC,$AC,$CA,$C1,$03,$06,$C7,$0D,$04,$C2,$02,$4B,$84,$A4,$AC,$8C,$84,$AC,$D6,$A4,$88,$85,$AC,$A9,$8E,$A5,$AC,$D7,$52,$CB,$D6,$FE,$8C,$88,$8D,$83,$2A,$AC,$AC,$AC,$C0,$C1,$03,$06,$C7,$0D,$04,$C2,$02,$D6,$63,$48,$AC,$D6,$DA,$87,$84,$0E,$A3,$AC,$80,$A3,$8A,$88,$8D,$86,$CB,$85,$8E,$A2,$AC,$86,$8E,$8B,$83,$2A,$2A,$2A,$AC,$AC,$AC,$AC,$C0,$C1,$03,$06,$C7,$0D,$04,$C2,$02,$67,$87,$84,$A2,$84,$0E,$83,$AC,$A9,$8E,$A5,$AC,$D6,$A5,$A4,$8E,$AC,$86,$8E,$0D,$CB,$C3,$00,$AC,$D6,$42,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$D6,$0E,$42,$8E,$80,$A3,$A4,$CB,$AC,$67,$80,$A4,$84,$A2,$8C,$88,$80,$AC,$AC,$AC,$AC,$63,$84,$80,$AC,$60,$80,$8B,$80,$82,$84,$CA

}

org $89cea7
db $e0,$6b    ; Disable Inca Kara (redundant?)

org $89cfaa
jsl LR_ForceChangeToWill   ; After Castoth.
lda #$EFF0 : trb $065a
cop #$E0

org $89d0f5
; moontribe
{
db $00 : dw $3000
EMoonTribeSpirit:
lda #$0200 : tsb $12
cop #$D0 : db $2a,$01 : dw .TeapotApplied
cop #$D0 : db $08,$01 : dw .SeenTeapotMessage
cop #$21 : db $03 : dw .ShowTeapotMessage
rtl
.ShowTeapotMessage:
cop #$BF : dw Text_MoonTribeHealUs
cop #$CC : db $08
.SeenTeapotMessage:
rtl
.TeapotApplied:
cop #$CC : db $10
cop #$3C : dl $80b800
cop #$C2
lda #$2000 : trb $10
cop #$0B
cop #$C0 : dw .OnInteract
cop #$C1
cop #$82 : db $27,$3b
cop #$89
rtl
.OnInteract:
cop #$BF : dw Text_MoonTribeOffer
cop #$BE : db $02,$01 : dw ..Options
..Options:
  dw ..SayNo,..SayNo,..SayYes
..SayNo:
cop #$BF : dw Text_MoonTribeLaugh
rtl
..SayYes:
cop #$26 : db !MapMoonWarpString ; $4c : dw $0168,$0040 : db $83,$00,$22
cop #$C1
rtl
; "Heal us" etc.
Text_MoonTribeHealUs:
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$CB
db $47,$84,$80,$8B,$AC,$A5,$A3,$2A,$2A,$2A,$AC,$AC,$AC,$AC,$CB
db $64,$87,$84,$AC,$64,$84,$80,$A0,$8E,$A4,$2A,$2A,$2A,$AC,$C0
; "Want a lift?" etc.
Text_MoonTribeOffer:
db $D3,$D6,$31,$64,$A2,$88,$81,$84,$2F,$AC,$67,$80,$8D,$A4,$AC,$80,$AC,$8B,$88,$85,$A4,$0D,$CB
db $AC,$4D,$8E,$AC,$CB
db $AC,$69,$84,$A3,$AC,$CA
Text_MoonTribeLaugh:
db $CE,$4A,$A5,$AC,$8A,$A5,$AC,$8A,$A5,$2A,$2A,$2A,$C0
}

org $89f710
EDarkSpaceSpawnerMemoryShuffler:
lda $0e : sta $24
lda #$2000 : sta $0e
cop #$C2    ; Stay alive for 1 frame so spawned DS can access us.
cop #$E0

DaoSpiritLogicOverride:   ; Appears if either BabelMQ or Solid Arm is beaten.
cop #$D0 : db $f6,$01 : dw $80d1
cop #$D1 : dw $0179 : db $01 : dw $80d1
cop #$E0

CrystalRingBarrierLogicOverride:
cop #$D0 : db $dc,$00 : dw $99a0
cop #$D0 : db $3e,$00 : dw $99a0
cop #$D0 : db $b4,$01 : dw $999a
jmp $99a0
CrystalRingBarrierLogicOverride2:
cop #$D0 : db $dc,$01 : dw $999a
jmp $99af

JRequireBossDefeatedForStatue6:
cop #$D1 : dw $0179 : db $01 : dw .DoGiveStatue
cop #$D0 : db $f6, $01 : dw .DoGiveStatue
.NoGiveStatue:
cop #$BF : dw .TextNoGiveStatue
rtl
.DoGiveStatue:
cop #$BF : dw $8903
cop #$CC : db $01
rtl
.TextNoGiveStatue:
db $d3
db "heya."
db $cf
db "you look frustrated",$cb
db "about something."
db $cf
db "guess i'm pretty good",$cb
db "at my job, huh?"
db $c0

SR_BabelSpiritTransformAndRespawnEnemies:
sta $0648
jsl LR_ClearMonsterKilledFlags
jsl LR_ForceChangeToWill
rts

}



; Bank $8A
{

; Boss monster death copies some of EBasicMonsterDeath.
org $8aa4a6
if !SettingOrbRando > 0
nop : nop    ; Don't flag self killed yet, in case player's inventory is full.
endif

org $8aa4b8
lda $7F0024,x : beq ++
jsl LR_SecOnMonsterItemFlagA : bcs ++
  cop #$A5 : dl EMonsterDeathDoorOrItem : db $00,$00 : dw $0342
  jsl LR_PrepareMonsterDeathDoorOrb
  bra +++
++:
cop #$D8
+++:
jmp $a4e0






; Speed up the Mine elevator
org $8aa5d6
cop #$83 : db $34,$0f,$07

org $8aa615
cop #$83 : db $34,$10,$08

org $8aa6b6
db $0c : dw $1000
EMineSlave:

org $8aa751
%MTryGiveItemAndFlag(!MineCombatSlaveItem, $a2)
cop #$D0 : db $a2,$00 : dw MineSlaveInvFullResponse
rtl
MineSlaveInvFullResponse:
lda #$a6f9 : sta $00
rtl

org $8aa771
%MTryGiveItemAndFlag(!MineRampSlaveItem, $a3)
cop #$D0 : db $a3,$00 : dw MineSlaveInvFullResponse
rtl

; Exploding worms' death code includes "ldy $06 : cop #$23", which is a bug
;   because COP clobbers Y. Vanilla cop #$23 happens to give Y a value that
;   the code can use anyway, but my cop #$23 does not.
org $8ACBF2
cop #$23
ldy $06

org $8ace9b
; Expedite transform and map change after Viper.
jsl LR_ForceChangeToWill
cop #$C2
lda $09AE : bit #$0800 : beq +
  rtl
+:
cop #$26 : db !MapViperExitString ; $5a : dw $0090,$0070 : db $83,$00,$14
cop #$C1
rtl

org $8afa51
; "Move exits around to make Vampires required for Statue"
db $67 : dw $0178, $01d0 : db $80,$01,$22

}



; Bank $8B
{

; Make Fanger's detection areas cover the arena, in case player moves during quake
org $8b81a0
db $01,$19,$3f,$3f
org $8b81b7
db $01,$2c,$3f,$3f


; Work around the bug where Wat fly code hangs if they spawn with X or Y less than #$0040.
org $8baf4f
db $00 : dw $0000
EAWZipFly:
lda $14 : sta $7F100C,x
lda $16 : sta $7F100E,x
jsr SR_FixWatFlyHomeAndLayer
stz $24


; Wat golems don't fall from the ceiling in pieces in Enemizer
if !SettingEnemizer > 0
org $8bb825
db $00 : dw $0000
cop #$27 : db $0f
cop #$C1
jmp $b8a0
rtl
endif


; Wat scarab death copies some of EBasicMonsterDeath.
org $8BC14d
if !SettingOrbRando > 0
nop : nop    ; Don't flag self killed yet, in case player's inventory is full.
endif

org $8BC15A
lda $7F0024,x : beq ++
jsl LR_SecOnMonsterItemFlagA : bcs ++
  cop #$A5 : dl EMonsterDeathDoorOrItem : db $00,$00 : dw $0342
  jsl LR_PrepareMonsterDeathDoorOrb
  bra +++
++:
cop #$D8
+++:
jmp $c182



; Pyramid orb death copies some of EBasicMonsterDeath.
org $8BC761
if !SettingOrbRando > 0
nop : nop    ; Don't flag self killed yet, in case player's inventory is full.
endif

org $8bc76e
lda $7F0024,x : beq ++
jsl LR_SecOnMonsterItemFlagA : bcs ++
  cop #$A5 : dl EMonsterDeathDoorOrItem : db $00,$00 : dw $0342
  jsl LR_PrepareMonsterDeathDoorOrb
  bra +++
++:
cop #$D8
+++:
jmp $c796



org $8bd32b
jmp $ffe0    ; Infinite death loop condition.

; Extensive text modifications to credits.
{

org $8bd566
db $CB,$AC,$AC,$AC,$AC,$64,$87,$80,$8D,$8A,$A3,$AC,$80,$AC,$8C,$88,$8B,$8B,$88,$8E,$8D,$2A,$C9,$B4,$C8,$CA

org $8bd5ac
db $CB,$AC,$44,$A8,$A4,$A2,$80,$AC,$A3,$A0,$84,$82,$88,$80,$8B,$AC,$A4,$87,$80,$8D,$8A,$A3,$AC,$A4,$8E,$CB,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$8C,$80,$8D,$80,$85,$A2,$84,$80,$8A,$C9,$78,$CE,$CB,$AC,$D6,$4E,$A0,$A2,$8E,$89,$84,$82,$A4,$AC,$D6,$F3,$8D,$8E,$A4,$CB,$AC,$AC,$84,$A8,$88,$A3,$A4,$AC,$D6,$F8,$87,$88,$A3,$AC,$A7,$8E,$A2,$8A,$2A,$C9,$78,$CE,$CB,$AC,$AC,$AC,$AC,$AC,$86,$80,$88,$80,$A4,$87,$84,$82,$A2,$84,$80,$A4,$8E,$A2,$CB,$AC,$AC,$AC,$AC,$AC,$AC,$2A,$81,$8B,$8E,$86,$A3,$A0,$8E,$A4,$2A,$82,$8E,$8C,$C9,$B4,$C8,$CA

org $8bd71c
db $AC,$AC,$AC,$AC,$42,$A2,$84,$80,$A4,$84,$83,$AC,$81,$A9,$CB,$AC,$AC,$AC,$AC,$AC,$AC,$AC,$43,$8E,$8D,$A4,$41,$80,$86,$A5,$4C,$84,$C9,$B4,$C8,$CA,$C1,$03,$04,$C7,$0D,$03,$D2,$00,$D5,$06,$CE,$C2,$12,$D2,$00,$AC,$43,$84,$A6,$A3,$2F,$AC,$62,$80,$84,$A6,$84,$8D,$20,$AB,$AC,$41,$A2,$A9,$8E,$8D,$AC,$67,$CB,$AC,$AC,$AC,$AC,$80,$8D,$83,$AC,$4D,$84,$8E,$8C,$80,$A4,$80,$8C,$A5,$8D,$84,$CB,$AC,$44,$8C,$8E,$64,$A2,$80,$82,$8A,$84,$A2,$AC,$81,$A9,$AC,$40,$A0,$8E,$8A,$80,$8B,$A9,$A3,$8C,$84,$C9,$78,$CE,$CB,$AC,$AC,$AC,$64,$87,$80,$8D,$8A,$A3,$AC,$A4,$8E,$AC,$80,$8B,$8B,$AC,$A4,$87,$84,$CB,$AC,$AC,$80,$8C,$80,$AA,$88,$8D,$86,$AC,$A0,$8B,$80,$A9,$A4,$84,$A3,$A4,$84,$A2,$A3,$4F,$C9,$B4,$C8,$CA

org $8bda09
db $CB,$AC,$AC,$AC,$64,$87,$80,$8D,$8A,$A3,$AC,$85,$8E,$A2,$AC,$A0,$8B,$80,$A9,$88,$8D,$86,$4F,$C9,$B4,$C8,$CA

org $8bdca5
db $D7,$42,$80,$AC,$8C,$88,$8D,$A5,$A4,$84,$2A,$2A,$2A,$CB,$D6,$F7,$D6,$9D,$A4,$8E,$AC,$47,$80,$8C,$8B,$84,$A4,$0D,$C9,$B4,$C8,$CA

org $8bdd48
db $65,$8C,$2A,$2A,$2A,$CB,$48,$AC,$D6,$FB,$A7,$8E,$A2,$A2,$A9,$AC,$80,$81,$8E,$A5,$A4,$CB,$D6,$D7,$A4,$8E,$8E,$AC,$8C,$A5,$82,$87,$2A,$2A,$2A,$C9,$B4,$C8,$CA

org $8bddf6
db $D6,$63,$81,$A5,$A4,$2A,$2A,$2A,$C9,$B4,$C8,$CA

org $8bde16
db $63,$87,$87,$2A,$2A,$2A,$AC,$87,$84,$A2,$84,$AB,$CB,$D6,$98,$D6,$D0,$81,$80,$82,$8E,$8D,$2A,$C9,$B4,$C8,$CA

org $8bdee2
db $CB,$AC,$D6,$53,$88,$A4,$AB,$AC,$A3,$87,$8E,$A7,$0E,$A3,$AC,$8E,$A6,$84,$A2,$2A,$C9,$B4,$C8,$CA

org $8be075
db $cd : dl TextCreditsPlaytesterListOverflow
db $c9, $f0
db $c8
db $ca

}



; Replace sound type selection with difficulty selection.
table "table_dialogue.txt",rtl
org $8be43f
lda #$0001 : sta $0d90    ; Default is Intermediate
org $8be4ae
db $03    ; 3 difficulty levels available

; Entr'acte: upon starting a new game, set IOGR flags.
org $8be515
if !StartAtWarpLocation == 1
cop #$26 : db !StartWarpString
else
cop #$26 : db $08 : dw $0050, $00a0 : db $80, $00, $12
endif
jmp $fd00

; Back to difficulty settings.
org $8be7b5
db $03    ; --- and on the other menu too
org $8bf5d2
db "Level"    ; Change "Sound" to "Level"
org $8bf55a
db "Level"    ; --- and on the other menu too
org $8bf667    ; Pointers to level name texts
dw TextDifficultyLevel0
dw TextDifficultyLevel1
dw TextDifficultyLevel2
dw TextDifficultyLevel3

org $8bf8c4
dw $fa47    ; Overworld name pointer for map $DF DS, moved from map $E0.



org $8bfa74
; Bank $8B free space.

SR_FixWatFlyHomeAndLayer:
cop #$B6 : db $30
lda $7f100c,x : cmp #$0050 : bcs +
  lda #$0050 : sta $7f100c,x
+:
lda $7f100e,x : cmp #$0050 : bcs +
  lda #$0050 : sta $7f100e,x
+:
rts



org $8bfcc0    ; Use some free space for difficulty level names
TextDifficultyLevel0:
db "Beginner____",$ca
TextDifficultyLevel1:
db "Intermediate",$ca
TextDifficultyLevel2:
db "Advanced____",$ca
TextDifficultyLevel3:
db "Expert______",$ca


org $8bfd00
; switches.bin, game initialization
{
lda.w #(!HieroOrder1+(!HieroOrder2<<8)) : sta $0a58
lda.w #(!HieroOrder3+(!HieroOrder4<<8)) : sta $0a5a
lda.w #(!HieroOrder5+(!HieroOrder6<<8)) : sta $0a5c
lda.w #!AutotrackerLogicAndKaraVal : sta $0a5e
cop #$CD : dw (!Statue1Required*$02f8)    ; Flag for autotracker.
cop #$CD : dw (!Statue2Required*$02f9)    ; Flag for autotracker.
cop #$CD : dw (!Statue3Required*$02fa)    ; Flag for autotracker.
cop #$CD : dw (!Statue4Required*$02fb)    ; Flag for autotracker.
cop #$CD : dw (!Statue5Required*$02fc)    ; Flag for autotracker.
cop #$CD : dw (!Statue6Required*$02fd)    ; Flag for autotracker.
lda.w #(($!Jeweler1Cost)<<8) : sta $0a48
lda.w #(($!Jeweler2Cost)+(($!Jeweler3Cost)<<8)) : sta $0a4a
lda.w #(($!Jeweler4Cost)+(($!Jeweler5Cost)<<8)) : sta $0a4c
lda.w #(($!Jeweler6Cost)+(($!Jeweler7Cost)<<8)) : sta $0a4e
cop #$CD : dw (!SettingStatuesPlayerChoice*$02fe)    ; Flag for autotracker.
cop #$CD : dw (!SettingOpenMode*$02ff)    ; Flag for autotracker.
if !SettingOpenMode == 1
lda.w #%1011111011010011 : tsb $0a02   ; Flags $10/6/7/9/a/b/c/d + OpenMode $11/4/f
else
lda.w #%0011111011000001 : tsb $0a02   ; Flags $10/6/7/9/a/b/c/d
endif
cop #$CC : db $26
cop #$CC : db $27
if !SettingOpenMode == 1
cop #$CC : db $2a
endif
lda.w #%1010100000000000 : tsb $0a06   ; Flags $3b/d/f
if !SettingOpenMode == 1
lda.w #%0000011010000010 : tsb $0a08   ; Flags $47/9/a + OpenMode $41
else
lda.w #%0000011010000000 : tsb $0a08   ; Flags $47/9/a
endif
lda.w #%0000000111000000 : tsb $0a0a   ; Flags $56/7/8
lda.w #%0101110111110000 : tsb $0a0c   ; Flags $64/5/6/7/8/a/b/c/e
lda.w #%0011010011111110 : tsb $0a0e   ; Flags $71/2/3/4/5/6/7/a/c/d
lda.w #%1011100011011100 : tsb $0a10   ; Flags $82/3/4/6/7/b/c/d/f
lda.w #%0010000010011111 : tsb $0a12   ; Flags $90/1/2/3/4/7/d
lda.w #%1111001010110000 : tsb $0a14   ; Flags $a4/5/7/9/c/d/e/f
if !SettingEnemizer >= 2
cop #$CC : db $a0
cop #$CC : db $a1
endif
lda.w #%0000000001001111 : tsb $0a16   ; Flags $b0/1/2/3/6
lda.w #%1110000001001101 : tsb $0a1a   ; Flags $d0/2/3/6/d/e/f
if !StartLocationId == 19    ; Lilly's door and DS are open if starting at back of Edward's
cop #$CD : dw $0113
cop #$CD : dw $0116
elseif !StartLocationId == 46   ; Mine hidden DS is open if starting there
cop #$CD : dw $0132
elseif !StartLocationId == 47   ; Mine fences open if starting at back of Mine
cop #$CD : dw $0134
cop #$CD : dw $0135
cop #$CD : dw $0136
;elseif !StartLocationId == 122 || !StartLocationId == 124
;; Wat entrance stairs are open if starting in Wat
;cop #$CD : dw $016c
endif
cop #$CE : db $F4   ; For Apocalypse Gaia.
stz $0bfc   ; Default to fast item-get text speed.
lda #$2800 : trb $09ae
jsl $80f49a
cop #$E0
}

warnpc $8bfe40
org $8bfe40
; infdeath.bin, text for winning RJM with 0 HP
{
db $C1
db $03,$04
db $C7
db $0D,$03,$D2,$00
db $C2
db $13,$D2,$00,$D5,$06,$D6,$63,$A9,$8E,$A5,$AC,$D6,$B3,$88,$A4,$AC,$87,$84,$A2,$84,$2A
db $C9
db $B4
db $CB
db $CB
db $48,$AC,$A3,$A5,$A0,$A0,$8E,$A3,$84,$AC,$48,$AC,$D6
db $CA
db $CB
db $82,$8E,$8D,$86,$A2,$80,$A4,$A5,$8B,$80,$A4,$84,$AC,$D7
db $C7
db $69,$8E,$A5,$AC
db $CB
db $D6,$80,$A3,$8E,$AC,$82,$8B,$8E,$A3,$84,$AC,$A4,$8E,$AC,$A7,$88,$8D,$8D,$88,$8D,$86,$2A
db $C9
db $B4
db $CB
db $CB
db $D6,$62,$87,$80,$A0,$A0,$84,$8D,$A3,$AC,$8D,$8E,$A7,$AB,$AC,$A9,$8E,$A5,$AC
db $CB
db $80,$A3,$8A,$0D,$AC,$D6,$63,$80,$85,$A4,$84,$A2,$AC,$D6,$D6
db $CB
db $A4,$84,$A8,$A4,$AC,$88,$A3,$AC,$85,$88,$8D,$88,$A3,$87,$84,$83,$AB,$AC,$A9,$8E,$A5,$AC
db $CB
db $D6,$EF,$83,$88,$84,$2A
db $C9
db $B4
db $CB
db $CB
db $4E,$A6,$84,$A2,$2A,$AC,$40,$8D,$83,$AC,$8E,$A6,$84,$A2,$2A,$AC,$40,$8D,$83,$AC,$8E,$A6,$84,$A2,$2A
db $C9
db $B4
db $CB
db $CB
db $48,$AC,$D6,$D8,$D6,$6B,$85,$88,$A8,$88,$8D,$86,$AC
db $CB
db $A4,$87,$88,$A3,$2A,$AC,$D6,$50,$D7,$8F
db $CB
db $D6
db $C8
db $48,$AC,$D6,$7A,$83,$8E,$AC,$A4,$8E,$AC
db $CB
db $A3,$A4,$8E,$A0,$AC,$D6,$D6,$A0,$A5,$A2,$86,$80,$A4,$8E,$A2,$A9,$AC,$8E,$85,$AC
db $CB
db $88,$8D,$85,$88,$8D,$88,$A4,$84,$AC,$83,$84,$80,$A4,$87,$2A
db $C9
db $B4
db $CB
db $CB
db $D6,$30,$A3,$8E,$8C,$84,$83,$80,$A9,$AC,$48,$AC,$D6,$EF,$85,$88,$A8,$AC
db $CB
db $88,$A4,$2A
db $C9
db $B4
db $CB
db $CB
db $41,$A5,$A4,$AC,$A9,$8E,$A5,$AC,$A3,$84,$84,$AB,$AC,$48,$0E,$8C,$AC,$D7,$95
db $CB
db $A1,$A5,$88,$A4,$84,$AC,$8B,$80,$AA,$A9,$2A
db $C9
db $B4
db $CB
db $CB
db $2D,$41,$A5,$A4,$AC,$41,$80,$86,$A5,$AB,$2E,$AC,$A9,$8E,$A5,$AC,$A3,$80,$A9,$AB,$AC,$2D,$A9,$8E,$A5,$AC
db $CB
db $A4,$8E,$8E,$8A,$AC,$A4,$87,$84,$AC,$D6,$DF,$A4,$8E,$AC,$82,$8E,$83,$84,$AC
db $CB
db $D6,$D6,$A4,$84,$A8,$A4,$2A,$2E
db $C9
db $B4
db $CB
db $CB
db $69,$84,$A3,$2A,$AC,$69,$84,$A3,$AC,$48,$AC,$83,$88,$83,$2A
db $C9
db $B4
db $C8
db $CA
db $FF,$FF,$FF,$FF,$FF,$FF
lda $0aca : beq +
cop #$BF : dw $d558
jmp $d32f
+:
cop #$BF : dw $fe40
cop #$E0
}

}



; Bank $8C
{

org $8c8000
incsrc "iogr_8C_actor_table.asr"
warnpc $8CE5E5

; For Apocalypse Gaia, we make various changes to the Comet and DG code.
org $8ceb74
if !ApocalypseGaia == 1
; The Comet's face and Dark Gaia live on BG1, the Comet's surface and the sky on BG2.
; This thinker hides BG1 at the start of the map, then after Will lands
; its pointer is changed to a new spot that reveals BG1 and thus the Comet's face.
; After the Comet dies, it restores this thinker to $8ceb76 to hide its face again;
; then when spawning Dark Gaia it sends the thinker back to $eba1 once again
; to create a visual effect over its body; then to $ebf7 once Dark Gaia is on-screen,
; then to $ec35 when the latter dies.
; So this is "BG1 Invisible":
db $00,$08
ECometBG:
{
jsl LR_ClearCache
lda #$0016 : sta $212C
lda #$0282 : sta $2130
lda #$1810 : sta $2107
;sep #$20                     ;<--Branch
;lda #$16 : sta $212C   ; Enable BG2,BG3,OBJ on main screen.
;stz $212D             ; Enable nothing on subscreen.
;lda #$82 : sta $2130  ; CMath, clip colors in window, use Subscreen addition.
;lda #$02 : sta $2131 ; Additive color math on BG2.
;lda #$10 : sta $2107 ; BG1 tilemap is at #$10 << 9 = $2000 (standard).
;lda #$18 : sta $2108 ; BG2 tilemap is at #$18 << 9 = $3000 (standard).
;rep #$20
cop #$C2 ; Set pointer here and delay 1 frame.
;cop #$D0                     ;[$8CEB76] ; Refresh screen if leaving inv.
;  db $FF,$00 : dw ECometBG
bit $0A1E : bpl ECometBG
rtl			;  these options refresh every frame.
}

; The Comet sets the above's pointer to here after Will lands.
; This is "BG1 Translucent and Tinted like the Comet".
.AfterLanding:
{
jsl LR_ClearCache
lda #$1810 : sta $2107
lda #$0217 : sta $212C
lda #$1182 : sta $2130
;sep #$20                     ;<--Branch
;lda #$17 : sta $212C ; Flag #$01 enables BG1 on main screen.
;inc a : sta $2108 ; BG2 tilemap at same place as above.
;lda #$02 : sta $212D ; Only BG2 enabled on subscreen.
;lda #$82 : sta $2130 ; Color math settings same as before.
;lda #$10 : sta $2107 ; BG1 tilemap at same place as above.
;inc a : sta $2131 ; Additive color math on BG1 and OBJ.
;rep #$20
cop #$C2
;cop #$D0        ; [$8CEBA1] ; Refresh screen if leaving inv.
;  db $ff,$00 : dw .AfterLanding
bit $0A1E : bpl .AfterLanding
rtl
}

; Vanilla doesn't use this, so I'm modding it for AG.
.AGP1:
{
jsl LR_PushAndUpdateAGBody
stz $2126 ; and $2127 too: window 1 position
lda #$0017 : sta $212C ; enable o,BG1-3 on main; nothing on sub
sep #$20
inc a : sta $2108 ; BG2 tilemap addr
asl a : sta $2125 ; enable+invert color window 1
lda #$10 : sta $2107 ; BG1 tilemap addr
stz $2130 ; cmath=dir,all; zeroed nowhere
lda #$23 : sta $2131 ; cmath=add, on BG1+2+B
rep #$20
cop #$C2
bit $0A1E : bpl .AGP1
rtl
}

.AGP3:
{
jsl LR_PushAndUpdateCometBG
stz $2126 ; and $2127 too: window 1 position
sep #$20
lda #$15 : sta $212C ; enable o,BG1,3 on main
lda #$18 : sta $2108 ; BG1+2 are the same
asl a : sta $2125 ; enable+invert color window 1
lda #$10 : sta $2107 ; BG1 tilemap addr
lda #$02 : sta $2130 ; cmath=sub,all; zeroed nowhere
sta $212D ; enable BG2 on sub
lda #$33 : sta $2131 ; cmath=add, on O+BG1+2+B
rep #$20
cop #$C2
bit $0A1E : bpl .AGP3
rtl
}

; This one occurs once Dark Gaia is on-screen.
.DGOnScreen:
{
jsl LR_ClearCache
stz $2126 ; and $2127 too: window 1 position
sep #$20
lda #$17 : sta $212C ; enable o+BG1-3 on main
inc a : sta $2108 ; BG2 tilemap addr
asl a : sta $2125 ; enable+invert color window 1
stz $212D ; nothing on subscreen
lda #$22 : sta $2130 ; cmath=addsub, inside-window-only
lda #$03 : sta $2131 ; cmath=add, on BG1&2
lda #$10 : sta $2107 ; BG1 tilemap addr
lda #$57 : sta $7F0C02 ; color adder
rep #$20
cop #$C2
;cop #$D0                     ;[$8CEBF7]
;  db $FF,$00 : dw .DGOnScreen
bit $0A1E : bpl .DGOnScreen
rtl
}

; In final death.
; This places a colorful tinge over all BGs including BG3.
.DGDead:
{
jsl LR_ClearCache
lda #$0017 : sta $212C ; enable obj,BG1-3 on main; nothing on sub
lda #$3F80 : sta $2130 ; cmath=fixed,everywhere,zeroed first in window; cmath=add, all layers
sep #$20                     
stz $2125 ; disable windows all layers
lda #$18 : sta $2108 ; BG2 tilemap addr
lda #$10 : sta $2107 ; BG1 tilemap addr
rep #$20
cop #$C2
;cop #$D0                     ;[$8CEC35]
;  db $FF,$00 : dw .DGDead
bit $0A1E : bpl .DGDead
rtl
}

TDGMouthLaser:
{
lda #$0004 : sta $7F000E,x
lda #$0000
 sta $7F0000,x
 sta $7F0002,x
 sta $7F0006,x
cop #$C1
phd
 lda #$0000 : tcd
tay
lda $7F0000,x
lsr a
bcc +$03
 ldy #$0200
sep #$20
 phb
 lda #$7E
 pha
 plb
rep #$20
lda $7F0002,x : inc a : inc a
 sta $7F0002,x : sta $0E
lda #$857A : sta $18
lda #$00FF : sta $7C01,y
sep #$20
lda #$45 : sta $7C00,y
iny : iny : iny
.LoopBody:
lda #$04 : sta $7C00,y
lda $18 : dec a : sta $18 : sta $7C01,y
lda $19 : inc a : sta $19 : sta $7C02,y
iny : iny : iny
dec $0E                      
bpl .LoopBody ;(-$1C)              ;[$8CECBB] 
rep #$20
lda #$FF01 : sta $7C00,y
lda #$0000 : sta $7C02,y
plb
pld
lda $7F0000,x
lsr a
bcs +$08                     ;[$8CECFE] 
 cop #$02 : db $00,$7C,$7E,$26 ; HDMA to window pos
bra +$06                     ;[$8CED04] 
 cop #$02 : db $00,$7E,$7E,$26 ; HDMA to window pos
lda $7F0000,x : inc a : sta $7F0000,x
lda $7F0002,x
cmp #$0024 : bcs +$01
 rtl
lda #$0023 : sta $7F0002,x
lda $7F0006,x : inc a : sta $7F0006,x
cop #$CE : db $02
cop #$DA : db $01
lda #$00FF : sta $2126 ; window covers screen
cop #$3D
rtl
}

ECometSpawnPalette:
cop #$37 : db $7D
bra EDGMouthLaserPalette_DoAndDie

ECometDeathPalette:
cop #$37 : db $7F
bra EDGMouthLaserPalette_DoAndDie

EDGMouthLaserPalette:
cop #$37 : db $69
.DoAndDie:
cop #$39
cop #$E0


endif
warnpc $8CED4B

org $8ceaba
; The AG code changes the addresses of some of these thinkers.
if !ApocalypseGaia == 1
db $00 : dl ECometBG-2
db $71 : dl TIndexedPaletteBundle-2
db $00 : dl ECometBG2ShimmerEndpoint-2
db $00 : dl ECometBG2ShimmerA-2
db $00 : dl ECometBG2ShimmerB-2
db $00 : dl ECometBG2ShimmerC-2
db $FF
endif
warnpc $8CEAD3

org $8ceeaa
if !ApocalypseGaia == 1
db $00,$00,$21
EComet:
lda #$0010 : tsb $12
lda #$0081 : sta $14
lda #$00EA : sta $16
jsl LR_SetupPlayerForComet    ; replenish herbs if applicable; set ptr to "falling"; restore camera
lda #$0800 : tsb $09AE
cop #$C1
lda $09AE
bit #$0800 : beq +$01
 rtl
cop #$D0 : db $F4,$01 : dw ECometDeath
cop #$9B : dl ECometSpawnPalette  ;[Child: $8CED37] <--Branch
cop #$C2
lda.w #ECometBG_AfterLanding : sta $0F00
cop #$57 : dl ECometDeath ;db $88,$EF,$8C
cop #$04 : db $10
cop #$DA : db $FE
cop #$80 : db $1F
cop #$89
-:
cop #$58 : dw .OnHit        ;[$8CEF3C] 
lda #$2300 : trb $10
cop #$A5 : dl ECometAttack : db $00,$00,$01,$03    ;[Child: $8CF550] 
sty $24
lda #$0064 : sta $26
cop #$C1
dec $26 : bmi +$01
 rtl
lda #$2300 : tsb $10
--:
cop #$DB : dw $01DF
bra -    ;(-$2B)              ;[$8CEF11] 
.OnHit:
lda #$2000 : tsb $10
cop #$A2 : dl .HitFlicker : dw $2300    ;[Child: $8CEF6D] 
cop #$CA : db $10                 
{
ldy $24                      
beq +$09                     ;[$8CEF5A] 
 lda $0010,y : ora #$2000 : sta $0010,y
cop #$C2                     ;<--Branch
ldy $24                      
beq +$09                     ;[$8CEF69] 
 lda $0010,y : and #$DFFF : sta $0010,y
}
cop #$CB                     ;<--Branch
bra --    ;(-$37)              ;[$8CEF36] 

.HitFlicker:
cop #$CA : db $10            ;<--Child
{
lda #$0216 : sta $212C
cop #$C2                     
lda #$0217 : sta $212C
}
cop #$CB
cop #$E0                     

ECometDeath:
cop #$CC : db $03          ;<--Delayed ; Death of Comet.
lda #$2300 : tsb $10
phx ; Clear Comet from WRAM tilemap. No visible effect until screen scroll.
 lda $069E : tax : lda #$0100 : clc : jsl LR_MassSTZ
plx
ldy $24                      
beq +   ;$09               ;[$8CEFA6] 
 lda $0010,y : ora #$2000 : sta $0010,y
+
cop #$9B : dl ECometDeathPalette ;[Child: $8CED3E] <--Branch
cop #$DA : db $3B                 
lda.w #ECometBG : sta $0F00
cop #$3C : dl TFade012NormalToWhite ;[Child: $80B7CE] ; Palette thinker 1.
cop #$DA : db $77                 
lda #$AD44 : sta $7F0020,x
lda $AD44 : and #$00FF : sta $7F0026,x
lda #$2301 : sta $10
lda #$1000 : tsb $12
lda #$0080 : tsb $09EC
cop #$C2
lda #$0800 : tsb $09AE
xba : trb $1010
cop #$CA : db $80                 ; Scroll of DGBody onto screen starts here.
{
lda $068E : inc : inc : sta $06C2
ldy $0056
-:
lda $0010,y                  ;<--Branch
bit #$0400                   
beq +   ;+$0A              ;[$8CF016] 
 lda $0016,y : inc : inc : sta $0016,y
+:
lda $0006,y                  ;<--Branch
tay
bne -    ;(-$18)              ;[$8CF004] 
}
cop #$CB                     ; End DGBody screen scroll loop.
lda #$0008 : tsb $1010
cop #$CC : db $01
cop #$D0 : db $F4,$01 : dw EDarkGaia_OnDeath_PlayerRespawn
cop #$C2
cop #$3C : dl TFade012WhiteToNormal ;[Child: $80B7D8] ; Palette thinker 2.
lda.w #ECometBG_AfterLanding : sta $0F00
cop #$DA : db $63
lda.w #ECometBG_DGOnScreen : sta $0F00
cop #$DA : db $63                 
lda #$0080 : trb $09EC
cop #$32 : db $9D
cop #$33
cop #$A2 : dl EDGFlame_Init : db $01,$03    ;[Child: $8CF4E3] 
tya : sta $7F0010,x
cop #$A2 : dl EDGBubbleSpawner_Left : db $00,$22 ;[Child: $8CF3FC] 
cop #$A2 : dl EDGBubbleSpawner_Right : db $00,$22 ;[Child: $8CF403] 
cop #$58 : dw $0000
lda #$0080 : sta $14
lda #$0150 : sta $16
lda #$2000 : trb $10
lda #$0001 : tsb $12
cop #$80 : db $03
cop #$89
EDarkGaia:
.Main:
cop #$57 : dl EDarkGaia_OnDeath
.MainNoDeathPointer:
cop #$C1                     
lda $7F0012,x                
bmi EDarkGaia_TryAttack   ; +$0B   ;[$8CF0A2] 
dec a : sta $7F0012,x
lda #$0000                   
jmp EDarkGaia_SpawnLightning      ;[$8CF13B] 

.TryAttack:
cop #$73                     ;<--Branch
and #$0007 : sta $0000
cop #$D9                     ;[$8CF13B] [$8CF13B] [$8CF0C0] [$8CF0C0] 
  dw $0000,EDarkGaia_AttackD9
.AttackD9:
  dw EDarkGaia_SpawnLightning,EDarkGaia_SpawnLightning
  dw EDarkGaia_DoMouthLaser,EDarkGaia_DoMouthLaser
  dw EDarkGaia_DoMouthLaser,EDarkGaia_DoMouthLaser
  dw EDarkGaia_DoMouthLaser,EDarkGaia_DoMouthLaser

;org $8cf0c0
.DoMouthLaser:
lda #$0003 : sta $7F0012,x
lda $7F0010,x                
tay                          
lda.w #EDGFlame_WithMouthLaser
 sta $0000,y
lda #$0000 : sta $0008,y
lda #$0200 : trb $10
cop #$80 : db $17                 
cop #$89                     
..NoSpriteOrFlame:
lda #$0200 : tsb $10
lda #$0057 : sta $7F0C02
cop #$3C                     ;[Child: $8CEC65] 
  dl TDGMouthLaser
cop #$CC : db $02                 
cop #$A5 : dl EDGMouthLaserPalette : db $00,$00,$00,$20    ;[Child: $8CED45] 
cop #$07 : db $20                 
cop #$A5 : dl EDGMouthLaserHitbox : db $00,$00,$00,$22    ;[Child: $8CF266] 
jsr .SR_IfAGThenRtl

.WhileMouthLaser:
cop #$80 : db $1A            ;<--Branch
cop #$89                     
cop #$D0                     ;[$8CF10B] 
  db $02,$01 : dw EDarkGaia_WhileMouthLaser

.AfterMouthLaser:
lda #$00FF : sta $2126
cop #$84 : db $06,$3C
cop #$8A
cop #$80 : db $18
cop #$89
lda $7F0010,x
tay
lda.w #EDGFlame_AfterMouthLaser  ; #$F4FF
 sta $0000,y
lda #$0000 : sta $0008,y
jmp EDarkGaia_Main

.SpawnLightning:
cop #$A5 : dl EDGLightning_Left : db $00,$00,$01,$03    ;[Child: $8CF2F2] <--Branch
cop #$A5 : dl EDGLightning_Right : db $00,$00,$01,$03    ;[Child: $8CF31F] 
jsr .SR_IfAGThenRtl
cop #$DB : dw $012B
jmp EDarkGaia_Main          ;[$8CF08A] 

.OnDeath:
lda #$0030 : tsb $0A00 ;cop #$CC : db $04 ;<--Delayed
jsl LR_SetPlayerImmuneAndFrozen
jsl LR_StorePlayerHerbCount
cop #$A0 : dl EDarkGaiaDeathExplosionSpawner : dw $0080,$0170,$2300 ; cop #$A5 : db $01,$F2,$8C,$00,$E0,$00,$23    ;[Child: $8CF201] 
cop #$A0 : dl EDarkGaiaDeathLightning1 : dw $0060,$01b8,$0B12 ; cop #$A5 : db $CE,$F1,$8C,$00,$00,$00,$03    ;[Child: $8CF1CE] 
cop #$A0 : dl EDarkGaiaDeathLightning1 : dw $00b1,$01b8,$0B12 ; cop #$A5 : db $DF,$F1,$8C,$00,$00,$00,$03    ;[Child: $8CF1DF] 
cop #$A0 : dl EDarkGaiaDeathLightning3 : dw $00b4,$01a0,$0B12 ; cop #$A5 : db $F0,$F1,$8C,$00,$00,$00,$03    ;[Child: $8CF1F0] 
cop #$A5 : dl EDarkGaiaDeathPebbles : dw $0000,$2B00 ; cop #$A5 : db $91,$F2,$8C,$00,$00,$00,$28    ;[Child: $8CF291] 
cop #$80 : db $19                 
cop #$89                     
;cop #$80 $1E                 
;cop #$89                     
cop #$3C : dl TFade012NormalToWhite ;[Child: $80B7CE]
lda.w #ECometBG_DGDead : sta $0F00
cop #$DB : dw $0120
..PlayerRespawn:
lda #$0030 : tsb $0A00 ;cop #$CC : db $04 ;<--Delayed
lda #$0080 : trb $09EC
lda #$0150 : sta $16
lda.w #ECometBG_AGP1 : sta $0F00
lda #$2000 : tsb $10
cop #$3C : dl TFade012WhiteToNormal
cop #$DA : db $FF
;stz $065A
lda #$0018 : trb $0A00
;cop #$CE : db $04 : cop #$CE : db $03
cop #$07 : db $0C
cop #$80 : db $1F
; Import some instructions from EAGInit
cop #$9C : dl EAGBackgroundColors : dw $2300
cop #$9C : dl EAGSpriteColors : dw $2300
cop #$A1 : dl EAGScrollOn : dw $2300
cop #$A4 : dl EAGBitP1_InitL : db $c8,$23 : dw $0111
cop #$A4 : dl EAGBitP1_InitR : db $38,$23 : dw $2111
;lda #$2000 : tsb $10
cop #$A4 : dl EAGLauncher_InitL : db $BF,$0B : dw $0301
cop #$A4 : dl EAGLauncher_InitR : db $41,$0B : dw $0301
cop #$07 : db $21
lda #$0003 : sta $24
cop #$C4 : dl EAGCoreP1

.SR_IfAGThenRtl ; JSR here from DG code. Then the DG code can be called by AG.
lda $0A00 : bit #$00E0 : bne +$01 : rts
pla : rtl

; V$8CF1CE
;warnpc $8cf1cf : org $8cf1ce
EDarkGaiaDeathLightning1:
.WithDarkGaiaDeath:
cop #$80 : db $08
cop #$89
lda $0A00 : bit #$0010 : bne .WithDarkGaiaDeath
.Die:
cop #$E0

EDarkGaiaDeathLightning3:
.WithDarkGaiaDeath:
cop #$80 : db $09
cop #$89
lda $0A00 : bit #$0010 : bne .WithDarkGaiaDeath
lda.w #.WithAGMain : sta $00
.WithAGMain:
lda #$2000 : trb $10
txy : lda.w #2*$73 : brk
pha
 and #$000F : adc #$01B0 : sta $16
pla
lsr : lsr : adc #$0068 : sta $14
lda $0036 : lsr : bcs ..Sprite09
..Sprite08:
cop #$80 : db $08
cop #$89
bra ..SleepRandom
..Sprite09:
cop #$80 : db $09
cop #$89
..SleepRandom:
bit $09FF : bvs EDarkGaiaDeathLightning1_Die ; checks flag $06
lda #$2300 : tsb $10
lda.w #.WithAGMain : sta $00
lda.w #2*$73 : brk
lsr : sta $08
rtl

; V$8CF201
EDarkGaiaDeathExplosionSpawner:
stz $24
cop #$88 : dl $8ee000
-
lda $24 : adc #$0003 : sta $24
cop #$CA : db $04 ; cop #$ca : db $0C                 
{
cop #$A5 : dl EDarkGaiaDeathExplosion1 : db $00,$00,$02,$03 ; cop #$a5 : db $2F,$F2,$8C,$00,$00,$02,$03    ;[Child: $8CF22F] ; Explosion 1
lda $24 : sta $08 : cop #$C2               
cop #$A5 : dl EDarkGaiaDeathExplosion2 : db $00,$00,$02,$03 ; cop #$a5 : db $3C,$F2,$8C,$00,$00,$02,$03    ;[Child: $8CF23C] ; Explosion 2
lda $24 : sta $08 : cop #$C2 ; cop #$DA $03                 
}
cop #$CB                     
lda $24 : cmp #$0012 : bcc -
cop #$DA : db $12
cop #$A5 : dl EDarkGaiaDeathExplosion2 : db $00,$00,$02,$03
cop #$E0                     

; V$8CF22F
EDarkGaiaDeathExplosion1:
cop #$07 : db $06                 ;<--Child
lda #$0020 : jsl LR_SetRandomPosition ;jsr $F249                    ;[$8CF249] 
cop #$80 : db $07                 
cop #$89                     
cop #$E0                     

; V$8CF23C
EDarkGaiaDeathExplosion2:
cop #$07 : db $06                     ;<--Child
lda #$0020 : jsl LR_SetRandomPosition ;jsr $F249                    ;[$8CF249] 
cop #$80 : db $01                 
cop #$89                     
cop #$E0                     

; V$8CF266
;warnpc $8cf267 : org $8cf266
EDGMouthLaserHitbox:
lda #$AD50 : sta $7F0020,x
;lda $AD50 : and #$00FF : sta $7F0026,x
lda #$0080 : sta $14
lda #$01E0 : sta $16
cop #$DA : db $09
lda #$2000 : trb $10
cop #$84 : db $1F,$0A             
cop #$8A                     
cop #$E0                     

; V$8CF291
EDarkGaiaDeathPebbles:
lda #$0220                   ;<--Child
sta $16                      
cop #$CA : db $03
{
cop #$9C : dl .NormalRocks : dw $0B12 ; db $00,$0B    ;[Child: $8CF2BB] 
cop #$DA : db $19
cop #$9C : dl .SmallRocks : dw $0B12 ; db $00,$0B    ;[Child: $8CF2C8] 
cop #$DA : db $19
cop #$9C : dl .TinyRocks : dw $0B12 ; db $00,$0B    ;[Child: $8CF2D5] 
cop #$DA : db $19
}
cop #$CB
.Die:
cop #$E0

; V$8CF2BB
.NormalRocks:
cop #$CA : db $02
cop #$73 : sta $14
cop #$83 : db $1B,$00,$06
bra .Animate ; +$1A          ;[$8CF2E2] 
.SmallRocks:
cop #$CA : db $02
cop #$73 : sta $14
cop #$83 : db $1C,$00,$06
bra .Animate ; +$0D          ;[$8CF2E2] 
.TinyRocks:
cop #$CA : db $02
cop #$73 : sta $14
cop #$83 : db $1D,$00,$08
.Animate:
cop #$89
.AnimateRestart:
cop #$B1                     ;<--Branch
cop #$80 : db $FF
cop #$89
lda $16
cmp #$00E0
bcs .AnimateRestart ;(-$0E)      ;[$8CF2E2] 
;cop #$D0 : db $05,$01 : dw .Die
;lda $0A00 : bit #$0020 : bne .Die
lda #$0220 : sta $16
cop #$CB
cop #$E0

; V$8CF2F2
;org $8cf2f2
EDGLightning:
.Left:
lda #$0031 : sta $14        ;<--Child
jsr .CommonInitSR
cop #$80 : db $09
cop #$89
lda #$0010 : sta $14
lda #$0150 : sta $16
cop #$80 : db $0A
cop #$89
lda #$0004 : sta $26
bra .Chase ; was JMP for no reason... ;[$8CF353] 
.Right:
cop #$BB                     ;<--Child
lda #$0082 : tsb $12
lda #$00CF : sta $14
jsr .CommonInitSR
cop #$80 : db $09
cop #$89
lda #$00F0 : sta $14
lda #$0150 : sta $16
cop #$80 : db $0A
cop #$89
lda #$000C : sta $26
;jmp $F353                    ;[$8CF353] 
.Chase:
cop #$07 : db $20
cop #$5B : db $10,$00 ; Die on contact with player?
lda #$00A0 : tsb $12
lda #$AD48 : sta $7F0020,x
;lda $AD48 : and #$00FF : sta $7F0026,x
cop #$80 : db $0B                 
cop #$89
lda #$0100 : trb $10 : tsb $12    ; Cleverness overload...
..Immediate:
cop #$A2 : dl EChaser : db $00,$20    ;[Child: $80E683] 
lda #$800B : sta $7F000A,x
lda #$0003 : sta $7F0014,x
lda #$1000 : sta $0024,y
phx : tyx
 lda $26 : sta $7F000E,x
plx
lda #$0002 : tsb $10
cop #$84 : db $0B,$05
cop #$8A
phx
 ldx $06
 lda $7F002C,x : sta $0000
 lda $7F002E,x                
plx                          
 sta $7F100E,x                
lda $0000 : sta $7F100C,x
cop #$A9
-:
cop #$C1                     ;<--Branch
cop #$8B
lda $08 : sta $24
stz $08
cop #$C1
lda $7F100C,x : sta $7F002C,x
lda $7F100E,x : sta $7F002E,x
dec $24
bmi +$01                     ;[$8CF3E6] 
 rtl                          
bit $10 : bvc -   ;(-$28)    ;[$8CF3C5] 
cop #$E0

.CommonInitSR:
lda #$0197 : sta $16
cop #$9C : dl .SmallSprite : db $01,$03 ;[Child: $8CF3EF] 
rts

; V$8CF3EF
.SmallSprite:
cop #$80 : db $08            ;<--Child
cop #$89                     
cop #$E0                     
;warnpc $8cf3f6

;org $8cf3fc
EDGBubbleSpawner:
.Left:
lda #$0018                   ;<--Child
bra .Both                  ;[$8CF408] 
.Right:
lda #$00E8                   ;<--Child
.Both:
sta $14
lda #$01D8 : sta $16
.RandomWait:
cop #$73                     
lsr : lsr
adc #$0078 : sta $08
cop #$C2                     
cop #$D0                     ;[$8CF4E1] 
  db $04,$01 : dw EDGBubble_BubbleDie
cop #$A2 : dl EDGBubble : db $00,$02    ;[Child: $8CF429] 
bra .RandomWait ;(-$1C)              ;[$8CF40D] 

; V$8CF429
EDGBubble:
cop #$5B : dw $0080          ;<--Child
lda #$00A0 : tsb $12
cop #$84 : db $11,$02
cop #$8A
cop #$80 : db $12
cop #$89
lda #$AD4C : sta $7F0020,x
cop #$07 : db $1D
cop #$57 : dl .OnDeath     ;[Delayed: $8CF4D9] 
lda #$0200 : trb $10
cop #$82 : db $13,$0A             
cop #$89                     
cop #$82 : db $13,$2A             
cop #$89                     
lda #$0000 : sta $7F0026,x
cop #$CA : db $04
{
cop #$C1
cop #$D0                     ;[$8CF4DC] 
  db $04,$01 : dw .BubbleDieWithSprite
cop #$73 : lsr : sbc #$003F : adc $1014
sta $7F0018,x
bpl +$01                     ;[$8CF49D] 
 rtl                          
;cmp #$0108                   ;<--Branch
;bcc +$01                     ;[$8CF4A3] 
;rtl                          
cop #$73 : lsr : sbc #$003F : adc $1016
;cmp #$0100 ; player can't be near top of screen anyway
;bcs +$01                     ;[$8CF4B7] 
;rtl                          
cmp #$01D8                   ;<--Branch
bcc +$01                     ;[$8CF4BD] 
 rtl                          
sta $7F001A,x                ;<--Branch
cop #$22 : db $13,$02
bit $10 : bvs .BubbleDie     ;[$8CF4E1] 
cop #$84 : db $13,$01
cop #$8A
}
cop #$CB
;cop #$57 : db $00,$00,$00

; V$8CF4D9
.OnDeath:
cop #$07 : db $1B            ;<--Delayed
.BubbleDieWithSprite:
cop #$80 : db $11            ;<--Branch
cop #$89                     
.BubbleDie:
cop #$E0                     ;<--Branch


; V$8CF4E3
EDGFlame:
.Init:
lda #$0040 : tsb $12
asl : sta $14
lda #$01AA : sta $16
cop #$A4 : dl EDGFlame_ChildFlameB : db $FC,$FC,$01,$03    ;[Child: $8CF549] 
cop #$A4 : dl EDGFlame_ChildFlameA : db $04,$00,$01,$03    ;[Child: $8CF543] 

.AfterMouthLaser:
ldy $06                      
lda $0010,y : and #$DFFF : sta $0010,y
lda $0006,y
tay                          
lda $0010,y : and #$DFFF : sta $0010,y

.Idle:
cop #$80 : db $00
cop #$89
bra .Idle   ;[$8CF517] 

.Die:
cop #$80 : db $02
cop #$89
cop #$E0

.WithMouthLaser:              ; V$8CF51E
cop #$80 : db $01
cop #$89
ldy $0006,x
lda $0010,y : ora #$2000 : sta $0010,y
lda $0006,y
tay
lda $0010,y : ora #$2000 : sta $0010,y
cop #$80 : db $02
cop #$C1
lda $0A00 : bit #$0020 : bne .Die
rtl

.ChildFlameA:
;warnpc $8cf544 : org $8cf543
cop #$8D : db $0C          ;<--Child
cop #$DA : db $09                 

.ChildFlameB:           ; V$8CF549
cop #$80 : db $0C          ;<--Child
cop #$89
lda $0A00 : bit #$0020 : bne .Die
bra .ChildFlameB ;(-$07) ;[$8CF549] 


; V$8CF550
ECometAttack:
cop #$80 : db $0D                    ;<--Child
cop #$89                     
cop #$80 : db $0E                 
cop #$89                     
cop #$9C : dl ECometFireOrb : db $02,$02    ;[Child: $8CF570] 
cop #$80 : db $0F                 
cop #$89
ldy $24
lda #$0000 : sta $0024,y
cop #$E0

; V$8CF570
ECometFireOrb:
cop #$80 : db $14            ;<--Child
cop #$89                     
cop #$07 : db $1D                 
-
cop #$82 : db $15,$0C        ;<--Branch
cop #$89                     
cop #$D0                     ;[$8CF5AD] 
  db $03,$01 : dw ECometFireDie
lda $16                      
bpl -   ;(-$10)              ;[$8CF578] 
;bpl +$04                     ;[$8CF58E] 
;eor #$FFFF                   
;inc a                        
cmp #$FFD0 ; #$0030                   ;<--Branch
bcs -   ;(-$1B)              ;[$8CF578] 
lda #$2000 : tsb $10
cop #$CA : db $0E                 
cop #$D0                     ;[$8CF5AD] 
  db $03,$01 : dw ECometFireDie
cop #$9C : dl EAGBitP2_FireObject : db $02,$02    ;[Child: $8CF5AF] 
cop #$DA : db $0E                 
cop #$CB                     
ECometFireDie: ; V$F5AD
cop #$E0                     ;<--Branch
endif
warnpc $8cf5ef

}




org $8d8000
incsrc "iogr_8D_asset_table.asr"
warnpc $8DB001

org $8f8fa4
if !SettingFluteless == 1
incbin "iogr_fluteless_melody_anim.bin"    ; So Will whistles instead of playing his flute.
endif


org $90803c
; Inventory sprite pointers for hieroglyphs.
dw !HieroSpritePointer1
dw !HieroSpritePointer2
dw !HieroSpritePointer3
dw !HieroSpritePointer4
dw !HieroSpritePointer5
dw !HieroSpritePointer6

org $908052    ; Add anim pointer for inventory multijewel sprite.
dw $819c
dw $819c
dw $819c
dw $819c
dw $819c
dw AAnimInvMultijewel
dw AAnimInvMultijewel
dw $819c

org $908376
AAnimInvMultijewel:
dw $0007 : dw AMetaspriteInvMultijewel1
dw $0007 : dw AMetaspriteInvMultijewel2
dw $ffff

org $908ea3
AMetaspriteInvMultijewel1:
db $0A,$08,$11,$00
db $F8,$F0,$01,$01,$F8,$10,$F0,$10
db $03
db $00,$08,$03,$0A,$01,$F2,$0C
db $01,$03,$00,$03,$00,$02,$0C
db $01,$00,$00,$00,$00,$02,$0C
AMetaspriteInvMultijewel2:
db $0A,$08,$11,$00
db $F8,$F0,$01,$01,$F8,$10,$F0,$10
db $03
db $00,$07,$03,$09,$01,$F4,$0C
db $01,$03,$00,$03,$00,$02,$0C
db $01,$00,$00,$00,$00,$02,$0C




; Bank $9A / $DA 
; Includes fluteless Will sprite tiles
{

org $da5a37
; Remove a rock, preventing a Spin Dash softlock.
incbin "Tilemap6D.bin"

if !SettingFluteless == 1
fillbyte $00
org $9a8540
fill $60
org $9a8740
fill $60
org $9aa120
fill $40
org $9aa560
fill $20
org $9aa720
fill $60
org $9aa8e0
fill $80
org $9aab00
fill $20
org $9aac60
fill $40
org $9aae60
fill $40
org $9ab400
fill $80
org $9ab600
fill $80
org $9ab800
fill $40
org $9aba00
fill $40
endif

}




org $de28a5
; Add door to Mu Passage tilemap.
incbin "TilemapMuPassage.bin"

org $df2ce7
if !ApocalypseGaia == 1
; Need to make BG2 tilemap 2 high so scrolling works.
db $02
endif

org $df3ea0
ATlMpIncaTileRoomTile:
db 2,2
db !IncaTileRoomCompTilemap


org $df4100
ATlMpIshtarRoom:
db 8,2
db !IshtarRoomCompTilemap




org $a08000

incsrc "iogr_code_overflow.asr"

incsrc "iogr_dialogue_overflow.asr"

if !ApocalypseGaia == 1
incsrc "apocalypse_gaia_2.asr"
endif







