arch 65816
hirom

; Reserved RAM:
; $0bfa = used on radar screen to choose "FORCE" text
; $0bfc = used during item pickup to write text slowly (for chests)
; $0bfe = used during item pickup to flag a stat as maxed out
; Reserved flags:
; $022f - $0247 : Monster item flags $01 - $18
; $0290 - $02af : Monster item flags $19 - $2A, and 13 extras
; $02b0 - $02b1 : Statue placed in the Left/Right Hope Room


LR_SecOnAnyFlagA:
jsl $80b4ba    ; i.e. 3+LR_SecOnFlagA
rtl
LR_SetAnyFlagA:
jsl $80b4c1    ; i.e. 3+LR_SetFlagA
rtl
LR_ClearAnyFlagA:
jsl $80b4c8    ; i.e. 3+LR_ClearFlagA
rtl

; Flags $022f - $0247 (chest block) and $0290 - $02bf (RJ block) are free in IOGR.
; Monster item flags are mapped to a subset of those.
SR_MapMonsterItemFlagA:
dec : clc : adc #$022f : cmp #$0248 : bcc +
  clc : adc #$0048
+:
rts
LR_SecOnMonsterItemFlagA:
jsr SR_MapMonsterItemFlagA
jsl $80b4ba    ; i.e. 3+LR_SecOnFlagA
rtl
LR_SetMonsterItemFlagA:
jsr SR_MapMonsterItemFlagA
jsl $80b4c1    ; i.e. 3+LR_SetFlagA
rtl
LR_ClearMonsterItemFlagA:
jsr SR_MapMonsterItemFlagA
jsl $80b4c8    ; i.e. 3+LR_ClearFlagA
rtl



LR_GiveNormalItemA8OrSec:
{
stz $0bfe    ; Used by Z3 mode to flag whether we're capped on a stat.
php
sep #$20
bit #$80 : bne .IsStatOrPickup
pha
ldy #$0000
.CheckInvSlotEmpty:
lda $0AB4,y : bne ..NotEmpty
jmp .GotEmptyInvSlot
..NotEmpty:
iny : cpy #$0010 : bne .CheckInvSlotEmpty
jmp .InvFull

.IsStatOrPickup:
sec : sbc #$80 : bne +
    jmp .IsHpJewel   ; $80
+:
  dec : bne + 
    jmp .IsStrJewel  ; $81
+:
  dec : bne + 
    jmp .IsDefJewel  ; $82
+:
  dec : beq .IsSmallDp   ; $83
  dec : beq .IsMediumDp  ; $84
  dec : beq .IsBigDp     ; $85
  dec : beq .IsHpPickup  ; $86
  dec : bne + 
    jmp .IsHpJewelItem   ; $87
+:
  dec : bne + 
    jmp .IsStrJewelItem  ; $88
+:
jmp .IsDefJewelItem  ; $89
.IsHpPickup:
rep #$20
lda #$0005 : clc : adc $0B22 : sta $0B22
phd
  txa : tcd
  cop #$A5 : dl $80dd03 : dw $0000, $2F00    ; EHpPickupCounter
pld
cop #$06 : db $22
jmp .ClcAndRtl
.IsSmallDp:
lda #$01 : bra .DoAwardDp
.IsMediumDp:
lda #$02 : bra .DoAwardDp
.IsBigDp:
lda #$05
.DoAwardDp:
rep #$20
and #$00FF : clc : adc $0AD6 : cmp #$03E7 : bcc +
  lda #$03E7
+:
sta $0AD6
cop #$06 : db $22
jmp .ClcAndRtl
.IsHpJewelItem:    ; In Z3 non-Expert, HP that isn't a room reward awards 2 hit points.
if !SettingZ3 == 1 && !SettingOHKO == 0
lda #$80 : trb $09EC
lda $0aca : inc : inc : sta $0aca
  sec : sbc $0ace : sta $0b22
ldy #$0000
jmp .ClcAndRtl
endif
.IsHpJewel:
lda #$80 : trb $09EC
if !SettingOHKO == 0
lda $0ACA : inc : sta $0ACA
  sec : sbc $0ACE : sta $0B22
endif
ldy #$0000
bra .ClcAndRtl
.IsStrJewelItem:
.IsStrJewel:
lda #$80 : trb $09EC
if !SettingZ3 == 1   ; In Z3, STR is capped at 8/4/2/1 for difficulty 0/1/2/3.
phx
  ldx $0b24
  lda $0ade : cmp.l ..MaxStrByDifficulty,x
plx
bcs +
  asl $0ade
  bra ++
..MaxStrByDifficulty:
db 8,4,2,1
+:
lda #$01 : sta $0bfe
++:
else
inc $0ADE
endif
ldy #$0000
bra .ClcAndRtl
.IsDefJewelItem:
.IsDefJewel:
lda #$80 : trb $09EC
if !SettingZ3 == 1   ; In Z3, DEF is capped at 2/2/1/0 for difficulty 0/1/2/3.
phx
  ldx $0b24
  lda $0adc : cmp.l ..MaxDefByDifficulty,x
plx
bcs +
  inc $0adc
  bra ++
..MaxDefByDifficulty:
db 2,2,1,0
+:
lda #$01 : sta $0bfe
++:
else
inc $0ADC
endif
ldy #$0000
bra .ClcAndRtl

.GotEmptyInvSlot:
pla : sta $0AB4,y
  sta $0DB8
  stz $0DB9
ldy #$FF1F
.ClcAndRtl:
plp
clc
rtl
.InvFull:
pla : sta $0DB8
  stz $0DB9
ldy #$FF02
plp
sec
rtl
}

LR_GiveAnyItemA16OrSec:
{
pha
and #$ff00 : cmp #$1000 : bne .ItemIsNotUnlockedDoor
  jmp .GiveUnlockedDoor
.ItemIsNotUnlockedDoor:
.TryGiveItemA8:
lda $01,s : and #$00ff : cmp #$0080 : bcc +
  sec : sbc #$0087
  clc : adc #$0029
+:
sta $0db8
lda $01,s : and #$00ff : cmp #$0006 : bne ..PostHerbCheck
  cop #$D5 : db $06    ; "Remove" herb placeholder item so there's room to "give" an herb.
  sed
    lda $0aaa : clc : adc #$0001 : sta $0aaa
  cld
..PostHerbCheck:
lda $01,s : and #$00ff : cmp #$0087 : bcs ..IsSpecial
..IsNotSpecial:
lda $01,s : and #$00ff : jsl LR_GiveNormalItemA8OrSec : bcs ..InvFull
..GotItem:
cop #$BF : dw ...Text
stz $0db8
stz $0bfc
pla
clc
rtl
...Text:
db $cd : dl .TextItsAnItem
db $c0
..InvFull:
cop #$BF : dw ...Text
stz $0db8
stz $0bfc
pla
sec
rtl
...Text:
db $cd : dl .TextItsAnItem
db "But your inventory's full!"
db $c0
..IsSpecial:    ; Handling for upgrades, duplicate stat items, and Heart Pieces.
lda $01,s : cmp #$008a : bcs ..IsNotStatUpgrade
..IsStatUpgrade:
jsl LR_GiveNormalItemA8OrSec
bra ..GotItem
..IsNotStatUpgrade:
cmp #$008a : beq ...LightUpgrade
cmp #$008b : beq ...DarkUpgrade
...HeartPiece:
php
sep #$20
lda $0b24 : bit #$02 : beq ....DoGiveHp
lda $0a1e : bit #$80 : bne ....CompleteHeart
  ora #$80 : sta $0a1e
  bra ....NoGiveHp
....CompleteHeart:
eor #$80 : sta $0a1e
....DoGiveHp:
plp
lda #$0080 : jsl LR_GiveNormalItemA8OrSec
jmp ..GotItem
....NoGiveHp:
plp
jmp ..GotItem
...LightUpgrade:
inc $0b16
jmp ..GotItem
...DarkUpgrade:
inc $0b1c
jmp ..GotItem

.GiveUnlockedDoor:
pla : and #$00ff
pha
jsl $80b4e0    ; jsl LR_SetFlag10A
lda $01,s : asl : asl : asl : tay
lda $d3ce,y : and #$00ff : cmp $0644 : bne ..PostThisMapCheck
  lda $01,s : jsl $82A363   ; jsl LR_StageMapRearrange
  cop #$33
..PostThisMapCheck:
pla : sta $0db8
cop #$BF : dw ..Text
clc
rtl
..Text:
db $cd : dl .TextItsADoor
db $c0

.TextItsAnItem:
db $d3
db $c5 : dw TextItemGetSpeeds, $0bfc
db $d6,$1d    ; "It's "
db $c5 : dw TextItemGetNames, $0db8
db "!",$cb
db $c5 : dw TextZ3UpgradeMaybeMaxedOut, $0bfe
db $cb
db $ca
.TextItsADoor:
db $d3
db $d5,$00
db "Opened a door!",$cb
db $c5 : dw TextDoorNames, $0db8
db $ca
}

TextItemGetNames:
.Pointers:
{
dw .Null
dw .RedJewel
dw .PrisonKey
dw .IncaStatueA
dw .IncaStatueB
dw .IncaMelody
dw .Herb
dw .DiamondBlock
dw .WindMelody
dw .LolasMelody
dw .Meat
dw .MineKeyA
dw .MineKeyB
dw .MemoryMelody
dw .CrystalBall
dw .MineElevatorKey
dw .MuPalaceKey
dw .PurifyStone
dw .HopeStatue
dw .RamaStatue
dw .MagicPowder
dw .BlueJournal
dw .LancesLetter
dw .Necklace
dw .RussianGlassWill
dw .Teapot
dw .MushroomDrops
dw .BagOfGold
dw .BlackGlasses
dw .GorgonFlower
dw .Hieroglyph1E
dw .Hieroglyph1F
dw .Hieroglyph20
dw .Hieroglyph21
dw .Hieroglyph22
dw .Hieroglyph23
dw .Aura
dw .LolasLetter
dw .FathersJournal
dw .CrystalRing
dw .Apple
dw .HpItem
dw .StrItem
dw .DefItem
dw .LightJewel
dw .DarkJewel
dw .TwoRedJewels
dw .ThreeRedJewels
dw .HeartPiece   ; $30
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .Null
dw .MysticStatue1
}
{
.Null:
db "nothing",$ca
.TwoRedJewels:
db "2 Red Jewels",$ca
.ThreeRedJewels:
db "3 Red Jewels",$ca
.LolasLetter:
db "Lola's letter",$ca
.FathersJournal:
db "your father's",$cb,"journal",$ca
.MushroomDrops:
db "Mushroom Drops",$ca
.LancesLetter:
db "Lance's letter",$ca
.MineKeyA:
db "Mine Key A",$ca
.MineKeyB:
db "Mine Key B",$ca
.LolasMelody:
db "Lola's Melody",$ca
.IncaStatueA:
db "Inca Statue A",$ca
.IncaStatueB:
db "Inca Statue B",$ca
.RedJewel:
db "a Red Jewel",$ca
.CrystalBall:
db "a Crystal Ball",$ca
.HopeStatue:
db "a Statue of Hope",$ca
.BlueJournal:
db "the Blue Journal",$ca
.BagOfGold:
db "a Bag of Tricks",$ca
.Hieroglyph1E:
.Hieroglyph1F:
.Hieroglyph20:
.Hieroglyph21:
.Hieroglyph22:
.Hieroglyph23:
db "a Hieroglyph Tile",$ca
.DefItem:
db "DEF",$ca
.StrItem:
db "STR",$ca
.LightJewel:
db "a Dash Upgrade",$ca
.DarkJewel:
db "a Friar Upgrade",$ca
.RamaStatue:
db "a Rama Statue",$ca
.Herb:
db "an herb",$ca
.Apple:
db "an apple",$ca
.HpItem:
db "HP",$ca
.PrisonKey:
db "the Prison Key",$ca
.IncaMelody:
db "the Inca Melody",$ca
.DiamondBlock:
db "the Diamond Block",$ca
.WindMelody:
db "the Wind Melody",$ca
.Meat:
db "the Large Roast",$ca
.MemoryMelody:
db "the Memory Melody",$ca
.MineElevatorKey:
db "the Elevator Key",$ca
.MuPalaceKey:
db "the Mu Palace Key",$ca
.PurifyStone:
db "the Purification",$cb,"Stone",$ca
.MagicPowder:
db "the Magic Dust",$ca
.Necklace:
db "the Necklace",$ca
.RussianGlassWill:
db "the Will",$ca
.Teapot:
db "the Teapot",$ca
.BlackGlasses:
db "the Black Glasses",$ca
.GorgonFlower:
db "the Gorgon Flower",$ca
.Aura:
db "the Aura",$ca
.CrystalRing:
db "the Crystal Ring",$ca
.HeartPiece:
db "a Heart Piece",$ca
.MysticStatue1:
db "a Mystic Statue",$ca
}

TextDoorNames:
.Pointers:
{
dw .Door00
dw .Door01
dw .Door02
dw .Door03
dw .Door04
dw .Door05
dw .Door06
dw .Door07
dw .Door08
dw .Door09
dw .Door0A
dw .Door0B
dw .Door0C
dw .Door0D
dw .Door0E
dw .Door0F
dw .Door10
dw .Door11
dw .Door12
dw .Door13
dw .Door14
dw .Door15
dw .Door16
dw .Door17
dw .Door18
dw .Door19
dw .Door1A
dw .Door1B
dw .Door1C
dw .Door1D
dw .Door1E
dw .Door1F
dw .Door20
dw .Door21
dw .Door22
dw .Door23
dw .Door24
dw .Door25
dw .Door26
dw .Door27
dw .Door28
dw .Door29
dw .Door2A
dw .Door2B
dw .Door2C
dw .Door2D
dw .Door2E
dw .Door2F
dw .Door30
dw .Door31
dw .Door32
dw .Door33
dw .Door34
dw .Door35
dw .Door36
dw .Door37
dw .Door38
dw .Door39
dw .Door3A
dw .Door3B
dw .Door3C
dw .Door3D
dw .Door3E
dw .Door3F
dw .Door40
dw .Door41
dw .Door42
dw .Door43
dw .Door44
dw .Door45
dw .Door46
dw .Door47
dw .Door48
dw .Door49
dw .Door4A
dw .Door4B
dw .Door4C
dw .Door4D
dw .Door4E
dw .Door4F
dw .Door50
dw .Door51
dw .Door52
dw .Door53
dw .Door54
dw .Door55
dw .Door56
dw .Door57
dw .Door58
dw .Door59
dw .Door5A
dw .Door5B
dw .Door5C
dw .Door5D
dw .Door5E
dw .Door5F
dw .Door60
dw .Door61
dw .Door62
dw .Door63
dw .Door64
dw .Door65
dw .Door66
dw .Door67
dw .Door68
dw .Door69
dw .Door6A
dw .Door6B
dw .Door6C
dw .Door6D
dw .Door6E
dw .Door6F
dw .Door70
dw .Door71
dw .Door72
dw .Door73
dw .Door74
dw .Door75
dw .Door76
dw .Door77
dw .Door78
dw .Door79
dw .Door7A
dw .Door7B
dw .Door7C
dw .Door7D
dw .Door7E
dw .Door7F
dw .Door80
dw .Door81
dw .Door82
dw .Door83
dw .Door84
dw .Door85
dw .Door86
dw .Door87
dw .Door88
dw .Door89
dw .Door8A
dw .Door8B
dw .Door8C
dw .Door8D
dw .Door8E
dw .Door8F
dw .Door90
dw .Door91
dw .Door92
dw .Door93
dw .Door94
dw .Door95
dw .Door96
dw .Door97
dw .Door98
dw .Door99
dw .Door9A
dw .Door9B
dw .Door9C
dw .Door9D
}
{
.DoorUndefined:
{
.Door00:
.Door04:
.Door06:
.Door07:
.Door08:
.Door09:
.Door11:
.Door12:
.Door13:
.Door14:
.Door15:
.Door19:
.Door1A:
.Door1B:
.Door1C:
.Door1D:
.Door1E:
.Door1F:
.Door20:
.Door21:
.Door25:
.Door26:
.Door27:
.Door28:
.Door29:
.Door2A:
.Door2D:
.Door2E:
.Door2F:
.Door33:
.Door38:
.Door39:
.Door3A:
.Door3B:
.Door3C:
.Door43:
.Door44:
.Door45:
.Door46:
.Door47:
.Door48:
.Door49:
.Door4A:
.Door4B:
.Door4C:
.Door4D:
.Door4E:
.Door4F:
.Door50:
.Door51:
.Door52:
.Door54:
.Door55:
.Door56:
.Door57:
.Door58:
.Door59:
.Door5A:
.Door5B:
.Door5C:
.Door5D:
.Door5E:
.Door5F:
.Door60:
.Door61:
.Door62:
.Door63:
.Door64:
.Door65:
.Door66:
.Door67:
.Door69:
.Door6E:
.Door70:
.Door71:
.Door72:
.Door74:
.Door75:
.Door76:
.Door77:
.Door78:
.Door79:
.Door7A:
.Door7B:
.Door7C:
.Door7D:
.Door7E:
.Door7F:
.Door80:
.Door81:
.Door82:
.Door83:
.Door84:
.Door85:
.Door86:
.Door87:
.Door88:
.Door89:
.Door8A:
.Door8B:
.Door8C:
.Door8D:
.Door8E:
.Door8F:
.Door90:
.Door91:
.Door92:
.Door93:
.Door94:
.Door95:
.Door96:
.Door97:
.Door98:
.Door99:
.Door9C:
.Door9D:
}
db "Undefined door"
db $ca

.Door01:
db $cd : dl TextDoorsAbbreviateEdDg
db "__Skeleton Cage"
db $ca

.Door02:
db $cd : dl TextDoorsAbbreviateEdDg
db "__First Worm Door"
db $ca

.Door03:
db $cd : dl TextDoorsAbbreviateEdDg
db "__Second Worm Door"
db $ca

.Door05:
db $cd : dl TextDoorsAbbreviateEdDg
db "__West Room Bat Door"
db $ca

.Door16:
db $cd : dl TextDoorsAbbreviateEdDg
db "__Hidden Dark Space"
db $ca

.Door17:
db $cd : dl TextDoorsAbbreviateEdDg
db "__Red Skeleton Barrier 1"
db $ca

.Door18:
db $cd : dl TextDoorsAbbreviateEdDg
db "__Red Skeleton Barrier 2"
db $ca

.Door0D:
db $cd : dl TextDoorsAbbreviateInca
db "__West Ladder"
db $ca

.Door0E:
db $cd : dl TextDoorsAbbreviateInca
db "__Final Ladder"
db $ca

.Door0F:
db $cd : dl TextDoorsAbbreviateInca
db "__Entrance Ladder"
db $ca

.Door0C:
db $cd : dl TextDoorsAbbreviateInca
db "__Water Room Ramp"
db $ca

.Door0B:
db $cd : dl TextDoorsAbbreviateInca
db "__East-West Freedan Ramp"
db $ca

.Door0A:
db $cd : dl TextDoorsAbbreviateInca
db "__Diamond Block Stairs"
db $ca

.Door10:
db $cd : dl TextDoorsAbbreviateInca
db "__Singing Statue Stairs"
db $ca

.Door34:
db $cd : dl TextDoorsAbbreviateMine
db "__Tunnel, Middle Fence"
db $ca

.Door35:
db $cd : dl TextDoorsAbbreviateMine
db "__Tunnel, South Fence"
db $ca

.Door36:
db $cd : dl TextDoorsAbbreviateMine
db "__Tunnel, North Fence"
db $ca

.Door22:
db $cd : dl TextDoorsAbbreviateMine
db "__Big Room Monster Cage"
db $ca

.Door32:
db $cd : dl TextDoorsAbbreviateMine
db "__Hidden Dark Space"
db $ca

.Door23:
db $cd : dl TextDoorsAbbreviateMine
db "__Ramp Room Worm Fence"
db $ca

.Door37:
db $cd : dl TextDoorsAbbreviateSGSE
db "__Topside Friar Barrier"
db $ca

.Door30:
db $cd : dl TextDoorsAbbreviateSGSE
db "__Darkside Chest Barrier"
db $ca

.Door24:
db $cd : dl TextDoorsAbbreviateSGSW
db "__Topside Cyber Barrier"
db $ca

.Door2B:
db $cd : dl TextDoorsAbbreviateSGSW
db "__Topside Cyber Ledge"
db $ca

.Door2C:
db $cd : dl TextDoorsAbbreviateSGSW
db "__Topside Worm Barrier"
db $ca

.Door31:
db $cd : dl TextDoorsAbbreviateSGSW
db "__Darkside Fire Cages"
db $ca

.Door3D:
db $cd : dl TextDoorsAbbreviateMu
db "__Entrance Room Barrier"
db $ca

.Door3E:
db $cd : dl TextDoorsAbbreviateMu
db "__Northeast Room Rock 1"
db $ca

.Door3F:
db $cd : dl TextDoorsAbbreviateMu
db "__Northeast Room Rock 2"
db $ca

.Door42:
db $cd : dl TextDoorsAbbreviateMu
db "__West Room Slime Cages"
db $ca

.Door41:
db $cd : dl TextDoorsAbbreviateMu
db "__East-Facing Stone Head"
db $ca

.Door40:
db $cd : dl TextDoorsAbbreviateMu
db "__South-Facing Stone Head"
db $ca

.Door53:
db $cd : dl TextDoorsAbbreviateGtWl
db "__Archer Friar Barrier"
db $ca

.Door68:
db $cd : dl TextDoorsAbbreviateKress
db "__West Chest Shortcut"
db $ca

.Door6A:
db $cd : dl TextDoorsAbbreviateGtWl
db "__Fanger Arena Exit"
db $ca

.Door6C:
db $cd : dl TextDoorsAbbreviateAnkr
db "__Entrance Stairs"
db $ca

.Door6B:
db $cd : dl TextDoorsAbbreviateAnkr
db "__Outer East Slider Hole"
db $ca

.Door6D:
db $cd : dl TextDoorsAbbreviateAnkr
db "__Dark Pit Exit"
db $ca

.Door6F:
db $cd : dl TextDoorsAbbreviateAnkr
db "__Dark Space Corridor"
db $ca

.Door73:
db $cd : dl TextDoorsAbbreviatePymd
db "__Foyer Upper Dark Space"
db $ca

.Door9A:
db $cd : dl TextDoorsAbbreviateMansion
db "__First Barrier"
db $ca

.Door9B:
db $cd : dl TextDoorsAbbreviateMansion
db "__Second Barrier"
db $ca
}

; Area name abbreviations for door names.
{
TextDoorsAbbreviateEdDg:
db "__Underground Tunnel:",$cb
db $ca

TextDoorsAbbreviateInca:
db "__Incan Ruins:",$cb
db $ca

TextDoorsAbbreviateMine:
db "__Diamond Mine:",$cb
db $ca

TextDoorsAbbreviateSGSE:
db "__Sky Garden, Southeast:",$cb
db $ca

TextDoorsAbbreviateSGSW:
db "__Sky Garden, Southwest:",$cb
db $ca

TextDoorsAbbreviateMu:
db "__Mu:",$cb
db $ca

TextDoorsAbbreviateGtWl:
db "__Great Wall:",$cb
db $ca

TextDoorsAbbreviateKress:
db "__Mt. Temple:",$cb
db $ca

TextDoorsAbbreviateAnkr:
db "__Ankor Wat:",$cb
db $ca

TextDoorsAbbreviatePymd:
db "__Pyramid:",$cb
db $ca

TextDoorsAbbreviateMansion:
db "__Jeweler's Mansion:",$cb
db $ca
}

TextItemGetSpeeds:
.Pointers:
dw .Instantaneous
dw .Fast
.Instantaneous:
db $ca
.Fast:
db $d5,$00
db $ca

TextZ3UpgradeMaybeMaxedOut:
.Pointers:
dw .NotMaxedOut
dw .IsMaxedOut
.NotMaxedOut:
db $ca
.IsMaxedOut:
db "But you're maxed out!"
db $ca

EMonsterDeathDoorOrItem:
if !SettingOrbRando == 0
lda $7f0024,x : jsl LR_SetMonsterItemFlagA
lda $7f0024,x : jsl LR_GetItemId8ForMonsterItemFlagA : sta $7f0024,x
  jsl $80b4e0    ; jsl LR_SetFlag10A
cop #$C7 : dl EMonsterDeathDoorOpener
else
cop #$B7 : db $00
lda #$0342 : sta $10
lda #$6000 : trb $12
cop #$88 : dl $8EE000
cop #$82 : db $29, $02
cop #$89
cop #$82 : db $29, $12
cop #$89
cop #$B6 : db $30
lda #$0001 : sta $0bfc    ; Slow text speed.
lda $7f0024,x : jsl LR_GetItemId16ForMonsterItemFlagA : jsl LR_GiveAnyItemA16OrSec : bcs .AnimateAndDie
.ItemGiven:
lda $7f0024,x : jsl LR_SetMonsterItemFlagA
cop #$D8
.AnimateAndDie:
stz $0bfc
cop #$80 : db $02
cop #$89
cop #$E0
endif


LR_GetItemId16ForMonsterItemFlagA:
phx
  dec : asl : tax
  lda.l .ItemList,x
plx
rtl
.ItemList:
dw !EDCageWormItem           ; db !MonsterItem01Id, !MonsterItem01Type
dw !EDSoutheastWormItem      ; db !MonsterItem02Id, !MonsterItem02Type
dw !EDSouthwestWormItem      ; db !MonsterItem03Id, !MonsterItem03Type
dw !EDDoorBatItem            ; db !MonsterItem04Id, !MonsterItem04Type
dw !EDDarkSpaceWormItem      ; db !MonsterItem05Id, !MonsterItem05Type
dw !EDSkeleton1Item          ; db !MonsterItem06Id, !MonsterItem06Type
dw !EDSkeleton2Item          ; db !MonsterItem07Id, !MonsterItem07Type
dw !IncaWestLadderItem       ; db !MonsterItem08Id, !MonsterItem08Type
dw !IncaSoutheastLadderItem  ; db !MonsterItem09Id, !MonsterItem09Type
dw !IncaNortheastLadderItem  ; db !MonsterItem0AId, !MonsterItem0AType
dw !IncaNSRampItem           ; db !MonsterItem0BId, !MonsterItem0BType
dw !IncaEWRampItem           ; db !MonsterItem0CId, !MonsterItem0CType
dw !IncaDBlockMonsterItem    ; db !MonsterItem0DId, !MonsterItem0DType
dw !IncaWMelodyMonsterItem   ; db !MonsterItem0EId, !MonsterItem0EType
dw !MineMidFenceItem         ; db !MonsterItem0FId, !MonsterItem0FType
dw !MineNorthFenceItem       ; db !MonsterItem10Id, !MonsterItem10Type
dw !MineSouthFenceItem       ; db !MonsterItem11Id, !MonsterItem11Type
dw !MineWormCageItem         ; db !MonsterItem12Id, !MonsterItem12Type
dw !MineWormDarkSpaceItem    ; db !MonsterItem13Id, !MonsterItem13Type
dw !MineFriarFenceItem       ; db !MonsterItem14Id, !MonsterItem14Type
dw !SGSETopBarrierItem       ; db !MonsterItem15Id, !MonsterItem15Type
dw !SGSEBotBarrierItem       ; db !MonsterItem16Id, !MonsterItem16Type
dw !SGSWTopPegGateItem       ; db !MonsterItem17Id, !MonsterItem17Type
dw !SGSWTopRobotRampItem     ; db !MonsterItem18Id, !MonsterItem18Type
dw !SGSWTopWormGateItem      ; db !MonsterItem19Id, !MonsterItem19Type
dw !SGSWBotFireCageItem      ; db !MonsterItem1AId, !MonsterItem1AType
dw !MuEntranceGolemItem      ; db !MonsterItem1BId, !MonsterItem1BType
dw !MuDroplet1Item           ; db !MonsterItem1CId, !MonsterItem1CType
dw !MuDroplet2Item           ; db !MonsterItem1DId, !MonsterItem1DType
dw !MuSlimeCageItem          ; db !MonsterItem1EId, !MonsterItem1EType
dw !MuEastFacingHeadGolemItem   ; db !MonsterItem1FId, !MonsterItem1FType
dw !MuSouthFacingHeadGolemItem  ; db !MonsterItem20Id, !MonsterItem20Type
dw !GtWlArcherItem           ; db !MonsterItem21Id, !MonsterItem21Type
dw $106a ;!GtWlFangerItem           ; db !MonsterItem22Id, !MonsterItem22Type
dw !KressSkullShortcutItem   ; db !MonsterItem23Id, !MonsterItem23Type
dw !WatSouthScarabItem       ; db !MonsterItem24Id, !MonsterItem24Type
dw !WatEastSliderHoleItem    ; db !MonsterItem25Id, !MonsterItem25Type
dw $106d ;!WatPitExitItem           ; db !MonsterItem26Id, !MonsterItem26Type
dw !WatDarkSpaceHallItem     ; db !MonsterItem27Id, !MonsterItem27Type
dw !PyramidEntranceOrbsItem  ; db !MonsterItem28Id, !MonsterItem28Type
dw !MansionEastGateItem      ; db !MonsterItem29Id, !MonsterItem29Type
dw !MansionWestGateItem      ; db !MonsterItem2AId, !MonsterItem2AType

LR_GetItemId8ForMonsterItemFlagA:
jsl LR_GetItemId16ForMonsterItemFlagA : and #$00ff
rtl

LR_DecHP:
lda $0aca : beq +
  dec $0aca
+:
lda $0ace : cmp $0aca : beq +
  bcc +
    dec $0ace
+:
rtl
LR_IncJewelCounter:
sed
  lda $0ab0 : clc : adc #$0001 : sta $0ab0
cld
rtl





; The first half of this code works around start-of-map camera behavior.
; Camera is clamped after 2 actor frames, then actors are
; frozen for fade-in (LR_InitMemForNewMap calls LR_ActActors twice). Spotlight
; needs to idle for 1 frame, then correct its position if the camera needs 
; to be clamped. 
db $00 : dw $3000
EDarkRoomSpotlightManager:
{
cop #$C2
lda $068a : clc : adc #$0100 : cmp $06da : bcs .WithClampRight
lda $068a : cmp $06d6 : bcs .NoClampLR
.WithClampLeft:
lda $068a : sec : sbc $06d6
  clc : adc $09a2
  sec : sbc $068a
  clc : adc #$0008
  sta $00f6
bra +
.NoClampLR:
lda $09a2 : sec : sbc $068a : clc : adc #$0008 : sta $00f6
bra +
.WithClampRight:
lda $09a2 : clc : adc #$0100 : sec : sbc $06da : clc : adc #$0008 : sta $00f6
+:
lda $068e : clc : adc #$0100 : cmp $06dc : bcs .WithClampDown
.NoClampDown:
lda $09a4 : sec : sbc $068e : sta $00fa
bra +
.WithClampDown:
lda $09a4 : clc : adc #$0100 : sec : sbc $06dc : sta $00fa
+:
lda #$0040 : sta $00fe
sep #$20
lda #$33 : sta $2123
lda #$03 : sta $2125
lda #$17 : sta $212e
lda #$13 : sta $212f
lda #$82 : sta $2130
lda #$83 : sta $2131
lda #$87 : sta $7f0c00
lda #$47 : sta $7f0c01
lda #$27 : sta $7f0c02
rep #$20
cop #$C2    ; Regular frame-by-frame behavior begins here.
lda $1010 : bit #$2000 : beq +
  rtl   ; First attempt to fix the spot while climbing stairs, by freezing it on-screen.
+:
lda $09a2 : sec : sbc $068a : clc : adc #$0008 : sta $00f6
lda $09a4 : sec : sbc $068e : sta $00fa
lda #$0040 : sta $00fe
sep #$20
lda #$33 : sta $2123
lda #$03 : sta $2125
lda #$17 : sta $212e
lda #$13 : sta $212f
lda #$82 : sta $2130
lda #$83 : sta $2131
lda #$87 : sta $7f0c00
lda #$47 : sta $7f0c01
lda #$27 : sta $7f0c02
rep #$20
rtl
}



LR_SetupIogrMap:
cop #$3B : db $71 : dl TFirebirdPaletteManager
;; Experimental dark rooms
;cop #$3C : dl $85FB34    ; HDMA spotlight thinker
;phx
;  tyx
;  lda #$0804 : sta $7f000e,x
;plx
;cop #$9C : dl EDarkRoomSpotlightManager : dw $3000
;; End experimental dark rooms
lda #$1000 : tsb $12
rtl

db $00 : dw $2000
EMonsterRespawner:
jsl LR_ClearMonsterKilledFlags
cop #$E0

-:
cop #$C1
TFirebirdPaletteManager:
lda $0AD4 : cmp #$0002 : beq +
  rtl
+:
cop #$36
cop #$39
bra -


db $00 : dw $2000
EMuDSCEntranceReturnListener:
{
cop #$D0 : db $7e,$01 : dw .Die   ; No water
stz $24
jsr .SR_StoreJmpAddrOrSec : bcs .Die
lda #$2200 : tsb $1010   ; invisible and invulnerable
lda #$fff0 : tsb $065a
cop #$DA : db $20
cop #$BF : dw .TextMustTurnBack
lda.w #.Die : sta $00
lda $24 : dec : pha : rts
.Die:
cop #$E0
.TextMustTurnBack:
table "table_dialogue.txt",rtl
db $d3
db "This path is flooded.",$cb
db "You'll have to turn",$cb
db "back."
db $c0
;stz $24
;lda #$007b : jsl LR_SecOnFlagA : bcc +
;  lda #$0001 : sta $24   ; So now $24 = 0 means "high water", = 1 means "mid water"
;+:
;lda $0644 : sec : sbc #$005f : beq .MapNW
;  dec : beq .MapNE
;  dec : beq .MapEE
;  dec : beq .MapWW
;  dec
;  dec : beq .MapSW
;  dec : beq .MapSE
;.Die:
;cop #$E0
;.MapNW:
;lda $24 : bne ..MidWater
;..HighWater:
;cop #$45 : db 47,2, 52,7 : dw .ReturnNWExitN
;..MidWater:
;cop #$45 : db 17,56, 27,64 : dw .ReturnNWExitS
;bra .Die
;.MapNE:
;lda $24 : bne ..MidWater
;..HighWater:
;cop #$45 : db 10,55, 17,64 : dw .ReturnNEExitS2
;..MidWater:
;cop #$45 : db 3,55, 10,64 : dw .ReturnNEExitS1
;bra .Die
;.MapEE:
;lda $24 : bne ..MidWater
;..HighWater:
;cop #$45 : db 10,0, 17,6 : dw .ReturnEEExitN2
;cop #$45 : db 0,39, 8,48 : dw .ReturnEEExitW2
;..MidWater:
;cop #$45 : db 4,0, 10,7 : dw .ReturnEEExitN1
;cop #$45 : db 0,29, 8,39 : dw .ReturnEEExitW1
;bra .Die
;.MapWW:
;lda $24 : bne ..MidWater
;..HighWater:
;cop #$45 : db 1,53, 11,63 : dw .ReturnWWExitS1
;cop #$45 : db 22,53, 29,63 : dw .ReturnWWExitS3
;cop #$45 : db 58,38, 65,48 : dw .ReturnWWExitE2
;..MidWater:
;cop #$45 : db 18,0, 24,8 : dw .ReturnWWExitN
;cop #$45 : db 56,29, 65,39 : dw .ReturnWWExitE1
;cop #$45 : db 11,54, 22,64 : dw .ReturnWWExitS2
;bra .Die
;.MapSW:
;lda $24 : bne ..MidWater
;..HighWater:
;cop #$45 : db 2,0, 10,8 : dw .ReturnSWExitN1
;cop #$45 : db 21,0, 29,9 : dw .ReturnSWExitN3
;cop #$45 : db 26,37, 33,46 : dw .ReturnSWExitE1
;cop #$45 : db 25,56, 34,63 : dw .ReturnSWExitE3
;..MidWater:
;cop #$45 : db 11,0, 21,8 : dw .ReturnSWExitN2
;cop #$45 : db 25,47, 33,56 : dw .ReturnSWExitE2
;bra .Die
;.MapSE:
;lda $24 : bne ..MidWater
;..HighWater:
;cop #$45 : db 0,37, 8,46 : dw .ReturnSEExitW1
;cop #$45 : db 0,56, 11,63 : dw .ReturnSEExitW3
;..MidWater:
;cop #$45 : db 0,46, 8,56 : dw .ReturnSEExitW2
;cop #$45 : db 8,36, 16,46 : dw .ReturnSEExitC
;bra .Die
.TableHighWater: ; Structure: db Map,XLeft,YTop,XRight,YBot : dw JmpAddr
db $5f, 47,2, 52,7 : dw .ReturnNWExitN
db $60, 10,55, 17,64 : dw .ReturnNEExitS2
db $61, 10,0, 17,6 : dw .ReturnEEExitN2
db $61, 0,39, 8,48 : dw .ReturnEEExitW2
db $62, 1,53, 11,63 : dw .ReturnWWExitS1
db $62, 22,53, 29,63 : dw .ReturnWWExitS3
db $62, 58,38, 65,48 : dw .ReturnWWExitE2
db $64, 2,0, 10,8 : dw .ReturnSWExitN1
db $64, 21,0, 29,9 : dw .ReturnSWExitN3
db $64, 26,37, 33,46 : dw .ReturnSWExitE1
db $64, 25,56, 34,63 : dw .ReturnSWExitE3
db $65, 0,37, 8,46 : dw .ReturnSEExitW1
db $65, 0,56, 11,63 : dw .ReturnSEExitW3
.TableMidWater:
db $5f, 17,56, 27,64 : dw .ReturnNWExitS
db $60, 3,55, 10,64 : dw .ReturnNEExitS1
db $61, 4,0, 10,7 : dw .ReturnEEExitN1
db $61, 0,29, 8,39 : dw .ReturnEEExitW1
db $62, 18,0, 24,8 : dw .ReturnWWExitN
db $62, 56,29, 65,39 : dw .ReturnWWExitE1
db $62, 11,54, 22,64 : dw .ReturnWWExitS2
db $64, 11,0, 21,8 : dw .ReturnSWExitN2
db $64, 25,47, 33,56 : dw .ReturnSWExitE2
db $65, 0,46, 8,56 : dw .ReturnSEExitW2
db $65, 8,36, 16,46 : dw .ReturnSEExitC
dw $ffff
.SR_StoreJmpAddrOrSec:
phx
ldx #$0000
lda #$007b : jsl LR_SecOnFlagA : bcs ..CheckIfInArea
  ldx.w #.TableMidWater-.TableHighWater   ; If the flag is set, start .X in the MidWater table.
..CheckIfInArea:
lda.l .TableHighWater,x : cmp #$ffff : beq ..NotInAnyArea
  and #$00ff : cmp $0644 : bne ..CheckNext   ; Wrong map.
lda.l 1+.TableHighWater,x : and #$00ff : asl : asl : asl : asl : cmp $1014 : bcs ..CheckNext
lda.l 2+.TableHighWater,x : and #$00ff : asl : asl : asl : asl : cmp $1016 : bcs ..CheckNext
lda.l 3+.TableHighWater,x : and #$00ff : asl : asl : asl : asl : cmp $1014 : bcc ..CheckNext
lda.l 4+.TableHighWater,x : and #$00ff : asl : asl : asl : asl : cmp $1016 : bcc ..CheckNext
..IsInThisArea:
lda.l 5+.TableHighWater,x : sta $24
plx
clc
rts
..CheckNext:
inx : inx : inx : inx : inx : inx : inx
bra ..CheckIfInArea
..NotInAnyArea:
plx
sec
rts
.ReturnNWExitN:
cop #$26 : db !Map5FExit05
rtl
.ReturnNWExitS:
cop #$26 : db !Map5FExit03
rtl
.ReturnNEExitS1:
cop #$26 : db !Map60Exit04
rtl
.ReturnNEExitS2:
cop #$26 : db !Map60Exit03
rtl
.ReturnEEExitN1:
cop #$26 : db !Map61Exit03
rtl
.ReturnEEExitN2:
cop #$26 : db !Map61Exit02
rtl
.ReturnEEExitW1:
cop #$26 : db !Map61Exit06
rtl
.ReturnEEExitW2:
cop #$26 : db !Map61Exit05
rtl
.ReturnWWExitN:
cop #$26 : db !Map62Exit01
rtl
.ReturnWWExitS1:
cop #$26 : db !Map62Exit08
rtl
.ReturnWWExitS2:
cop #$26 : db !Map62Exit07
rtl
.ReturnWWExitS3:
cop #$26 : db !Map62Exit06
rtl
.ReturnWWExitE1:
cop #$26 : db !Map62Exit04
rtl
.ReturnWWExitE2:
cop #$26 : db !Map62Exit03
rtl
.ReturnSWExitN1:
cop #$26 : db !Map64Exit03
rtl
.ReturnSWExitN2:
cop #$26 : db !Map64Exit02
rtl
.ReturnSWExitN3:
cop #$26 : db !Map64Exit01
rtl
.ReturnSWExitE1:
cop #$26 : db !Map64Exit04
rtl
.ReturnSWExitE2:
cop #$26 : db !Map64Exit05
rtl
.ReturnSWExitE3:
cop #$26 : db !Map64Exit06
rtl
.ReturnSEExitW1:
cop #$26 : db !Map65Exit01
rtl
.ReturnSEExitW2:
cop #$26 : db !Map65Exit02
rtl
.ReturnSEExitW3:
cop #$26 : db !Map65Exit03
rtl
.ReturnSEExitC:
cop #$26 : db !Map65Exit04
rtl
}

LR_LowerMuWaterOneStep:
cop #$D0 : db $7b,$01 : dw .ToNoWater
.ToMidWater:
cop #$CC : db $7b
rtl
.ToNoWater:
cop #$CC : db $7e
rtl







